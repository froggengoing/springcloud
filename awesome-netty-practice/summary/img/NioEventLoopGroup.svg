<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="1133" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" viewBox="0 0 1133 804" height="804"><style type="text/css"><![CDATA[
.st1 {fill:#344961;font-family:宋体;font-size:14pt}
.st3 {fill:#ff0000;font-weight:bold}
.st4 {fill:#ff0000}
.st2 {font-weight:bold}
]]></style><defs/><g id="page1" transform="translate(5,5)"><rect width="1123" stroke="#808080" fill="#ffffff" y="0" height="794" x="0"/><g transform="translate(28.76,516.86)"><path id="shape1" stroke="#8d9cb1" fill="#ffffff" d="M1070.9,58L1070.9,0L0,0L0,58L1070.9,58z"/><text class="st1"><tspan y="36" x="450.4">NioEventLoopGroup</tspan></text></g><g id="shape2" transform="translate(564.2,516.86)"><path stroke="#236ea1" fill="none" d="M0,0L0,-33.8L-0.4,-67"/><path stroke-width="1" stroke="#236ea1" stroke-linecap="round" fill="#236ea1" d="M-0.5,-71.4L-3.4,-66.2C-2.5,-66.7,-1.5,-67,-0.4,-67C.7,-67,1.7,-66.7,2.6,-66.2L-0.5,-71.4"/></g><g transform="translate(19.76,346.1)"><path id="shape3" stroke="#8d9cb1" fill="#ffffff" d="M1087.9,58L1087.9,0L0,0L0,58L1087.9,58z"/><text class="st1"><tspan y="36" x="419.5">MultithreadEventLoopGroup</tspan></text></g><g transform="translate(27.82,574.86)"><path id="shape4" stroke="#8d9cb1" fill="#ffffff" d="M0,183L0,0L1071.8,0L1071.8,183C894.9,148.1,712.8,148.1,535.9,183C359,217.9,176.9,217.9,0,183z"/><text class="st1"><tspan y="46.6" x="4.4">构造函数：</tspan><tspan y="68.6" x="4.4">super(nThreads, executor, chooserFactory, selectorProvider, selectStrategyFactory, </tspan><tspan y="90.6" x="4.4">rejectedExecutionHandler);</tspan><tspan y="112.6" x="4.4">SelectorProvider.provider()</tspan><tspan y="134.6" x="4.4">SelectStrategyFactory = new DefaultSelectStrategyFactory()</tspan><tspan y="156.6" x="4.4">RejectedExecutionHandler = io.netty.util.concurrent.RejectedExecutionHandlers#REJECT //抛异常</tspan></text></g><g transform="translate(19.76,406.1)"><path id="shape5" stroke="#8d9cb1" fill="#ffffff" d="M0,39.4L0,0L1087.9,0L1087.9,39.4C906.7,31.9,725.2,31.9,544,39.4C362.7,46.9,181.2,46.9,0,39.4z"/><text class="st1"><tspan y="19.5" x="4.5">nThreads = cpu核心数 * 2</tspan></text></g><g transform="translate(19.76,24.98)"><path id="shape6" stroke="#8d9cb1" fill="#ffffff" d="M1087.9,58L1087.9,0L0,0L0,58L1087.9,58z"/><text class="st1"><tspan y="36" x="399.5">MultithreadEventExecutorGroup</tspan></text></g><g transform="translate(19.76,82.98)"><path id="shape7" stroke="#8d9cb1" fill="#ffffff" d="M0,219.4L0,0L1087.9,0L1087.9,219.4C909,177.6,722.9,177.6,544,219.4C365.1,261.2,178.9,261.2,0,219.4z"/><text class="st1"><tspan y="45.4" x="4.5">EventExecutor[] </tspan><tspan class="st2">children</tspan><tspan> = new EventExecutor[nThreads]//接口数组，实际实现是NioEventLoop</tspan><tspan y="67.4" x="4.5">调用子类NioEventLoopGroup.newChild(executor,arg),创建对应的实现类</tspan><tspan y="89.4" x="4.5" class="st2">Executor</tspan><tspan> = new ThreadPerTaskExecutor(ThreadFactory)</tspan><tspan y="111.4" x="4.5" class="st2">ThreadFactory</tspan><tspan> = new DefaultThreadFactory(getClass(), 10)</tspan><tspan y="133.4" x="4.5" class="st3">new</tspan><tspan class="st4"> </tspan><tspan class="st3">NioEventLoop</tspan><tspan class="st4">(this, executor, SelectorProvider,SelectStrategyFactory, RejectedExecutionHandler)</tspan><tspan y="155.4" x="4.5" class="st2">EventExecutorChooserFactory</tspan><tspan> = new DefaultEventExecutorChooserFactory().newChooser(children);</tspan><tspan y="177.4" x="4.5">//保存children数组，作用是：决定选择哪个EventExecutor执行任务，其实就是数组下标的运算，round-robin轮训</tspan><tspan y="199.4" x="4.5">角色：线程工厂、执行器、选择线程器、执行对象</tspan></text></g><g id="shape8" transform="translate(563.73,346.1)"><path stroke="#236ea1" fill="none" d="M0,0L0,-39.3"/><path stroke-width="1" stroke="#236ea1" stroke-linecap="round" fill="#236ea1" d="M0,-43.7L-3,-38.5C-2.1,-39,-1.1,-39.3,0,-39.3C1.1,-39.3,2.1,-39,3,-38.5L0,-43.7"/></g></g></svg>