<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='10216' time_ms='1592961129861'>
<vm_version>
<name>
Java HotSpot(TM) 64-Bit Server VM
</name>
<release>
25.45-b02
</release>
<info>
Java HotSpot(TM) 64-Bit Server VM (25.45-b02) for windows-amd64 JRE (1.8.0_45-b14), built on Apr 10 2015 10:34:15 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)
</info>
</vm_version>
<vm_arguments>
<args>
-Dvisualvm.id=88010978552816 -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jit.log -javaagent:D:\IntelliJ IDEA 2019.1.3\lib\idea_rt.jar=54744:D:\IntelliJ IDEA 2019.1.3\bin -Dfile.encoding=UTF-8 
</args>
<command>
com.awesomeJdk.practise.bthread.Thread2_volatile
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.45-b02
java.vm.name=Java HotSpot(TM) 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext
java.endorsed.dirs=C:\Program Files\Java\jdk1.8.0_45\jre\lib\endorsed
sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_45\jre\bin
java.library.path=C:\Program Files\Java\jdk1.8.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;d:\app1\mh\product\11.2.0\dbhome_1\bin;d:\app\mh\product\11.2.0\dbhome_2\bin;d:\app\mh\product\11.2.0\dbhome_1\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files\Java\jdk1.8.0_45\bin;C:\Program Files\Java\jdk1.8.0_45\jre\bin;%CATALINA_HOME%\bin;D:\apache-maven-3.5.3\bin;D:\TortoiseSVN\bin;D:\TortoiseSVN12\bin;C:\Program Files\MySQL\MySQL Utilities 1.6\;E:\Anaconda3;E:\Anaconda3\Scripts;C:\Windows\System32;F:\软件安装\Git\cmd;F:\application\;C:\Program Files\Pandoc\;C:\cmder;D:\app1\redis;C:\Python27;C:\Python27\Scripts;F:\application\front\yarn\bin\;D:\Go\bin;F:\dev\tool\protocolbuffer\protoc-3.12.0-win64\bin;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\Program Files\erl-23.0\bin;D:\Program Files\consul;E:\Anaconda3\Library\bin;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;D:\IntelliJ IDEA 2019.1.3\bin;;C:\Program Files\Bandizip\;D:\PyCharm 2019.2\bin;;F:\application\node_global;F:\软件安装\Microsoft VS Code\bin;C:\Users\mh\AppData\Local\Yarn\bin;C:\Users\mh\go\bin;.
java.home=C:\Program Files\Java\jdk1.8.0_45\jre
java.class.path=C:\Program Files\Java\jdk1.8.0_45\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\rt.jar;D:\1PracticeProject\cloud2020\awesome-jdk-practice\target\classes;D:\apache-maven-3.5.3\repository2\org\openjdk\jmh\jmh-core\1.23\jmh-core-1.23.jar;D:\apache-maven-3.5.3\repository2\net\sf\jopt-simple\jopt-simple\4.6\jopt-simple-4.6.jar;D:\apache-maven-3.5.3\repository2\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;D:\apache-maven-3.5.3\repository2\org\openjdk\jmh\jmh-generator-annprocess\1.23\jmh-generator-annprocess-1.23.jar;D:\apache-maven-3.5.3\repository2\org\springframework\boot\spring-boot-starter-test\2.2.2.RELEASE\spring-boot-starter-test-2.2.2.RELEASE.jar;D:\apache-maven-3.5.3\repository2\org\springframework\boot\spring-boot-starter\2.2.2.RELEASE\sprin
sun.boot.class.path=C:\Program Files\Java\jdk1.8.0_45\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_45\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_45\jre\classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
visualvm.id=88010978552816
file.encoding=UTF-8
sun.java.command=com.awesomeJdk.practise.bthread.Thread2_volatile
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='8892'/>
<thread_logfile thread='8892' filename='C:\Users\mh\AppData\Local\Temp\\hs_c8892_pid10216.log'/>
<writer thread='12324'/>
<thread_logfile thread='12324' filename='C:\Users\mh\AppData\Local\Temp\\hs_c12324_pid10216.log'/>
<writer thread='15144'/>
<thread_logfile thread='15144' filename='C:\Users\mh\AppData\Local\Temp\\hs_c15144_pid10216.log'/>
<writer thread='9608'/>
<task_queued compile_id='1' method='java/lang/StringBuilder &lt;init&gt; ()V' bytes='7' count='384' iicount='384' level='3' stamp='0.258' comment='tiered' hot_count='384'/>
<writer thread='8892'/>
Loaded disassembler from C:\Program Files\Java\jdk1.8.0_45\jre\bin\server\hsdis-amd64.dll
Decoding compiled method 0x000000000f114d50:
Code:
[Disassembling for mach=&apos;i386:x86-64&apos;]
[Entry Point]
[Constants]
  # {method} {0x00000000083570a8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/StringBuilder&apos;
  #           [sp+0x50]  (sp of caller)
  0x000000000f114ec0: mov    0x8(%rdx),%r10d
  0x000000000f114ec4: cmp    %rax,%r10
  0x000000000f114ec7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f114ecd: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f114ed8: data16 data16 xchg %ax,%ax
  0x000000000f114edc: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f114ee0: mov    %eax,-0x6000(%rsp)
  0x000000000f114ee7: push   %rbp
  0x000000000f114ee8: sub    $0x40,%rsp
  0x000000000f114eec: mov    %rdx,%r8
  0x000000000f114eef: movabs $0x8574660,%rbx    ;   {metadata(method data for {method} {0x00000000083570a8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/StringBuilder&apos;)}
  0x000000000f114ef9: mov    0xdc(%rbx),%edx
  0x000000000f114eff: add    $0x8,%edx
  0x000000000f114f02: mov    %edx,0xdc(%rbx)
  0x000000000f114f08: movabs $0x83570a0,%rbx    ;   {metadata({method} {0x00000000083570a8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/StringBuilder&apos;)}
  0x000000000f114f12: and    $0x1ff8,%edx
  0x000000000f114f18: cmp    $0x0,%edx
  0x000000000f114f1b: je     0x000000000f11504d  ;*aload_0
                                                ; - java.lang.StringBuilder::&lt;init&gt;@0 (line 89)

  0x000000000f114f21: mov    %r8,%rbx
  0x000000000f114f24: movabs $0x8574660,%rdx    ;   {metadata(method data for {method} {0x00000000083570a8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/StringBuilder&apos;)}
  0x000000000f114f2e: addq   $0x1,0x108(%rdx)
  0x000000000f114f36: movabs $0x8532e28,%rbx    ;   {metadata(method data for {method} {0x0000000008353490} &apos;&lt;init&gt;&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f114f40: mov    0xdc(%rbx),%edx
  0x000000000f114f46: add    $0x8,%edx
  0x000000000f114f49: mov    %edx,0xdc(%rbx)
  0x000000000f114f4f: movabs $0x8353488,%rbx    ;   {metadata({method} {0x0000000008353490} &apos;&lt;init&gt;&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f114f59: and    $0x7ffff8,%edx
  0x000000000f114f5f: cmp    $0x0,%edx
  0x000000000f114f62: je     0x000000000f115064
  0x000000000f114f68: mov    %r8,%rbx
  0x000000000f114f6b: movabs $0x8532e28,%rdx    ;   {metadata(method data for {method} {0x0000000008353490} &apos;&lt;init&gt;&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f114f75: addq   $0x1,0x108(%rdx)
  0x000000000f114f7d: movabs $0x840e480,%rbx    ;   {metadata(method data for {method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f114f87: mov    0xdc(%rbx),%edx
  0x000000000f114f8d: add    $0x8,%edx
  0x000000000f114f90: mov    %edx,0xdc(%rbx)
  0x000000000f114f96: movabs $0x82e0488,%rbx    ;   {metadata({method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f114fa0: and    $0x7ffff8,%edx
  0x000000000f114fa6: cmp    $0x0,%edx
  0x000000000f114fa9: je     0x000000000f11507b
  0x000000000f114faf: mov    $0x10,%ebx
  0x000000000f114fb4: movabs $0x1e010208,%rdx   ;   {metadata({type array char})}
  0x000000000f114fbe: movslq %ebx,%rbx
  0x000000000f114fc1: mov    %rbx,%rdi
  0x000000000f114fc4: cmp    $0xffffff,%rbx
  0x000000000f114fcb: ja     0x000000000f115092
  0x000000000f114fd1: movabs $0x17,%rsi
  0x000000000f114fdb: lea    (%rsi,%rbx,2),%rsi
  0x000000000f114fdf: and    $0xfffffffffffffff8,%rsi
  0x000000000f114fe3: mov    0x60(%r15),%rax
  0x000000000f114fe7: lea    (%rax,%rsi,1),%rsi
  0x000000000f114feb: cmp    0x70(%r15),%rsi
  0x000000000f114fef: ja     0x000000000f115092
  0x000000000f114ff5: mov    %rsi,0x60(%r15)
  0x000000000f114ff9: sub    %rax,%rsi
  0x000000000f114ffc: movq   $0x1,(%rax)
  0x000000000f115003: mov    %rdx,%rcx
  0x000000000f115006: mov    %ecx,0x8(%rax)
  0x000000000f115009: mov    %ebx,0xc(%rax)
  0x000000000f11500c: sub    $0x10,%rsi
  0x000000000f115010: je     0x000000000f115027
  0x000000000f115016: xor    %rbx,%rbx
  0x000000000f115019: shr    $0x3,%rsi
  0x000000000f11501d: mov    %rbx,0x8(%rax,%rsi,8)
  0x000000000f115022: dec    %rsi
  0x000000000f115025: jne    0x000000000f11501d  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)

  0x000000000f115027: mov    %rax,%r10
  0x000000000f11502a: mov    %r10d,0x10(%r8)
  0x000000000f11502e: shr    $0x9,%r8
  0x000000000f115032: movabs $0x2dd5000,%rsi
  0x000000000f11503c: movb   $0x0,(%r8,%rsi,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@8 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)

  0x000000000f115041: add    $0x40,%rsp
  0x000000000f115045: pop    %rbp
  0x000000000f115046: test   %eax,-0xeef4f4c(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f11504c: retq   
  0x000000000f11504d: mov    %rbx,0x8(%rsp)
  0x000000000f115052: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f11505a: callq  0x000000000f111820  ; OopMap{r8=Oop off=415}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuilder::&lt;init&gt;@-1 (line 89)
                                                ;   {runtime_call}
  0x000000000f11505f: jmpq   0x000000000f114f21
  0x000000000f115064: mov    %rbx,0x8(%rsp)
  0x000000000f115069: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f115071: callq  0x000000000f111820  ; OopMap{r8=Oop off=438}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@-1 (line 67)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ;   {runtime_call}
  0x000000000f115076: jmpq   0x000000000f114f68
  0x000000000f11507b: mov    %rbx,0x8(%rsp)
  0x000000000f115080: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f115088: callq  0x000000000f111820  ; OopMap{r8=Oop off=461}
                                                ;*synchronization entry
                                                ; - java.lang.Object::&lt;init&gt;@-1 (line 37)
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@1 (line 67)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ;   {runtime_call}
  0x000000000f11508d: jmpq   0x000000000f114faf
  0x000000000f115092: callq  0x000000000f10e000  ; OopMap{r8=Oop off=471}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ;   {runtime_call}
  0x000000000f115097: jmp    0x000000000f115027
  0x000000000f115099: nop
  0x000000000f11509a: nop
  0x000000000f11509b: mov    0x2a8(%r15),%rax
  0x000000000f1150a2: movabs $0x0,%r10
  0x000000000f1150ac: mov    %r10,0x2a8(%r15)
  0x000000000f1150b3: movabs $0x0,%r10
  0x000000000f1150bd: mov    %r10,0x2b0(%r15)
  0x000000000f1150c4: add    $0x40,%rsp
  0x000000000f1150c8: pop    %rbp
  0x000000000f1150c9: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1150ce: hlt    
  0x000000000f1150cf: hlt    
  0x000000000f1150d0: hlt    
  0x000000000f1150d1: hlt    
  0x000000000f1150d2: hlt    
  0x000000000f1150d3: hlt    
  0x000000000f1150d4: hlt    
  0x000000000f1150d5: hlt    
  0x000000000f1150d6: hlt    
  0x000000000f1150d7: hlt    
  0x000000000f1150d8: hlt    
  0x000000000f1150d9: hlt    
  0x000000000f1150da: hlt    
  0x000000000f1150db: hlt    
  0x000000000f1150dc: hlt    
  0x000000000f1150dd: hlt    
  0x000000000f1150de: hlt    
  0x000000000f1150df: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f1150e0: callq  0x000000000f10efa0  ;   {no_reloc}
  0x000000000f1150e5: mov    %rsp,-0x28(%rsp)
  0x000000000f1150ea: sub    $0x80,%rsp
  0x000000000f1150f1: mov    %rax,0x78(%rsp)
  0x000000000f1150f6: mov    %rcx,0x70(%rsp)
  0x000000000f1150fb: mov    %rdx,0x68(%rsp)
  0x000000000f115100: mov    %rbx,0x60(%rsp)
  0x000000000f115105: mov    %rbp,0x50(%rsp)
  0x000000000f11510a: mov    %rsi,0x48(%rsp)
  0x000000000f11510f: mov    %rdi,0x40(%rsp)
  0x000000000f115114: mov    %r8,0x38(%rsp)
  0x000000000f115119: mov    %r9,0x30(%rsp)
  0x000000000f11511e: mov    %r10,0x28(%rsp)
  0x000000000f115123: mov    %r11,0x20(%rsp)
  0x000000000f115128: mov    %r12,0x18(%rsp)
  0x000000000f11512d: mov    %r13,0x10(%rsp)
  0x000000000f115132: mov    %r14,0x8(%rsp)
  0x000000000f115137: mov    %r15,(%rsp)
  0x000000000f11513b: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f115145: movabs $0xf1150e5,%rdx    ;   {internal_word}
  0x000000000f11514f: mov    %rsp,%r8
  0x000000000f115152: and    $0xfffffffffffffff0,%rsp
  0x000000000f115156: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f11515b: hlt    
[Deopt Handler Code]
  0x000000000f11515c: movabs $0xf11515c,%r10    ;   {section_word}
  0x000000000f115166: push   %r10
  0x000000000f115168: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f11516d: hlt    
  0x000000000f11516e: hlt    
  0x000000000f11516f: hlt    
<nmethod compile_id='1' compiler='C1' level='3' entry='0x000000000f114ec0' size='1312' address='0x000000000f114d50' relocation_offset='288' insts_offset='368' stub_offset='912' scopes_data_offset='1080' scopes_pcs_offset='1160' dependencies_offset='1304' method='java/lang/StringBuilder &lt;init&gt; ()V' bytes='7' count='384' iicount='384' stamp='0.264'/>
<writer thread='9608'/>
<task_queued compile_id='2' method='java/lang/Math min (II)I' bytes='11' count='4096' iicount='4096' level='3' stamp='0.264' comment='tiered' hot_count='4096'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f113390:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000000083b46a0} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;
  # parm0:    rdx       = int
  # parm1:    r8        = int
  #           [sp+0x40]  (sp of caller)
  0x000000000f1134e0: mov    %eax,-0x6000(%rsp)
  0x000000000f1134e7: push   %rbp
  0x000000000f1134e8: sub    $0x30,%rsp
  0x000000000f1134ec: movabs $0x84c80d8,%rax    ;   {metadata(method data for {method} {0x00000000083b46a0} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x000000000f1134f6: mov    0xdc(%rax),%esi
  0x000000000f1134fc: add    $0x8,%esi
  0x000000000f1134ff: mov    %esi,0xdc(%rax)
  0x000000000f113505: movabs $0x83b4698,%rax    ;   {metadata({method} {0x00000000083b46a0} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x000000000f11350f: and    $0x1ff8,%esi
  0x000000000f113515: cmp    $0x0,%esi
  0x000000000f113518: je     0x000000000f11357e  ;*iload_0
                                                ; - java.lang.Math::min@0 (line 1336)

  0x000000000f11351e: cmp    %r8d,%edx
  0x000000000f113521: movabs $0x84c80d8,%rax    ;   {metadata(method data for {method} {0x00000000083b46a0} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x000000000f11352b: movabs $0x108,%rsi
  0x000000000f113535: jg     0x000000000f113545
  0x000000000f11353b: movabs $0x118,%rsi
  0x000000000f113545: mov    (%rax,%rsi,1),%rdi
  0x000000000f113549: lea    0x1(%rdi),%rdi
  0x000000000f11354d: mov    %rdi,(%rax,%rsi,1)
  0x000000000f113551: jg     0x000000000f11356c  ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  0x000000000f113557: movabs $0x84c80d8,%rax    ;   {metadata(method data for {method} {0x00000000083b46a0} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x000000000f113561: incl   0x128(%rax)
  0x000000000f113567: jmpq   0x000000000f11356f  ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)

  0x000000000f11356c: mov    %r8,%rdx           ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  0x000000000f11356f: mov    %rdx,%rax
  0x000000000f113572: add    $0x30,%rsp
  0x000000000f113576: pop    %rbp
  0x000000000f113577: test   %eax,-0xeef347d(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f11357d: retq   
  0x000000000f11357e: mov    %rax,0x8(%rsp)
  0x000000000f113583: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f11358b: callq  0x000000000f111820  ; OopMap{off=176}
                                                ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)
                                                ;   {runtime_call}
  0x000000000f113590: jmp    0x000000000f11351e
  0x000000000f113592: nop
  0x000000000f113593: nop
  0x000000000f113594: mov    0x2a8(%r15),%rax
  0x000000000f11359b: movabs $0x0,%r10
  0x000000000f1135a5: mov    %r10,0x2a8(%r15)
  0x000000000f1135ac: movabs $0x0,%r10
  0x000000000f1135b6: mov    %r10,0x2b0(%r15)
  0x000000000f1135bd: add    $0x30,%rsp
  0x000000000f1135c1: pop    %rbp
  0x000000000f1135c2: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1135c7: hlt    
  0x000000000f1135c8: hlt    
  0x000000000f1135c9: hlt    
  0x000000000f1135ca: hlt    
  0x000000000f1135cb: hlt    
  0x000000000f1135cc: hlt    
  0x000000000f1135cd: hlt    
  0x000000000f1135ce: hlt    
  0x000000000f1135cf: hlt    
  0x000000000f1135d0: hlt    
  0x000000000f1135d1: hlt    
  0x000000000f1135d2: hlt    
  0x000000000f1135d3: hlt    
  0x000000000f1135d4: hlt    
  0x000000000f1135d5: hlt    
  0x000000000f1135d6: hlt    
  0x000000000f1135d7: hlt    
  0x000000000f1135d8: hlt    
  0x000000000f1135d9: hlt    
  0x000000000f1135da: hlt    
  0x000000000f1135db: hlt    
  0x000000000f1135dc: hlt    
  0x000000000f1135dd: hlt    
  0x000000000f1135de: hlt    
  0x000000000f1135df: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f1135e0: callq  0x000000000f10efa0  ;   {no_reloc}
  0x000000000f1135e5: mov    %rsp,-0x28(%rsp)
  0x000000000f1135ea: sub    $0x80,%rsp
  0x000000000f1135f1: mov    %rax,0x78(%rsp)
  0x000000000f1135f6: mov    %rcx,0x70(%rsp)
  0x000000000f1135fb: mov    %rdx,0x68(%rsp)
  0x000000000f113600: mov    %rbx,0x60(%rsp)
  0x000000000f113605: mov    %rbp,0x50(%rsp)
  0x000000000f11360a: mov    %rsi,0x48(%rsp)
  0x000000000f11360f: mov    %rdi,0x40(%rsp)
  0x000000000f113614: mov    %r8,0x38(%rsp)
  0x000000000f113619: mov    %r9,0x30(%rsp)
  0x000000000f11361e: mov    %r10,0x28(%rsp)
  0x000000000f113623: mov    %r11,0x20(%rsp)
  0x000000000f113628: mov    %r12,0x18(%rsp)
  0x000000000f11362d: mov    %r13,0x10(%rsp)
  0x000000000f113632: mov    %r14,0x8(%rsp)
  0x000000000f113637: mov    %r15,(%rsp)
  0x000000000f11363b: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f113645: movabs $0xf1135e5,%rdx    ;   {internal_word}
  0x000000000f11364f: mov    %rsp,%r8
  0x000000000f113652: and    $0xfffffffffffffff0,%rsp
  0x000000000f113656: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f11365b: hlt    
[Deopt Handler Code]
  0x000000000f11365c: movabs $0xf11365c,%r10    ;   {section_word}
  0x000000000f113666: push   %r10
  0x000000000f113668: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f11366d: hlt    
  0x000000000f11366e: hlt    
  0x000000000f11366f: hlt    
<nmethod compile_id='2' compiler='C1' level='3' entry='0x000000000f1134e0' size='904' address='0x000000000f113390' relocation_offset='288' insts_offset='336' stub_offset='592' scopes_data_offset='744' scopes_pcs_offset='784' dependencies_offset='896' method='java/lang/Math min (II)I' bytes='11' count='4100' iicount='4100' stamp='0.267'/>
<blob name='MethodHandlesAdapterBlob' size='32000'>
<sect index='1' size='32000' free='31636'/>
</blob>
<writer thread='6336'/>
<task_queued compile_id='3' method='java/lang/String hashCode ()I' bytes='55' count='1542' backedge_count='37888' iicount='1542' stamp='0.268' comment='tiered' hot_count='1542'/>
<writer thread='9608'/>
<task_queued compile_id='4' method='java/lang/String charAt (I)C' bytes='29' count='133504' iicount='133504' stamp='0.268' comment='tiered' hot_count='133504'/>
<writer thread='6336'/>
<task_queued compile_id='5' method='sun/instrument/TransformerManager getSnapshotTransformerList ()[Lsun/instrument/TransformerManager$TransformerInfo;' bytes='5' count='128' iicount='128' level='1' stamp='0.268' comment='tiered' hot_count='128'/>
<task_queued compile_id='6' method='java/lang/AbstractStringBuilder ensureCapacityInternal (I)V' bytes='16' count='23424' iicount='23424' stamp='0.268' comment='tiered' hot_count='23424'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f112810:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000084cdf50} &apos;getSnapshotTransformerList&apos; &apos;()[Lsun/instrument/TransformerManager$TransformerInfo;&apos; in &apos;sun/instrument/TransformerManager&apos;
  #           [sp+0x40]  (sp of caller)
  0x000000000f112960: mov    0x8(%rdx),%r10d
  0x000000000f112964: cmp    %rax,%r10
  0x000000000f112967: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11296d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f112978: data16 data16 xchg %ax,%ax
  0x000000000f11297c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f112980: mov    %eax,-0x6000(%rsp)
  0x000000000f112987: push   %rbp
  0x000000000f112988: sub    $0x30,%rsp         ;*aload_0
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@0 (line 166)

  0x000000000f11298c: mov    0x10(%rdx),%eax    ;*getfield mTransformerList
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@1 (line 166)

  0x000000000f11298f: add    $0x30,%rsp
  0x000000000f112993: pop    %rbp
  0x000000000f112994: test   %eax,-0xeef289a(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f11299a: retq   
  0x000000000f11299b: nop
  0x000000000f11299c: nop
  0x000000000f11299d: mov    0x2a8(%r15),%rax
  0x000000000f1129a4: movabs $0x0,%r10
  0x000000000f1129ae: mov    %r10,0x2a8(%r15)
  0x000000000f1129b5: movabs $0x0,%r10
  0x000000000f1129bf: mov    %r10,0x2b0(%r15)
  0x000000000f1129c6: add    $0x30,%rsp
  0x000000000f1129ca: pop    %rbp
  0x000000000f1129cb: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1129d0: hlt    
  0x000000000f1129d1: hlt    
  0x000000000f1129d2: hlt    
  0x000000000f1129d3: hlt    
  0x000000000f1129d4: hlt    
  0x000000000f1129d5: hlt    
  0x000000000f1129d6: hlt    
  0x000000000f1129d7: hlt    
  0x000000000f1129d8: hlt    
  0x000000000f1129d9: hlt    
  0x000000000f1129da: hlt    
  0x000000000f1129db: hlt    
  0x000000000f1129dc: hlt    
  0x000000000f1129dd: hlt    
  0x000000000f1129de: hlt    
  0x000000000f1129df: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f1129e0: callq  0x000000000f10efa0  ;   {no_reloc}
  0x000000000f1129e5: mov    %rsp,-0x28(%rsp)
  0x000000000f1129ea: sub    $0x80,%rsp
  0x000000000f1129f1: mov    %rax,0x78(%rsp)
  0x000000000f1129f6: mov    %rcx,0x70(%rsp)
  0x000000000f1129fb: mov    %rdx,0x68(%rsp)
  0x000000000f112a00: mov    %rbx,0x60(%rsp)
  0x000000000f112a05: mov    %rbp,0x50(%rsp)
  0x000000000f112a0a: mov    %rsi,0x48(%rsp)
  0x000000000f112a0f: mov    %rdi,0x40(%rsp)
  0x000000000f112a14: mov    %r8,0x38(%rsp)
  0x000000000f112a19: mov    %r9,0x30(%rsp)
  0x000000000f112a1e: mov    %r10,0x28(%rsp)
  0x000000000f112a23: mov    %r11,0x20(%rsp)
  0x000000000f112a28: mov    %r12,0x18(%rsp)
  0x000000000f112a2d: mov    %r13,0x10(%rsp)
  0x000000000f112a32: mov    %r14,0x8(%rsp)
  0x000000000f112a37: mov    %r15,(%rsp)
  0x000000000f112a3b: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f112a45: movabs $0xf1129e5,%rdx    ;   {internal_word}
  0x000000000f112a4f: mov    %rsp,%r8
  0x000000000f112a52: and    $0xfffffffffffffff0,%rsp
  0x000000000f112a56: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f112a5b: hlt    
[Deopt Handler Code]
  0x000000000f112a5c: movabs $0xf112a5c,%r10    ;   {section_word}
  0x000000000f112a66: push   %r10
  0x000000000f112a68: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f112a6d: hlt    
  0x000000000f112a6e: hlt    
  0x000000000f112a6f: hlt    
<nmethod compile_id='5' compiler='C1' level='1' entry='0x000000000f112960' size='704' address='0x000000000f112810' relocation_offset='288' insts_offset='336' stub_offset='464' scopes_data_offset='616' scopes_pcs_offset='632' dependencies_offset='696' method='sun/instrument/TransformerManager getSnapshotTransformerList ()[Lsun/instrument/TransformerManager$TransformerInfo;' bytes='5' count='129' iicount='129' stamp='0.271'/>
<writer thread='6336'/>
<task_queued compile_id='7' method='java/lang/String length ()I' bytes='6' count='29184' iicount='29184' stamp='0.272' comment='tiered' hot_count='29184'/>
<task_queued compile_id='8' method='java/lang/String startsWith (Ljava/lang/String;)Z' bytes='7' count='512' iicount='512' level='3' stamp='0.272' comment='tiered' hot_count='512'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f114510:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e4e18} &apos;startsWith&apos; &apos;(Ljava/lang/String;)Z&apos; in &apos;java/lang/String&apos;
  # this:     rdx:rdx   = &apos;java/lang/String&apos;
  # parm0:    r8:r8     = &apos;java/lang/String&apos;
  #           [sp+0x40]  (sp of caller)
  0x000000000f114680: mov    0x8(%rdx),%r10d
  0x000000000f114684: cmp    %rax,%r10
  0x000000000f114687: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11468d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f114698: data16 data16 xchg %ax,%ax
  0x000000000f11469c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f1146a0: mov    %eax,-0x6000(%rsp)
  0x000000000f1146a7: push   %rbp
  0x000000000f1146a8: sub    $0x30,%rsp
  0x000000000f1146ac: movabs $0x8586ab8,%r9     ;   {metadata(method data for {method} {0x00000000082e4e18} &apos;startsWith&apos; &apos;(Ljava/lang/String;)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f1146b6: mov    0xdc(%r9),%esi
  0x000000000f1146bd: add    $0x8,%esi
  0x000000000f1146c0: mov    %esi,0xdc(%r9)
  0x000000000f1146c7: movabs $0x82e4e10,%r9     ;   {metadata({method} {0x00000000082e4e18} &apos;startsWith&apos; &apos;(Ljava/lang/String;)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f1146d1: and    $0x1ff8,%esi
  0x000000000f1146d7: cmp    $0x0,%esi
  0x000000000f1146da: je     0x000000000f114788  ;*aload_0
                                                ; - java.lang.String::startsWith@0 (line 1422)

  0x000000000f1146e0: mov    %rdx,%r9
  0x000000000f1146e3: movabs $0x8586ab8,%rsi    ;   {metadata(method data for {method} {0x00000000082e4e18} &apos;startsWith&apos; &apos;(Ljava/lang/String;)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f1146ed: mov    0x8(%r9),%r9d
  0x000000000f1146f1: cmp    0x110(%rsi),%r9
  0x000000000f1146f8: jne    0x000000000f114707
  0x000000000f1146fa: addq   $0x1,0x118(%rsi)
  0x000000000f114702: jmpq   0x000000000f11476d
  0x000000000f114707: cmp    0x120(%rsi),%r9
  0x000000000f11470e: jne    0x000000000f11471d
  0x000000000f114710: addq   $0x1,0x128(%rsi)
  0x000000000f114718: jmpq   0x000000000f11476d
  0x000000000f11471d: cmpq   $0x0,0x110(%rsi)
  0x000000000f114728: jne    0x000000000f114741
  0x000000000f11472a: mov    %r9,0x110(%rsi)
  0x000000000f114731: movq   $0x1,0x118(%rsi)
  0x000000000f11473c: jmpq   0x000000000f11476d
  0x000000000f114741: cmpq   $0x0,0x120(%rsi)
  0x000000000f11474c: jne    0x000000000f114765
  0x000000000f11474e: mov    %r9,0x120(%rsi)
  0x000000000f114755: movq   $0x1,0x128(%rsi)
  0x000000000f114760: jmpq   0x000000000f11476d
  0x000000000f114765: addq   $0x1,0x108(%rsi)
  0x000000000f11476d: mov    $0x0,%r9d          ;*invokevirtual startsWith
                                                ; - java.lang.String::startsWith@3 (line 1422)

  0x000000000f114773: nop
  0x000000000f114774: nop
  0x000000000f114775: nop
  0x000000000f114776: nop
  0x000000000f114777: callq  0x000000000f0561a0  ; OopMap{off=252}
                                                ;*invokevirtual startsWith
                                                ; - java.lang.String::startsWith@3 (line 1422)
                                                ;   {optimized virtual_call}
  0x000000000f11477c: add    $0x30,%rsp
  0x000000000f114780: pop    %rbp
  0x000000000f114781: test   %eax,-0xeef4687(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f114787: retq   
  0x000000000f114788: mov    %r9,0x8(%rsp)
  0x000000000f11478d: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f114795: callq  0x000000000f111820  ; OopMap{rdx=Oop r8=Oop off=282}
                                                ;*synchronization entry
                                                ; - java.lang.String::startsWith@-1 (line 1422)
                                                ;   {runtime_call}
  0x000000000f11479a: jmpq   0x000000000f1146e0
  0x000000000f11479f: nop
  0x000000000f1147a0: nop
  0x000000000f1147a1: mov    0x2a8(%r15),%rax
  0x000000000f1147a8: movabs $0x0,%r10
  0x000000000f1147b2: mov    %r10,0x2a8(%r15)
  0x000000000f1147b9: movabs $0x0,%r10
  0x000000000f1147c3: mov    %r10,0x2b0(%r15)
  0x000000000f1147ca: add    $0x30,%rsp
  0x000000000f1147ce: pop    %rbp
  0x000000000f1147cf: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1147d4: hlt    
  0x000000000f1147d5: hlt    
  0x000000000f1147d6: hlt    
  0x000000000f1147d7: hlt    
  0x000000000f1147d8: hlt    
  0x000000000f1147d9: hlt    
  0x000000000f1147da: hlt    
  0x000000000f1147db: hlt    
  0x000000000f1147dc: hlt    
  0x000000000f1147dd: hlt    
  0x000000000f1147de: hlt    
  0x000000000f1147df: hlt    
[Stub Code]
  0x000000000f1147e0: nop                       ;   {no_reloc}
  0x000000000f1147e1: nop
  0x000000000f1147e2: nop
  0x000000000f1147e3: nop
  0x000000000f1147e4: nop
  0x000000000f1147e5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1147ef: jmpq   0x000000000f1147ef  ;   {runtime_call}
[Exception Handler]
  0x000000000f1147f4: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f1147f9: mov    %rsp,-0x28(%rsp)
  0x000000000f1147fe: sub    $0x80,%rsp
  0x000000000f114805: mov    %rax,0x78(%rsp)
  0x000000000f11480a: mov    %rcx,0x70(%rsp)
  0x000000000f11480f: mov    %rdx,0x68(%rsp)
  0x000000000f114814: mov    %rbx,0x60(%rsp)
  0x000000000f114819: mov    %rbp,0x50(%rsp)
  0x000000000f11481e: mov    %rsi,0x48(%rsp)
  0x000000000f114823: mov    %rdi,0x40(%rsp)
  0x000000000f114828: mov    %r8,0x38(%rsp)
  0x000000000f11482d: mov    %r9,0x30(%rsp)
  0x000000000f114832: mov    %r10,0x28(%rsp)
  0x000000000f114837: mov    %r11,0x20(%rsp)
  0x000000000f11483c: mov    %r12,0x18(%rsp)
  0x000000000f114841: mov    %r13,0x10(%rsp)
  0x000000000f114846: mov    %r14,0x8(%rsp)
  0x000000000f11484b: mov    %r15,(%rsp)
  0x000000000f11484f: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f114859: movabs $0xf1147f9,%rdx    ;   {internal_word}
  0x000000000f114863: mov    %rsp,%r8
  0x000000000f114866: and    $0xfffffffffffffff0,%rsp
  0x000000000f11486a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f11486f: hlt    
[Deopt Handler Code]
  0x000000000f114870: movabs $0xf114870,%r10    ;   {section_word}
  0x000000000f11487a: push   %r10
  0x000000000f11487c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f114881: hlt    
  0x000000000f114882: hlt    
  0x000000000f114883: hlt    
  0x000000000f114884: hlt    
  0x000000000f114885: hlt    
  0x000000000f114886: hlt    
  0x000000000f114887: hlt    
<nmethod compile_id='8' compiler='C1' level='3' entry='0x000000000f114680' size='1040' address='0x000000000f114510' relocation_offset='288' insts_offset='368' stub_offset='720' scopes_data_offset='896' scopes_pcs_offset='936' dependencies_offset='1032' method='java/lang/String startsWith (Ljava/lang/String;)Z' bytes='7' count='534' iicount='534' stamp='0.276'/>
<writer thread='6336'/>
<task_queued compile_id='9' method='java/lang/String startsWith (Ljava/lang/String;I)Z' bytes='72' count='896' backedge_count='1236' iicount='896' level='3' stamp='0.276' comment='tiered' hot_count='896'/>
<task_queued compile_id='10' method='java/util/zip/ZipFile ensureOpen ()V' bytes='37' count='384' iicount='384' level='3' stamp='0.276' comment='tiered' hot_count='384'/>
<task_queued compile_id='11' method='java/util/zip/ZipCoder getBytes (Ljava/lang/String;)[B' bytes='192' count='384' iicount='384' level='3' stamp='0.276' comment='tiered' hot_count='384'/>
<task_queued compile_id='12' method='java/util/zip/ZipCoder encoder ()Ljava/nio/charset/CharsetEncoder;' bytes='35' count='384' iicount='384' level='3' stamp='0.276' comment='tiered' hot_count='384'/>
<task_queued compile_id='13' method='java/nio/charset/CharsetEncoder reset ()Ljava/nio/charset/CharsetEncoder;' bytes='11' count='384' iicount='384' level='3' stamp='0.276' comment='tiered' hot_count='384'/>
<task_queued compile_id='14' method='java/nio/charset/CharsetEncoder implReset ()V' bytes='1' count='384' iicount='384' level='3' stamp='0.276' comment='tiered' hot_count='384'/>
Decoding compiled method 0x000000000f114150:
Code:
[Entry Point]
  # {method} {0x00000000082f95d8} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
  # parm1:    r8        = int
  # parm2:    r9:r9     = &apos;java/lang/Object&apos;
  # parm3:    rdi       = int
  # parm4:    rsi       = int
  #           [sp+0x90]  (sp of caller)
  0x000000000f1142c0: mov    0x8(%rdx),%r10d
  0x000000000f1142c4: cmp    %r10,%rax
  0x000000000f1142c7: je     0x000000000f1142d8
  0x000000000f1142cd: jmpq   0x000000000f055f60  ;   {runtime_call}
  0x000000000f1142d2: nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x000000000f1142d8: mov    %eax,-0x6000(%rsp)
  0x000000000f1142df: push   %rbp
  0x000000000f1142e0: mov    %rsp,%rbp
  0x000000000f1142e3: sub    $0x80,%rsp
  0x000000000f1142ea: mov    %rsi,0x30(%rsp)
  0x000000000f1142ef: mov    %rdi,0x28(%rsp)
  0x000000000f1142f4: mov    %r9,0x48(%rsp)
  0x000000000f1142f9: cmp    $0x0,%r9
  0x000000000f1142fd: lea    0x48(%rsp),%rax
  0x000000000f114302: cmove  0x48(%rsp),%rax
  0x000000000f114308: mov    %rax,0x20(%rsp)
  0x000000000f11430d: mov    %r8,%r9
  0x000000000f114310: mov    %rdx,0x38(%rsp)
  0x000000000f114315: cmp    $0x0,%rdx
  0x000000000f114319: lea    0x38(%rsp),%r8
  0x000000000f11431e: cmove  0x38(%rsp),%r8
  0x000000000f114324: movabs $0xd5d00c78,%r14   ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x000000000f11432e: mov    %r14,0x68(%rsp)
  0x000000000f114333: lea    0x68(%rsp),%r14
  0x000000000f114338: mov    %r14,%rdx          ; OopMap{[72]=Oop [56]=Oop [104]=Oop off=123}
  0x000000000f11433b: movabs $0xf11433b,%r10    ;   {section_word}
  0x000000000f114345: mov    %r10,0x1e0(%r15)
  0x000000000f11434c: mov    %rsp,0x1d8(%r15)
  0x000000000f114353: cmpb   $0x0,-0xc7da273(%rip)        # 0x000000000293a0e7
                                                ;   {external_word}
  0x000000000f11435a: je     0x000000000f1143a2
  0x000000000f114360: push   %rdx
  0x000000000f114361: push   %r8
  0x000000000f114363: push   %r9
  0x000000000f114365: movabs $0x82f95d0,%rdx    ;   {metadata({method} {0x00000000082f95d8} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;)}
  0x000000000f11436f: mov    %r15,%rcx
  0x000000000f114372: sub    $0x20,%rsp
  0x000000000f114376: test   $0xf,%esp
  0x000000000f11437c: je     0x000000000f114394
  0x000000000f114382: sub    $0x8,%rsp
  0x000000000f114386: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f11438b: add    $0x8,%rsp
  0x000000000f11438f: jmpq   0x000000000f114399
  0x000000000f114394: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f114399: add    $0x20,%rsp
  0x000000000f11439d: pop    %r9
  0x000000000f11439f: pop    %r8
  0x000000000f1143a1: pop    %rdx
  0x000000000f1143a2: lea    0x1f8(%r15),%rcx
  0x000000000f1143a9: movl   $0x4,0x270(%r15)
  0x000000000f1143b4: callq  0x000000006d030476  ;   {runtime_call}
  0x000000000f1143b9: vzeroupper 
  0x000000000f1143bc: movl   $0x5,0x270(%r15)
  0x000000000f1143c7: mov    %r15d,%ecx
  0x000000000f1143ca: shr    $0x4,%ecx
  0x000000000f1143cd: and    $0xffc,%ecx
  0x000000000f1143d3: movabs $0x230000,%r10     ;   {external_word}
  0x000000000f1143dd: mov    %ecx,(%r10,%rcx,1)
  0x000000000f1143e1: cmpl   $0x0,-0xc7d971b(%rip)        # 0x000000000293acd0
                                                ;   {external_word}
  0x000000000f1143eb: jne    0x000000000f1143ff
  0x000000000f1143f1: cmpl   $0x0,0x30(%r15)
  0x000000000f1143f9: je     0x000000000f114418
  0x000000000f1143ff: mov    %r15,%rcx
  0x000000000f114402: mov    %rsp,%r12
  0x000000000f114405: sub    $0x20,%rsp
  0x000000000f114409: and    $0xfffffffffffffff0,%rsp
  0x000000000f11440d: callq  0x000000000237f110  ;   {runtime_call}
  0x000000000f114412: mov    %r12,%rsp
  0x000000000f114415: xor    %r12,%r12
  0x000000000f114418: movl   $0x8,0x270(%r15)
  0x000000000f114423: cmpl   $0x1,0x29c(%r15)
  0x000000000f11442e: je     0x000000000f1144be
  0x000000000f114434: cmpb   $0x0,-0xc7da354(%rip)        # 0x000000000293a0e7
                                                ;   {external_word}
  0x000000000f11443b: je     0x000000000f114479
  0x000000000f114441: movabs $0x82f95d0,%rdx    ;   {metadata({method} {0x00000000082f95d8} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;)}
  0x000000000f11444b: mov    %r15,%rcx
  0x000000000f11444e: sub    $0x20,%rsp
  0x000000000f114452: test   $0xf,%esp
  0x000000000f114458: je     0x000000000f114470
  0x000000000f11445e: sub    $0x8,%rsp
  0x000000000f114462: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f114467: add    $0x8,%rsp
  0x000000000f11446b: jmpq   0x000000000f114475
  0x000000000f114470: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f114475: add    $0x20,%rsp
  0x000000000f114479: movabs $0x0,%r10
  0x000000000f114483: mov    %r10,0x1d8(%r15)
  0x000000000f11448a: movabs $0x0,%r10
  0x000000000f114494: mov    %r10,0x1e0(%r15)
  0x000000000f11449b: mov    0x38(%r15),%rcx
  0x000000000f11449f: movl   $0x0,0x100(%rcx)
  0x000000000f1144a9: leaveq 
  0x000000000f1144aa: cmpq   $0x0,0x8(%r15)
  0x000000000f1144b2: jne    0x000000000f1144b9
  0x000000000f1144b8: retq   
  0x000000000f1144b9: jmpq   Stub::forward exception  ;   {runtime_call}
  0x000000000f1144be: mov    %rsp,%r12
  0x000000000f1144c1: sub    $0x20,%rsp
  0x000000000f1144c5: and    $0xfffffffffffffff0,%rsp
  0x000000000f1144c9: callq  0x0000000002368d10  ;   {runtime_call}
  0x000000000f1144ce: mov    %r12,%rsp
  0x000000000f1144d1: xor    %r12,%r12
  0x000000000f1144d4: jmpq   0x000000000f114434
  0x000000000f1144d9: hlt    
  0x000000000f1144da: hlt    
  0x000000000f1144db: hlt    
  0x000000000f1144dc: hlt    
  0x000000000f1144dd: hlt    
  0x000000000f1144de: hlt    
  0x000000000f1144df: hlt    
<nmethod compile_id='15' compile_kind='c2n' level='0' entry='0x000000000f1142c0' size='912' address='0x000000000f114150' relocation_offset='288' consts_offset='912' insts_offset='368' method='java/lang/System arraycopy (Ljava/lang/Object;ILjava/lang/Object;II)V' bytes='0' count='6528' iicount='6528' stamp='0.280'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f113950:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;
  # this:     rdx:rdx   = &apos;java/lang/String&apos;
  # parm0:    r8:r8     = &apos;java/lang/String&apos;
  # parm1:    r9        = int
  #           [sp+0x40]  (sp of caller)
  0x000000000f113ac0: mov    0x8(%rdx),%r10d
  0x000000000f113ac4: cmp    %rax,%r10
  0x000000000f113ac7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f113acd: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f113ad8: data16 data16 xchg %ax,%ax
  0x000000000f113adc: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f113ae0: mov    %eax,-0x6000(%rsp)
  0x000000000f113ae7: push   %rbp
  0x000000000f113ae8: sub    $0x30,%rsp
  0x000000000f113aec: movabs $0x8533278,%rax    ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113af6: mov    0xdc(%rax),%esi
  0x000000000f113afc: add    $0x8,%esi
  0x000000000f113aff: mov    %esi,0xdc(%rax)
  0x000000000f113b05: movabs $0x82e4d78,%rax    ;   {metadata({method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113b0f: and    $0x1ff8,%esi
  0x000000000f113b15: cmp    $0x0,%esi
  0x000000000f113b18: je     0x000000000f113ccd  ;*aload_0
                                                ; - java.lang.String::startsWith@0 (line 1391)

  0x000000000f113b1e: mov    0xc(%rdx),%eax     ;*getfield value
                                                ; - java.lang.String::startsWith@1 (line 1391)

  0x000000000f113b21: mov    0xc(%r8),%esi      ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1393)
                                                ; implicit exception: dispatches to 0x000000000f113ce4
  0x000000000f113b25: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1395)
                                                ; implicit exception: dispatches to 0x000000000f113ce9
  0x000000000f113b28: cmp    $0x0,%r9d
  0x000000000f113b2c: movabs $0x8533278,%rbx    ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113b36: movabs $0x108,%rdx
  0x000000000f113b40: jl     0x000000000f113b50
  0x000000000f113b46: movabs $0x118,%rdx
  0x000000000f113b50: mov    (%rbx,%rdx,1),%rcx
  0x000000000f113b54: lea    0x1(%rcx),%rcx
  0x000000000f113b58: mov    %rcx,(%rbx,%rdx,1)
  0x000000000f113b5c: jl     0x000000000f113c9a  ;*iflt
                                                ; - java.lang.String::startsWith@25 (line 1397)

  0x000000000f113b62: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1397)
                                                ; implicit exception: dispatches to 0x000000000f113cee
  0x000000000f113b65: sub    %edi,%ebx
  0x000000000f113b67: cmp    %ebx,%r9d
  0x000000000f113b6a: movabs $0x8533278,%rbx    ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113b74: movabs $0x128,%rdx
  0x000000000f113b7e: jle    0x000000000f113b8e
  0x000000000f113b84: movabs $0x138,%rdx
  0x000000000f113b8e: mov    (%rbx,%rdx,1),%rcx
  0x000000000f113b92: lea    0x1(%rcx),%rcx
  0x000000000f113b96: mov    %rcx,(%rbx,%rdx,1)
  0x000000000f113b9a: jg     0x000000000f113c9a  ;*if_icmple
                                                ; - java.lang.String::startsWith@37 (line 1397)

  0x000000000f113ba0: mov    $0x0,%ebx
  0x000000000f113ba5: jmpq   0x000000000f113c5a  ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1400)

  0x000000000f113baa: nopw   0x0(%rax,%rax,1)
  0x000000000f113bb0: mov    %r9,%rdx
  0x000000000f113bb3: inc    %edx
  0x000000000f113bb5: movslq %r9d,%rcx
  0x000000000f113bb8: cmp    0xc(%rax),%r9d
  0x000000000f113bbc: jae    0x000000000f113cf3
  0x000000000f113bc2: movzwl 0x10(%rax,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1401)

  0x000000000f113bc7: mov    %rbx,%r8
  0x000000000f113bca: inc    %r8d
  0x000000000f113bcd: movslq %ebx,%r9
  0x000000000f113bd0: cmp    0xc(%rsi),%ebx
  0x000000000f113bd3: jae    0x000000000f113cfc
  0x000000000f113bd9: movzwl 0x10(%rsi,%r9,2),%ebx  ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1401)

  0x000000000f113bdf: movabs $0x8533278,%r9     ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113be9: mov    0xe0(%r9),%r11d
  0x000000000f113bf0: add    $0x8,%r11d
  0x000000000f113bf4: mov    %r11d,0xe0(%r9)
  0x000000000f113bfb: movabs $0x82e4d78,%r9     ;   {metadata({method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113c05: and    $0xfff8,%r11d
  0x000000000f113c0c: cmp    $0x0,%r11d
  0x000000000f113c10: je     0x000000000f113d05  ; OopMap{rsi=Oop rax=Oop off=342}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1401)

  0x000000000f113c16: test   %eax,-0xeef3b1c(%rip)        # 0x0000000000220100
                                                ;   {poll}
  0x000000000f113c1c: cmp    %ebx,%ecx
  0x000000000f113c1e: movabs $0x8533278,%rbx    ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113c28: movabs $0x168,%rcx
  0x000000000f113c32: je     0x000000000f113c42
  0x000000000f113c38: movabs $0x178,%rcx
  0x000000000f113c42: mov    (%rbx,%rcx,1),%r9
  0x000000000f113c46: lea    0x1(%r9),%r9
  0x000000000f113c4a: mov    %r9,(%rbx,%rcx,1)
  0x000000000f113c4e: jne    0x000000000f113cab  ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1401)

  0x000000000f113c54: mov    %r8,%rbx
  0x000000000f113c57: mov    %rdx,%r9           ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1400)

  0x000000000f113c5a: dec    %edi
  0x000000000f113c5c: cmp    $0x0,%edi
  0x000000000f113c5f: movabs $0x8533278,%rdx    ;   {metadata(method data for {method} {0x00000000082e4d80} &apos;startsWith&apos; &apos;(Ljava/lang/String;I)Z&apos; in &apos;java/lang/String&apos;)}
  0x000000000f113c69: movabs $0x148,%rcx
  0x000000000f113c73: jl     0x000000000f113c83
  0x000000000f113c79: movabs $0x158,%rcx
  0x000000000f113c83: mov    (%rdx,%rcx,1),%r8
  0x000000000f113c87: lea    0x1(%r8),%r8
  0x000000000f113c8b: mov    %r8,(%rdx,%rcx,1)
  0x000000000f113c8f: jl     0x000000000f113cbc
  0x000000000f113c95: jmpq   0x000000000f113bb0  ;*iflt
                                                ; - java.lang.String::startsWith@47 (line 1400)

  0x000000000f113c9a: mov    $0x0,%eax
  0x000000000f113c9f: add    $0x30,%rsp
  0x000000000f113ca3: pop    %rbp
  0x000000000f113ca4: test   %eax,-0xeef3baa(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f113caa: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@41 (line 1398)

  0x000000000f113cab: mov    $0x0,%eax
  0x000000000f113cb0: add    $0x30,%rsp
  0x000000000f113cb4: pop    %rbp
  0x000000000f113cb5: test   %eax,-0xeef3bbb(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f113cbb: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@69 (line 1402)

  0x000000000f113cbc: mov    $0x1,%eax
  0x000000000f113cc1: add    $0x30,%rsp
  0x000000000f113cc5: pop    %rbp
  0x000000000f113cc6: test   %eax,-0xeef3bcc(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f113ccc: retq   
  0x000000000f113ccd: mov    %rax,0x8(%rsp)
  0x000000000f113cd2: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f113cda: callq  0x000000000f111820  ; OopMap{rdx=Oop r8=Oop off=543}
                                                ;*synchronization entry
                                                ; - java.lang.String::startsWith@-1 (line 1391)
                                                ;   {runtime_call}
  0x000000000f113cdf: jmpq   0x000000000f113b1e
  0x000000000f113ce4: callq  0x000000000f10cf80  ; OopMap{rax=Oop off=553}
                                                ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1393)
                                                ;   {runtime_call}
  0x000000000f113ce9: callq  0x000000000f10cf80  ; OopMap{rax=Oop rsi=Oop off=558}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1395)
                                                ;   {runtime_call}
  0x000000000f113cee: callq  0x000000000f10cf80  ; OopMap{rsi=Oop rax=Oop off=563}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1397)
                                                ;   {runtime_call}
  0x000000000f113cf3: mov    %r9,(%rsp)
  0x000000000f113cf7: callq  0x000000000f10c8c0  ; OopMap{rsi=Oop rax=Oop off=572}
                                                ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1401)
                                                ;   {runtime_call}
  0x000000000f113cfc: mov    %rbx,(%rsp)
  0x000000000f113d00: callq  0x000000000f10c8c0  ; OopMap{rsi=Oop rax=Oop off=581}
                                                ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1401)
                                                ;   {runtime_call}
  0x000000000f113d05: mov    %r9,0x8(%rsp)
  0x000000000f113d0a: movq   $0x41,(%rsp)
  0x000000000f113d12: callq  0x000000000f111820  ; OopMap{rsi=Oop rax=Oop off=599}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1401)
                                                ;   {runtime_call}
  0x000000000f113d17: jmpq   0x000000000f113c16
  0x000000000f113d1c: nop
  0x000000000f113d1d: nop
  0x000000000f113d1e: mov    0x2a8(%r15),%rax
  0x000000000f113d25: movabs $0x0,%r10
  0x000000000f113d2f: mov    %r10,0x2a8(%r15)
  0x000000000f113d36: movabs $0x0,%r10
  0x000000000f113d40: mov    %r10,0x2b0(%r15)
  0x000000000f113d47: add    $0x30,%rsp
  0x000000000f113d4b: pop    %rbp
  0x000000000f113d4c: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f113d51: hlt    
  0x000000000f113d52: hlt    
  0x000000000f113d53: hlt    
  0x000000000f113d54: hlt    
  0x000000000f113d55: hlt    
  0x000000000f113d56: hlt    
  0x000000000f113d57: hlt    
  0x000000000f113d58: hlt    
  0x000000000f113d59: hlt    
  0x000000000f113d5a: hlt    
  0x000000000f113d5b: hlt    
  0x000000000f113d5c: hlt    
  0x000000000f113d5d: hlt    
  0x000000000f113d5e: hlt    
  0x000000000f113d5f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f113d60: callq  0x000000000f10efa0  ;   {no_reloc}
  0x000000000f113d65: mov    %rsp,-0x28(%rsp)
  0x000000000f113d6a: sub    $0x80,%rsp
  0x000000000f113d71: mov    %rax,0x78(%rsp)
  0x000000000f113d76: mov    %rcx,0x70(%rsp)
  0x000000000f113d7b: mov    %rdx,0x68(%rsp)
  0x000000000f113d80: mov    %rbx,0x60(%rsp)
  0x000000000f113d85: mov    %rbp,0x50(%rsp)
  0x000000000f113d8a: mov    %rsi,0x48(%rsp)
  0x000000000f113d8f: mov    %rdi,0x40(%rsp)
  0x000000000f113d94: mov    %r8,0x38(%rsp)
  0x000000000f113d99: mov    %r9,0x30(%rsp)
  0x000000000f113d9e: mov    %r10,0x28(%rsp)
  0x000000000f113da3: mov    %r11,0x20(%rsp)
  0x000000000f113da8: mov    %r12,0x18(%rsp)
  0x000000000f113dad: mov    %r13,0x10(%rsp)
  0x000000000f113db2: mov    %r14,0x8(%rsp)
  0x000000000f113db7: mov    %r15,(%rsp)
  0x000000000f113dbb: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f113dc5: movabs $0xf113d65,%rdx    ;   {internal_word}
  0x000000000f113dcf: mov    %rsp,%r8
  0x000000000f113dd2: and    $0xfffffffffffffff0,%rsp
  0x000000000f113dd6: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f113ddb: hlt    
[Deopt Handler Code]
  0x000000000f113ddc: movabs $0xf113ddc,%r10    ;   {section_word}
  0x000000000f113de6: push   %r10
  0x000000000f113de8: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f113ded: hlt    
  0x000000000f113dee: hlt    
  0x000000000f113def: hlt    
<nmethod compile_id='9' compiler='C1' level='3' entry='0x000000000f113ac0' size='1824' address='0x000000000f113950' relocation_offset='288' insts_offset='368' stub_offset='1040' scopes_data_offset='1192' scopes_pcs_offset='1384' dependencies_offset='1784' nul_chk_table_offset='1792' method='java/lang/String startsWith (Ljava/lang/String;I)Z' bytes='72' count='975' backedge_count='1330' iicount='975' stamp='0.286'/>
Decoding compiled method 0x000000000f1169d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;
  #           [sp+0x50]  (sp of caller)
  0x000000000f116b60: mov    0x8(%rdx),%r10d
  0x000000000f116b64: cmp    %rax,%r10
  0x000000000f116b67: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f116b6d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f116b78: data16 data16 xchg %ax,%ax
  0x000000000f116b7c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f116b80: mov    %eax,-0x6000(%rsp)
  0x000000000f116b87: push   %rbp
  0x000000000f116b88: sub    $0x40,%rsp
  0x000000000f116b8c: movabs $0x8588b68,%rax    ;   {metadata(method data for {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116b96: mov    0xdc(%rax),%r8d
  0x000000000f116b9d: add    $0x8,%r8d
  0x000000000f116ba1: mov    %r8d,0xdc(%rax)
  0x000000000f116ba8: movabs $0x84d73f8,%rax    ;   {metadata({method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116bb2: and    $0x1ff8,%r8d
  0x000000000f116bb9: cmp    $0x0,%r8d
  0x000000000f116bbd: je     0x000000000f116ce6  ;*aload_0
                                                ; - java.util.zip.ZipFile::ensureOpen@0 (line 669)

  0x000000000f116bc3: movsbl 0x19(%rdx),%eax    ;*getfield closeRequested
                                                ; - java.util.zip.ZipFile::ensureOpen@1 (line 669)

  0x000000000f116bc7: cmp    $0x0,%eax
  0x000000000f116bca: movabs $0x8588b68,%rax    ;   {metadata(method data for {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116bd4: movabs $0x108,%r8
  0x000000000f116bde: je     0x000000000f116bee
  0x000000000f116be4: movabs $0x118,%r8
  0x000000000f116bee: mov    (%rax,%r8,1),%rsi
  0x000000000f116bf2: lea    0x1(%rsi),%rsi
  0x000000000f116bf6: mov    %rsi,(%rax,%r8,1)
  0x000000000f116bfa: jne    0x000000000f116c9e  ;*ifeq
                                                ; - java.util.zip.ZipFile::ensureOpen@4 (line 669)

  0x000000000f116c00: mov    0x10(%rdx),%rax    ;*getfield jzfile
                                                ; - java.util.zip.ZipFile::ensureOpen@18 (line 673)

  0x000000000f116c04: movabs $0x0,%rdx
  0x000000000f116c0e: cmp    %rdx,%rax
  0x000000000f116c11: movabs $0x8588b68,%rdx    ;   {metadata(method data for {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116c1b: movabs $0x138,%rax
  0x000000000f116c25: jne    0x000000000f116c35
  0x000000000f116c2b: movabs $0x148,%rax
  0x000000000f116c35: mov    (%rdx,%rax,1),%r8
  0x000000000f116c39: lea    0x1(%r8),%r8
  0x000000000f116c3d: mov    %r8,(%rdx,%rax,1)
  0x000000000f116c41: je     0x000000000f116c53  ;*lcmp
                                                ; - java.util.zip.ZipFile::ensureOpen@22 (line 673)

  0x000000000f116c47: add    $0x40,%rsp
  0x000000000f116c4b: pop    %rbp
  0x000000000f116c4c: test   %eax,-0xeef6b52(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f116c52: retq                      ;*return
                                                ; - java.util.zip.ZipFile::ensureOpen@36 (line 676)

  0x000000000f116c53: nopl   0x0(%rax,%rax,1)
  0x000000000f116c58: jmpq   0x000000000f116d0c  ;   {no_reloc}
  0x000000000f116c5d: add    %al,(%rax)
  0x000000000f116c5f: add    %al,(%rax)
  0x000000000f116c61: add    %ch,%cl
  0x000000000f116c63: scas   %es:(%rdi),%eax
  0x000000000f116c64: add    %al,(%rax)
  0x000000000f116c66: add    %cl,-0x40(%rbx,%rcx,4)  ;*new
                                                ; - java.util.zip.ZipFile::ensureOpen@26 (line 674)

  0x000000000f116c6a: movabs $0x8588b68,%rdx    ;   {metadata(method data for {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116c74: addq   $0x1,0x158(%rdx)
  0x000000000f116c7c: movabs $0xd60e69d0,%r8    ;   {oop(&quot;The object is not initialized.&quot;)}
  0x000000000f116c86: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - java.util.zip.ZipFile::ensureOpen@32 (line 674)

  0x000000000f116c89: mov    %rax,0x28(%rsp)
  0x000000000f116c8e: nop
  0x000000000f116c8f: callq  0x000000000f0561a0  ; OopMap{[40]=Oop off=308}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.util.zip.ZipFile::ensureOpen@32 (line 674)
                                                ;   {optimized virtual_call}
  0x000000000f116c94: mov    0x28(%rsp),%rax
  0x000000000f116c99: jmpq   0x000000000f116d74  ;*athrow
                                                ; - java.util.zip.ZipFile::ensureOpen@35 (line 674)

  0x000000000f116c9e: xchg   %ax,%ax
  0x000000000f116ca0: jmpq   0x000000000f116d32  ;   {no_reloc}
  0x000000000f116ca5: add    %al,(%rax)
  0x000000000f116ca7: add    %al,(%rax)
  0x000000000f116ca9: add    %ch,%cl
  0x000000000f116cab: lea    (%rax),%eax
  0x000000000f116cad: add    %al,(%rax)         ;*new  ; - java.util.zip.ZipFile::ensureOpen@7 (line 670)

  0x000000000f116caf: mov    %rax,%r8
  0x000000000f116cb2: movabs $0x8588b68,%rdx    ;   {metadata(method data for {method} {0x00000000084d7400} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/util/zip/ZipFile&apos;)}
  0x000000000f116cbc: addq   $0x1,0x128(%rdx)
  0x000000000f116cc4: movabs $0xd60e6988,%r8    ;   {oop(&quot;zip file closed&quot;)}
  0x000000000f116cce: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - java.util.zip.ZipFile::ensureOpen@13 (line 670)

  0x000000000f116cd1: mov    %rax,0x30(%rsp)
  0x000000000f116cd6: nop
  0x000000000f116cd7: callq  0x000000000f0561a0  ; OopMap{[48]=Oop off=380}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.util.zip.ZipFile::ensureOpen@13 (line 670)
                                                ;   {optimized virtual_call}
  0x000000000f116cdc: mov    0x30(%rsp),%rax
  0x000000000f116ce1: jmpq   0x000000000f116d74
  0x000000000f116ce6: mov    %rax,0x8(%rsp)
  0x000000000f116ceb: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f116cf3: callq  0x000000000f111820  ; OopMap{rdx=Oop off=408}
                                                ;*synchronization entry
                                                ; - java.util.zip.ZipFile::ensureOpen@-1 (line 669)
                                                ;   {runtime_call}
  0x000000000f116cf8: jmpq   0x000000000f116bc3
  0x000000000f116cfd: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f116d07: mov    $0xa050f00,%eax
  0x000000000f116d0c: callq  0x000000000f110760  ; OopMap{off=433}
                                                ;*new  ; - java.util.zip.ZipFile::ensureOpen@26 (line 674)
                                                ;   {runtime_call}
  0x000000000f116d11: jmpq   0x000000000f116c58
  0x000000000f116d16: mov    %rdx,%rdx
  0x000000000f116d19: callq  0x000000000f10d420  ; OopMap{off=446}
                                                ;*new  ; - java.util.zip.ZipFile::ensureOpen@26 (line 674)
                                                ;   {runtime_call}
  0x000000000f116d1e: jmpq   0x000000000f116c67
  0x000000000f116d23: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f116d2d: mov    $0xa050f00,%eax
  0x000000000f116d32: callq  0x000000000f110760  ; OopMap{off=471}
                                                ;*new  ; - java.util.zip.ZipFile::ensureOpen@7 (line 670)
                                                ;   {runtime_call}
  0x000000000f116d37: jmpq   0x000000000f116ca0
  0x000000000f116d3c: mov    %rdx,%rdx
  0x000000000f116d3f: callq  0x000000000f10d420  ; OopMap{off=484}
                                                ;*new  ; - java.util.zip.ZipFile::ensureOpen@7 (line 670)
                                                ;   {runtime_call}
  0x000000000f116d44: jmpq   0x000000000f116caf
  0x000000000f116d49: nop
  0x000000000f116d4a: nop
  0x000000000f116d4b: mov    0x2a8(%r15),%rax
  0x000000000f116d52: movabs $0x0,%r10
  0x000000000f116d5c: mov    %r10,0x2a8(%r15)
  0x000000000f116d63: movabs $0x0,%r10
  0x000000000f116d6d: mov    %r10,0x2b0(%r15)
  0x000000000f116d74: add    $0x40,%rsp
  0x000000000f116d78: pop    %rbp
  0x000000000f116d79: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f116d7e: hlt    
  0x000000000f116d7f: hlt    
[Stub Code]
  0x000000000f116d80: nop                       ;   {no_reloc}
  0x000000000f116d81: nop
  0x000000000f116d82: nop
  0x000000000f116d83: nop
  0x000000000f116d84: nop
  0x000000000f116d85: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f116d8f: jmpq   0x000000000f116d8f  ;   {runtime_call}
  0x000000000f116d94: nop
  0x000000000f116d95: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f116d9f: jmpq   0x000000000f116d9f  ;   {runtime_call}
[Exception Handler]
  0x000000000f116da4: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f116da9: mov    %rsp,-0x28(%rsp)
  0x000000000f116dae: sub    $0x80,%rsp
  0x000000000f116db5: mov    %rax,0x78(%rsp)
  0x000000000f116dba: mov    %rcx,0x70(%rsp)
  0x000000000f116dbf: mov    %rdx,0x68(%rsp)
  0x000000000f116dc4: mov    %rbx,0x60(%rsp)
  0x000000000f116dc9: mov    %rbp,0x50(%rsp)
  0x000000000f116dce: mov    %rsi,0x48(%rsp)
  0x000000000f116dd3: mov    %rdi,0x40(%rsp)
  0x000000000f116dd8: mov    %r8,0x38(%rsp)
  0x000000000f116ddd: mov    %r9,0x30(%rsp)
  0x000000000f116de2: mov    %r10,0x28(%rsp)
  0x000000000f116de7: mov    %r11,0x20(%rsp)
  0x000000000f116dec: mov    %r12,0x18(%rsp)
  0x000000000f116df1: mov    %r13,0x10(%rsp)
  0x000000000f116df6: mov    %r14,0x8(%rsp)
  0x000000000f116dfb: mov    %r15,(%rsp)
  0x000000000f116dff: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f116e09: movabs $0xf116da9,%rdx    ;   {internal_word}
  0x000000000f116e13: mov    %rsp,%r8
  0x000000000f116e16: and    $0xfffffffffffffff0,%rsp
  0x000000000f116e1a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f116e1f: hlt    
[Deopt Handler Code]
  0x000000000f116e20: movabs $0xf116e20,%r10    ;   {section_word}
  0x000000000f116e2a: push   %r10
  0x000000000f116e2c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f116e31: hlt    
  0x000000000f116e32: hlt    
  0x000000000f116e33: hlt    
  0x000000000f116e34: hlt    
  0x000000000f116e35: hlt    
  0x000000000f116e36: hlt    
  0x000000000f116e37: hlt    
<nmethod compile_id='10' compiler='C1' level='3' entry='0x000000000f116b60' size='1576' address='0x000000000f1169d0' relocation_offset='288' insts_offset='400' stub_offset='944' scopes_data_offset='1136' scopes_pcs_offset='1248' dependencies_offset='1568' method='java/util/zip/ZipFile ensureOpen ()V' bytes='37' count='391' iicount='391' stamp='0.292'/>
<writer thread='6336'/>
<task_queued compile_id='16' method='java/lang/String indexOf (II)I' bytes='70' count='1058' backedge_count='64512' iicount='1058' level='3' stamp='0.292' comment='tiered' hot_count='1058'/>
<task_queued compile_id='17' method='java/util/HashMap put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' bytes='13' count='512' iicount='512' level='3' stamp='0.293' comment='tiered' hot_count='512'/>
<task_queued compile_id='18' method='java/util/HashMap putVal (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;' bytes='300' count='512' backedge_count='69' iicount='512' level='3' stamp='0.293' comment='tiered' hot_count='512'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f116390:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e5108} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;
  # this:     rdx:rdx   = &apos;java/lang/String&apos;
  # parm0:    r8        = int
  # parm1:    r9        = int
  #           [sp+0x40]  (sp of caller)
  0x000000000f116500: mov    0x8(%rdx),%r10d
  0x000000000f116504: cmp    %rax,%r10
  0x000000000f116507: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11650d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f116518: data16 data16 xchg %ax,%ax
  0x000000000f11651c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f116520: mov    %eax,-0x6000(%rsp)
  0x000000000f116527: push   %rbp
  0x000000000f116528: sub    $0x30,%rsp
  0x000000000f11652c: movabs $0x8460218,%rax
  0x000000000f116536: mov    0x8(%rax),%esi
  0x000000000f116539: add    $0x8,%esi
  0x000000000f11653c: mov    %esi,0x8(%rax)
  0x000000000f11653f: movabs $0x82e5100,%rax    ;   {metadata({method} {0x00000000082e5108} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x000000000f116549: and    $0x3ff8,%esi
  0x000000000f11654f: cmp    $0x0,%esi
  0x000000000f116552: je     0x000000000f116631  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1534)

  0x000000000f116558: mov    0xc(%rdx),%eax     ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1534)

  0x000000000f11655b: mov    0xc(%rax),%esi     ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1534)
                                                ; implicit exception: dispatches to 0x000000000f116648
  0x000000000f11655e: cmp    $0x0,%r9d
  0x000000000f116562: jge    0x000000000f116573  ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1535)

  0x000000000f116568: mov    $0x0,%r9d
  0x000000000f11656e: jmpq   0x000000000f11657c  ;*goto
                                                ; - java.lang.String::indexOf@12 (line 1536)

  0x000000000f116573: cmp    %esi,%r9d
  0x000000000f116576: jge    0x000000000f116620  ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1537)

  0x000000000f11657c: cmp    $0x10000,%r8d
  0x000000000f116583: jge    0x000000000f11660b
  0x000000000f116589: jmpq   0x000000000f1165e0  ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1542)

  0x000000000f11658e: xchg   %ax,%ax
  0x000000000f116590: movslq %r9d,%rdx
  0x000000000f116593: cmp    0xc(%rax),%r9d
  0x000000000f116597: jae    0x000000000f11664d
  0x000000000f11659d: movzwl 0x10(%rax,%rdx,2),%edx  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1547)

  0x000000000f1165a2: cmp    %r8d,%edx
  0x000000000f1165a5: je     0x000000000f1165eb  ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1547)

  0x000000000f1165ab: inc    %r9d
  0x000000000f1165ae: movabs $0x8460218,%rdx
  0x000000000f1165b8: mov    0xc(%rdx),%edi
  0x000000000f1165bb: add    $0x8,%edi
  0x000000000f1165be: mov    %edi,0xc(%rdx)
  0x000000000f1165c1: movabs $0x82e5100,%rdx    ;   {metadata({method} {0x00000000082e5108} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x000000000f1165cb: and    $0x1fff8,%edi
  0x000000000f1165d1: cmp    $0x0,%edi
  0x000000000f1165d4: je     0x000000000f116656  ; OopMap{rax=Oop off=218}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1546)

  0x000000000f1165da: test   %eax,-0xeef64e0(%rip)        # 0x0000000000220100
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1546)
                                                ;   {poll}
  0x000000000f1165e0: cmp    %esi,%r9d
  0x000000000f1165e3: jge    0x000000000f1165fa
  0x000000000f1165e9: jmp    0x000000000f116590  ;*if_icmpge
                                                ; - java.lang.String::indexOf@40 (line 1546)

  0x000000000f1165eb: mov    %r9,%rax
  0x000000000f1165ee: add    $0x30,%rsp
  0x000000000f1165f2: pop    %rbp
  0x000000000f1165f3: test   %eax,-0xeef64f9(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f1165f9: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@54 (line 1548)

  0x000000000f1165fa: mov    $0xffffffff,%eax
  0x000000000f1165ff: add    $0x30,%rsp
  0x000000000f116603: pop    %rbp
  0x000000000f116604: test   %eax,-0xeef650a(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f11660a: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@62 (line 1551)

  0x000000000f11660b: nop
  0x000000000f11660c: nop
  0x000000000f11660d: nop
  0x000000000f11660e: nop
  0x000000000f11660f: callq  0x000000000f0561a0  ; OopMap{off=276}
                                                ;*invokespecial indexOfSupplementary
                                                ; - java.lang.String::indexOf@66 (line 1553)
                                                ;   {optimized virtual_call}
  0x000000000f116614: add    $0x30,%rsp
  0x000000000f116618: pop    %rbp
  0x000000000f116619: test   %eax,-0xeef651f(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f11661f: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@69 (line 1553)

  0x000000000f116620: mov    $0xffffffff,%eax
  0x000000000f116625: add    $0x30,%rsp
  0x000000000f116629: pop    %rbp
  0x000000000f11662a: test   %eax,-0xeef6530(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f116630: retq   
  0x000000000f116631: mov    %rax,0x8(%rsp)
  0x000000000f116636: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f11663e: callq  0x000000000f111820  ; OopMap{rdx=Oop off=323}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1534)
                                                ;   {runtime_call}
  0x000000000f116643: jmpq   0x000000000f116558
  0x000000000f116648: callq  0x000000000f10cf80  ; OopMap{rdx=Oop rax=Oop off=333}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1534)
                                                ;   {runtime_call}
  0x000000000f11664d: mov    %r9,(%rsp)
  0x000000000f116651: callq  0x000000000f10c8c0  ; OopMap{rax=Oop off=342}
                                                ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1547)
                                                ;   {runtime_call}
  0x000000000f116656: mov    %rdx,0x8(%rsp)
  0x000000000f11665b: movq   $0x3a,(%rsp)
  0x000000000f116663: callq  0x000000000f111820  ; OopMap{rax=Oop off=360}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1546)
                                                ;   {runtime_call}
  0x000000000f116668: jmpq   0x000000000f1165da
  0x000000000f11666d: nop
  0x000000000f11666e: nop
  0x000000000f11666f: mov    0x2a8(%r15),%rax
  0x000000000f116676: movabs $0x0,%r10
  0x000000000f116680: mov    %r10,0x2a8(%r15)
  0x000000000f116687: movabs $0x0,%r10
  0x000000000f116691: mov    %r10,0x2b0(%r15)
  0x000000000f116698: add    $0x30,%rsp
  0x000000000f11669c: pop    %rbp
  0x000000000f11669d: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1166a2: hlt    
  0x000000000f1166a3: hlt    
  0x000000000f1166a4: hlt    
  0x000000000f1166a5: hlt    
  0x000000000f1166a6: hlt    
  0x000000000f1166a7: hlt    
  0x000000000f1166a8: hlt    
  0x000000000f1166a9: hlt    
  0x000000000f1166aa: hlt    
  0x000000000f1166ab: hlt    
  0x000000000f1166ac: hlt    
  0x000000000f1166ad: hlt    
  0x000000000f1166ae: hlt    
  0x000000000f1166af: hlt    
  0x000000000f1166b0: hlt    
  0x000000000f1166b1: hlt    
  0x000000000f1166b2: hlt    
  0x000000000f1166b3: hlt    
  0x000000000f1166b4: hlt    
  0x000000000f1166b5: hlt    
  0x000000000f1166b6: hlt    
  0x000000000f1166b7: hlt    
  0x000000000f1166b8: hlt    
  0x000000000f1166b9: hlt    
  0x000000000f1166ba: hlt    
  0x000000000f1166bb: hlt    
  0x000000000f1166bc: hlt    
  0x000000000f1166bd: hlt    
  0x000000000f1166be: hlt    
  0x000000000f1166bf: hlt    
[Stub Code]
  0x000000000f1166c0: nop                       ;   {no_reloc}
  0x000000000f1166c1: nop
  0x000000000f1166c2: nop
  0x000000000f1166c3: nop
  0x000000000f1166c4: nop
  0x000000000f1166c5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1166cf: jmpq   0x000000000f1166cf  ;   {runtime_call}
[Exception Handler]
  0x000000000f1166d4: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f1166d9: mov    %rsp,-0x28(%rsp)
  0x000000000f1166de: sub    $0x80,%rsp
  0x000000000f1166e5: mov    %rax,0x78(%rsp)
  0x000000000f1166ea: mov    %rcx,0x70(%rsp)
  0x000000000f1166ef: mov    %rdx,0x68(%rsp)
  0x000000000f1166f4: mov    %rbx,0x60(%rsp)
  0x000000000f1166f9: mov    %rbp,0x50(%rsp)
  0x000000000f1166fe: mov    %rsi,0x48(%rsp)
  0x000000000f116703: mov    %rdi,0x40(%rsp)
  0x000000000f116708: mov    %r8,0x38(%rsp)
  0x000000000f11670d: mov    %r9,0x30(%rsp)
  0x000000000f116712: mov    %r10,0x28(%rsp)
  0x000000000f116717: mov    %r11,0x20(%rsp)
  0x000000000f11671c: mov    %r12,0x18(%rsp)
  0x000000000f116721: mov    %r13,0x10(%rsp)
  0x000000000f116726: mov    %r14,0x8(%rsp)
  0x000000000f11672b: mov    %r15,(%rsp)
  0x000000000f11672f: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f116739: movabs $0xf1166d9,%rdx    ;   {internal_word}
  0x000000000f116743: mov    %rsp,%r8
  0x000000000f116746: and    $0xfffffffffffffff0,%rsp
  0x000000000f11674a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f11674f: hlt    
[Deopt Handler Code]
  0x000000000f116750: movabs $0xf116750,%r10    ;   {section_word}
  0x000000000f11675a: push   %r10
  0x000000000f11675c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f116761: hlt    
  0x000000000f116762: hlt    
  0x000000000f116763: hlt    
  0x000000000f116764: hlt    
  0x000000000f116765: hlt    
  0x000000000f116766: hlt    
  0x000000000f116767: hlt    
<nmethod compile_id='16' compiler='C1' level='2' entry='0x000000000f116500' size='1528' address='0x000000000f116390' relocation_offset='288' insts_offset='368' stub_offset='816' scopes_data_offset='992' scopes_pcs_offset='1152' dependencies_offset='1504' nul_chk_table_offset='1512' method='java/lang/String indexOf (II)I' bytes='70' count='1060' backedge_count='64701' iicount='1060' stamp='0.299'/>
<writer thread='6336'/>
<task_queued compile_id='19' method='java/io/WinNTFileSystem isSlash (C)Z' bytes='18' count='20992' iicount='20992' stamp='0.299' comment='tiered' hot_count='20992'/>
<task_queued compile_id='20' method='java/lang/StringBuffer append (C)Ljava/lang/StringBuffer;' bytes='13' count='19456' iicount='19456' stamp='0.299' comment='tiered' hot_count='19456'/>
<task_queued compile_id='21' method='java/lang/AbstractStringBuilder append (C)Ljava/lang/AbstractStringBuilder;' bytes='29' count='22272' iicount='22272' stamp='0.299' comment='tiered' hot_count='22272'/>
<task_queued compile_id='22' method='java/lang/AbstractStringBuilder append (Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;' bytes='50' count='1280' iicount='1280' level='3' stamp='0.299' comment='tiered' hot_count='1280'/>
<writer thread='15144'/>
Decoding compiled method 0x000000000f115fd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e3d40} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;
  # this:     rdx:rdx   = &apos;java/lang/String&apos;
  # parm0:    r8        = int
  #           [sp+0x30]  (sp of caller)
  0x000000000f116120: mov    0x8(%rdx),%r10d
  0x000000000f116124: cmp    %r10,%rax
  0x000000000f116127: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11612d: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f116130: mov    %eax,-0x6000(%rsp)
  0x000000000f116137: push   %rbp
  0x000000000f116138: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 645)

  0x000000000f11613c: test   %r8d,%r8d
  0x000000000f11613f: jl     0x000000000f116179  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 645)

  0x000000000f116141: mov    0xc(%rdx),%r10d    ;*getfield value
                                                ; - java.lang.String::charAt@6 (line 645)

  0x000000000f116145: mov    0xc(%r10),%ebp     ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 645)
                                                ; implicit exception: dispatches to 0x000000000f1161a1
  0x000000000f116149: cmp    %ebp,%r8d
  0x000000000f11614c: jge    0x000000000f11618d  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 645)

  0x000000000f11614e: cmp    %ebp,%r8d
  0x000000000f116151: jae    0x000000000f116165
  0x000000000f116153: movzwl 0x10(%r10,%r8,2),%eax
  0x000000000f116159: add    $0x20,%rsp
  0x000000000f11615d: pop    %rbp
  0x000000000f11615e: test   %eax,-0xeef6164(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f116164: retq   
  0x000000000f116165: mov    $0xffffffe4,%edx
  0x000000000f11616a: mov    %r8d,%ebp
  0x000000000f11616d: mov    %r10d,(%rsp)
  0x000000000f116171: xchg   %ax,%ax
  0x000000000f116173: callq  0x000000000f0557a0  ; OopMap{[0]=NarrowOop off=88}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 648)
                                                ;   {runtime_call}
  0x000000000f116178: int3                      ;*caload
                                                ; - java.lang.String::charAt@27 (line 648)

  0x000000000f116179: mov    %rdx,%rbp
  0x000000000f11617c: mov    %r8d,0x4(%rsp)
  0x000000000f116181: mov    $0xffffff65,%edx
  0x000000000f116186: nop
  0x000000000f116187: callq  0x000000000f0557a0  ; OopMap{rbp=Oop off=108}
                                                ;*iflt
                                                ; - java.lang.String::charAt@1 (line 645)
                                                ;   {runtime_call}
  0x000000000f11618c: int3                      ;*iflt
                                                ; - java.lang.String::charAt@1 (line 645)

  0x000000000f11618d: mov    %rdx,(%rsp)
  0x000000000f116191: mov    %r8d,0xc(%rsp)
  0x000000000f116196: mov    $0xffffff65,%edx
  0x000000000f11619b: callq  0x000000000f0557a0  ; OopMap{[0]=Oop off=128}
                                                ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 645)
                                                ;   {runtime_call}
  0x000000000f1161a0: int3                      ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 645)

  0x000000000f1161a1: mov    $0xfffffff6,%edx
  0x000000000f1161a6: nop
  0x000000000f1161a7: callq  0x000000000f0557a0  ; OopMap{off=140}
                                                ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 645)
                                                ;   {runtime_call}
  0x000000000f1161ac: int3                      ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 645)

  0x000000000f1161ad: hlt    
  0x000000000f1161ae: hlt    
  0x000000000f1161af: hlt    
  0x000000000f1161b0: hlt    
  0x000000000f1161b1: hlt    
  0x000000000f1161b2: hlt    
  0x000000000f1161b3: hlt    
  0x000000000f1161b4: hlt    
  0x000000000f1161b5: hlt    
  0x000000000f1161b6: hlt    
  0x000000000f1161b7: hlt    
  0x000000000f1161b8: hlt    
  0x000000000f1161b9: hlt    
  0x000000000f1161ba: hlt    
  0x000000000f1161bb: hlt    
  0x000000000f1161bc: hlt    
  0x000000000f1161bd: hlt    
  0x000000000f1161be: hlt    
  0x000000000f1161bf: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f1161c0: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f1161c5: callq  0x000000000f1161ca
  0x000000000f1161ca: subq   $0x5,(%rsp)
  0x000000000f1161cf: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f1161d4: hlt    
  0x000000000f1161d5: hlt    
  0x000000000f1161d6: hlt    
  0x000000000f1161d7: hlt    
<nmethod compile_id='4' compiler='C2' level='4' entry='0x000000000f116120' size='896' address='0x000000000f115fd0' relocation_offset='288' insts_offset='336' stub_offset='496' scopes_data_offset='528' scopes_pcs_offset='632' dependencies_offset='872' nul_chk_table_offset='880' method='java/lang/String charAt (I)C' bytes='29' count='133912' iicount='133912' stamp='0.303'/>
<writer thread='12324'/>
Decoding compiled method 0x000000000f1201d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e4f88} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;
  #           [sp+0x30]  (sp of caller)
  0x000000000f120300: mov    0x8(%rdx),%r10d
  0x000000000f120304: cmp    %r10,%rax
  0x000000000f120307: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f12030d: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f120310: mov    %eax,-0x6000(%rsp)
  0x000000000f120317: push   %rbp
  0x000000000f120318: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1454)

  0x000000000f12031c: mov    %rdx,%rbx
  0x000000000f12031f: mov    0x10(%rdx),%eax    ;*getfield hash
                                                ; - java.lang.String::hashCode@1 (line 1454)

  0x000000000f120322: test   %eax,%eax
  0x000000000f120324: jne    0x000000000f1203f4  ;*ifne
                                                ; - java.lang.String::hashCode@6 (line 1455)

  0x000000000f12032a: mov    0xc(%rdx),%r10d    ;*getfield value
                                                ; - java.lang.String::hashCode@10 (line 1455)

  0x000000000f12032e: mov    0xc(%r10),%edi     ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1455)
                                                ; implicit exception: dispatches to 0x000000000f120419
  0x000000000f120332: test   %edi,%edi
  0x000000000f120334: jle    0x000000000f120400  ;*ifle
                                                ; - java.lang.String::hashCode@14 (line 1455)

  0x000000000f12033a: test   %edi,%edi
  0x000000000f12033c: jbe    0x000000000f120404
  0x000000000f120342: mov    %edi,%ecx
  0x000000000f120344: dec    %ecx
  0x000000000f120346: cmp    %edi,%ecx
  0x000000000f120348: jae    0x000000000f120404  ;*bipush
                                                ; - java.lang.String::hashCode@33 (line 1459)

  0x000000000f12034e: movzwl 0x10(%r10),%esi    ;*caload
                                                ; - java.lang.String::hashCode@39 (line 1459)

  0x000000000f120353: mov    %edi,%r8d
  0x000000000f120356: add    $0xfffffffd,%r8d
  0x000000000f12035a: mov    %esi,%eax
  0x000000000f12035c: shl    $0x5,%eax
  0x000000000f12035f: mov    $0x1,%r11d
  0x000000000f120365: mov    $0x80000000,%r9d
  0x000000000f12036b: cmp    %r8d,%ecx
  0x000000000f12036e: cmovl  %r9d,%r8d
  0x000000000f120372: cmp    $0x1,%r8d
  0x000000000f120376: jle    0x000000000f1203ea
  0x000000000f120378: sub    %esi,%eax          ;*imul
                                                ; - java.lang.String::hashCode@36 (line 1459)

  0x000000000f12037a: jmp    0x000000000f1203a2  ;*bipush
                                                ; - java.lang.String::hashCode@33 (line 1459)

  0x000000000f12037c: movzwl 0x10(%r10,%r11,2),%r8d
  0x000000000f120382: sub    %esi,%eax
  0x000000000f120384: add    %r8d,%eax          ;*iadd
                                                ; - java.lang.String::hashCode@40 (line 1459)

  0x000000000f120387: inc    %r11d              ;*iinc
                                                ; - java.lang.String::hashCode@42 (line 1458)

  0x000000000f12038a: cmp    %edi,%r11d
  0x000000000f12038d: jge    0x000000000f1203f1  ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1458)

  0x000000000f12038f: mov    %eax,%r8d
  0x000000000f120392: shl    $0x5,%r8d
  0x000000000f120396: mov    %eax,%esi
  0x000000000f120398: mov    %r8d,%eax
  0x000000000f12039b: jmp    0x000000000f12037c
  0x000000000f12039d: data16 xchg %ax,%ax
  0x000000000f1203a0: sub    %esi,%eax          ;*imul
                                                ; - java.lang.String::hashCode@36 (line 1459)

  0x000000000f1203a2: movzwl 0x10(%r10,%r11,2),%r9d
  0x000000000f1203a8: add    %r9d,%eax
  0x000000000f1203ab: movslq %r11d,%r9
  0x000000000f1203ae: movzwl 0x12(%r10,%r9,2),%ecx
  0x000000000f1203b4: movzwl 0x16(%r10,%r9,2),%ebp
  0x000000000f1203ba: movzwl 0x14(%r10,%r9,2),%r9d
  0x000000000f1203c0: mov    %eax,%esi
  0x000000000f1203c2: shl    $0x5,%esi
  0x000000000f1203c5: sub    %eax,%esi
  0x000000000f1203c7: add    %ecx,%esi
  0x000000000f1203c9: mov    %esi,%ecx
  0x000000000f1203cb: shl    $0x5,%ecx
  0x000000000f1203ce: sub    %esi,%ecx
  0x000000000f1203d0: add    %r9d,%ecx
  0x000000000f1203d3: mov    %ecx,%esi
  0x000000000f1203d5: shl    $0x5,%esi
  0x000000000f1203d8: sub    %ecx,%esi
  0x000000000f1203da: add    %ebp,%esi          ;*iadd
                                                ; - java.lang.String::hashCode@40 (line 1459)

  0x000000000f1203dc: mov    %esi,%eax
  0x000000000f1203de: shl    $0x5,%eax          ;*imul
                                                ; - java.lang.String::hashCode@36 (line 1459)

  0x000000000f1203e1: add    $0x4,%r11d         ;*iinc
                                                ; - java.lang.String::hashCode@42 (line 1458)

  0x000000000f1203e5: cmp    %r8d,%r11d
  0x000000000f1203e8: jl     0x000000000f1203a0  ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1458)

  0x000000000f1203ea: cmp    %edi,%r11d
  0x000000000f1203ed: jl     0x000000000f12037c
  0x000000000f1203ef: mov    %esi,%eax
  0x000000000f1203f1: mov    %eax,0x10(%rbx)    ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1454)

  0x000000000f1203f4: add    $0x20,%rsp
  0x000000000f1203f8: pop    %rbp
  0x000000000f1203f9: test   %eax,-0xef003ff(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f1203ff: retq   
  0x000000000f120400: xor    %eax,%eax
  0x000000000f120402: jmp    0x000000000f1203f4
  0x000000000f120404: mov    $0xffffff86,%edx
  0x000000000f120409: mov    %r10d,%ebp
  0x000000000f12040c: mov    %rbx,(%rsp)
  0x000000000f120410: data16 xchg %ax,%ax
  0x000000000f120413: callq  0x000000000f0557a0  ; OopMap{rbp=NarrowOop [0]=Oop off=280}
                                                ;*bipush
                                                ; - java.lang.String::hashCode@33 (line 1459)
                                                ;   {runtime_call}
  0x000000000f120418: int3                      ;*bipush
                                                ; - java.lang.String::hashCode@33 (line 1459)

  0x000000000f120419: mov    $0xfffffff6,%edx
  0x000000000f12041e: nop
  0x000000000f12041f: callq  0x000000000f0557a0  ; OopMap{off=292}
                                                ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1455)
                                                ;   {runtime_call}
  0x000000000f120424: int3                      ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1455)

  0x000000000f120425: hlt    
  0x000000000f120426: hlt    
  0x000000000f120427: hlt    
  0x000000000f120428: hlt    
  0x000000000f120429: hlt    
  0x000000000f12042a: hlt    
  0x000000000f12042b: hlt    
  0x000000000f12042c: hlt    
  0x000000000f12042d: hlt    
  0x000000000f12042e: hlt    
  0x000000000f12042f: hlt    
  0x000000000f120430: hlt    
  0x000000000f120431: hlt    
  0x000000000f120432: hlt    
  0x000000000f120433: hlt    
  0x000000000f120434: hlt    
  0x000000000f120435: hlt    
  0x000000000f120436: hlt    
  0x000000000f120437: hlt    
  0x000000000f120438: hlt    
  0x000000000f120439: hlt    
  0x000000000f12043a: hlt    
  0x000000000f12043b: hlt    
  0x000000000f12043c: hlt    
  0x000000000f12043d: hlt    
  0x000000000f12043e: hlt    
  0x000000000f12043f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f120440: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f120445: callq  0x000000000f12044a
  0x000000000f12044a: subq   $0x5,(%rsp)
  0x000000000f12044f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f120454: hlt    
  0x000000000f120455: hlt    
  0x000000000f120456: hlt    
  0x000000000f120457: hlt    
<nmethod compile_id='3' compiler='C2' level='4' entry='0x000000000f120300' size='1192' address='0x000000000f1201d0' relocation_offset='288' insts_offset='304' stub_offset='624' scopes_data_offset='656' scopes_pcs_offset='768' dependencies_offset='1168' nul_chk_table_offset='1176' method='java/lang/String hashCode ()I' bytes='55' count='1577' backedge_count='38609' iicount='1577' stamp='0.309'/>
<writer thread='6336'/>
<task_queued compile_id='23' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='512' iicount='512' level='3' stamp='0.310' comment='tiered' hot_count='512'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f121450:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;
  # this:     rdx:rdx   = &apos;java/util/HashMap&apos;
  # parm0:    r8        = int
  # parm1:    r9:r9     = &apos;java/lang/Object&apos;
  # parm2:    rdi:rdi   = &apos;java/lang/Object&apos;
  # parm3:    rsi       = boolean
  # parm4:    rcx       = boolean
  #           [sp+0xb0]  (sp of caller)
  0x000000000f1216c0: mov    0x8(%rdx),%r10d
  0x000000000f1216c4: cmp    %rax,%r10
  0x000000000f1216c7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f1216cd: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f1216d8: data16 data16 xchg %ax,%ax
  0x000000000f1216dc: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f1216e0: mov    %eax,-0x6000(%rsp)
  0x000000000f1216e7: push   %rbp
  0x000000000f1216e8: sub    $0xa0,%rsp
  0x000000000f1216ef: mov    %rdx,0x48(%rsp)
  0x000000000f1216f4: mov    %r8d,0x40(%rsp)
  0x000000000f1216f9: mov    %r9,0x50(%rsp)
  0x000000000f1216fe: movabs $0x8589900,%rbx    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121708: mov    0xdc(%rbx),%eax
  0x000000000f12170e: add    $0x8,%eax
  0x000000000f121711: mov    %eax,0xdc(%rbx)
  0x000000000f121717: movabs $0x83dc540,%rbx    ;   {metadata({method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121721: and    $0x1ff8,%eax
  0x000000000f121727: cmp    $0x0,%eax
  0x000000000f12172a: je     0x000000000f12272d  ;*aload_0
                                                ; - java.util.HashMap::putVal@0 (line 627)

  0x000000000f121730: mov    0x24(%rdx),%ebx    ;*getfield table
                                                ; - java.util.HashMap::putVal@1 (line 627)

  0x000000000f121733: cmp    $0x0,%rbx
  0x000000000f121737: movabs $0x8589900,%rax    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121741: movabs $0x108,%r11
  0x000000000f12174b: je     0x000000000f12175b
  0x000000000f121751: movabs $0x118,%r11
  0x000000000f12175b: mov    (%rax,%r11,1),%r13
  0x000000000f12175f: lea    0x1(%r13),%r13
  0x000000000f121763: mov    %r13,(%rax,%r11,1)
  0x000000000f121767: je     0x000000000f1217bb  ;*ifnull
                                                ; - java.util.HashMap::putVal@7 (line 627)

  0x000000000f12176d: mov    0xc(%rbx),%eax     ;*arraylength
                                                ; - java.util.HashMap::putVal@12 (line 627)
                                                ; implicit exception: dispatches to 0x000000000f122744
  0x000000000f121770: cmp    $0x0,%eax
  0x000000000f121773: movabs $0x8589900,%r11    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f12177d: movabs $0x128,%r13
  0x000000000f121787: jne    0x000000000f121797
  0x000000000f12178d: movabs $0x138,%r13
  0x000000000f121797: mov    (%r11,%r13,1),%r14
  0x000000000f12179b: lea    0x1(%r14),%r14
  0x000000000f12179f: mov    %r14,(%r11,%r13,1)
  0x000000000f1217a3: je     0x000000000f1217bb  ;*ifne
                                                ; - java.util.HashMap::putVal@16 (line 627)

  0x000000000f1217a9: mov    %ecx,0x60(%rsp)
  0x000000000f1217ad: mov    %esi,0x44(%rsp)
  0x000000000f1217b1: mov    %rdi,0x58(%rsp)
  0x000000000f1217b6: jmpq   0x000000000f121871  ;*aload
                                                ; - java.util.HashMap::putVal@29 (line 629)

  0x000000000f1217bb: mov    %ecx,0x60(%rsp)
  0x000000000f1217bf: mov    %esi,0x44(%rsp)
  0x000000000f1217c3: mov    %rdi,0x58(%rsp)
  0x000000000f1217c8: mov    %rdx,%rbx
  0x000000000f1217cb: movabs $0x8589900,%rax    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1217d5: mov    0x8(%rbx),%ebx
  0x000000000f1217d8: cmp    0x150(%rax),%rbx
  0x000000000f1217df: jne    0x000000000f1217ee
  0x000000000f1217e1: addq   $0x1,0x158(%rax)
  0x000000000f1217e9: jmpq   0x000000000f121854
  0x000000000f1217ee: cmp    0x160(%rax),%rbx
  0x000000000f1217f5: jne    0x000000000f121804
  0x000000000f1217f7: addq   $0x1,0x168(%rax)
  0x000000000f1217ff: jmpq   0x000000000f121854
  0x000000000f121804: cmpq   $0x0,0x150(%rax)
  0x000000000f12180f: jne    0x000000000f121828
  0x000000000f121811: mov    %rbx,0x150(%rax)
  0x000000000f121818: movq   $0x1,0x158(%rax)
  0x000000000f121823: jmpq   0x000000000f121854
  0x000000000f121828: cmpq   $0x0,0x160(%rax)
  0x000000000f121833: jne    0x000000000f12184c
  0x000000000f121835: mov    %rbx,0x160(%rax)
  0x000000000f12183c: movq   $0x1,0x168(%rax)
  0x000000000f121847: jmpq   0x000000000f121854
  0x000000000f12184c: addq   $0x1,0x148(%rax)
  0x000000000f121854: mov    %rdx,%rbx
  0x000000000f121857: mov    %rbx,%rdx          ;*invokevirtual resize
                                                ; - java.util.HashMap::putVal@20 (line 628)

  0x000000000f12185a: nop
  0x000000000f12185b: nop
  0x000000000f12185c: nop
  0x000000000f12185d: nop
  0x000000000f12185e: nop
  0x000000000f12185f: callq  0x000000000f0561a0  ; OopMap{[88]=Oop [80]=Oop [72]=Oop off=420}
                                                ;*invokevirtual resize
                                                ; - java.util.HashMap::putVal@20 (line 628)
                                                ;   {optimized virtual_call}
  0x000000000f121864: mov    %rax,%r8           ;*invokevirtual resize
                                                ; - java.util.HashMap::putVal@20 (line 628)

  0x000000000f121867: mov    0xc(%r8),%r9d      ;*arraylength
                                                ; - java.util.HashMap::putVal@26 (line 628)
                                                ; implicit exception: dispatches to 0x000000000f122749
  0x000000000f12186b: mov    %r9,%rax
  0x000000000f12186e: mov    %r8,%rbx           ;*aload
                                                ; - java.util.HashMap::putVal@29 (line 629)

  0x000000000f121871: dec    %eax
  0x000000000f121873: and    0x40(%rsp),%eax
  0x000000000f121877: movslq %eax,%r8
  0x000000000f12187a: cmp    0xc(%rbx),%eax     ; implicit exception: dispatches to 0x000000000f12274e
  0x000000000f12187d: jae    0x000000000f122758
  0x000000000f121883: mov    0x10(%rbx,%r8,4),%esi  ;*aaload
                                                ; - java.util.HashMap::putVal@40 (line 629)

  0x000000000f121888: cmp    $0x0,%rsi
  0x000000000f12188c: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121896: movabs $0x178,%r9
  0x000000000f1218a0: jne    0x000000000f1218b0
  0x000000000f1218a6: movabs $0x188,%r9
  0x000000000f1218b0: mov    (%r8,%r9,1),%rdi
  0x000000000f1218b4: lea    0x1(%rdi),%rdi
  0x000000000f1218b8: mov    %rdi,(%r8,%r9,1)
  0x000000000f1218bc: jne    0x000000000f121ad4  ;*ifnonnull
                                                ; - java.util.HashMap::putVal@44 (line 629)

  0x000000000f1218c2: mov    %eax,0x64(%rsp)
  0x000000000f1218c6: mov    %rbx,0x68(%rsp)
  0x000000000f1218cb: mov    0x48(%rsp),%rdx
  0x000000000f1218d0: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1218da: mov    0x8(%rdx),%edx
  0x000000000f1218dd: cmp    0x1a0(%r8),%rdx
  0x000000000f1218e4: jne    0x000000000f1218f3
  0x000000000f1218e6: addq   $0x1,0x1a8(%r8)
  0x000000000f1218ee: jmpq   0x000000000f121959
  0x000000000f1218f3: cmp    0x1b0(%r8),%rdx
  0x000000000f1218fa: jne    0x000000000f121909
  0x000000000f1218fc: addq   $0x1,0x1b8(%r8)
  0x000000000f121904: jmpq   0x000000000f121959
  0x000000000f121909: cmpq   $0x0,0x1a0(%r8)
  0x000000000f121914: jne    0x000000000f12192d
  0x000000000f121916: mov    %rdx,0x1a0(%r8)
  0x000000000f12191d: movq   $0x1,0x1a8(%r8)
  0x000000000f121928: jmpq   0x000000000f121959
  0x000000000f12192d: cmpq   $0x0,0x1b0(%r8)
  0x000000000f121938: jne    0x000000000f121951
  0x000000000f12193a: mov    %rdx,0x1b0(%r8)
  0x000000000f121941: movq   $0x1,0x1b8(%r8)
  0x000000000f12194c: jmpq   0x000000000f121959
  0x000000000f121951: addq   $0x1,0x198(%r8)
  0x000000000f121959: mov    0x40(%rsp),%r8d
  0x000000000f12195e: mov    0x50(%rsp),%r9
  0x000000000f121963: mov    0x58(%rsp),%rdi
  0x000000000f121968: movabs $0x0,%rsi          ;   {oop(NULL)}
  0x000000000f121972: mov    0x48(%rsp),%rdx    ;*invokevirtual newNode
                                                ; - java.util.HashMap::putVal@56 (line 630)

  0x000000000f121977: nop
  0x000000000f121978: nop
  0x000000000f121979: nop
  0x000000000f12197a: nop
  0x000000000f12197b: nop
  0x000000000f12197c: nop
  0x000000000f12197d: movabs $0xffffffffffffffff,%rax
  0x000000000f121987: callq  0x000000000f0563e0  ; OopMap{[72]=Oop [104]=Oop off=716}
                                                ;*invokevirtual newNode
                                                ; - java.util.HashMap::putVal@56 (line 630)
                                                ;   {virtual_call}
  0x000000000f12198c: mov    0x64(%rsp),%r8d
  0x000000000f121991: movslq %r8d,%rdx
  0x000000000f121994: mov    0x68(%rsp),%rbx
  0x000000000f121999: lea    0x10(%rbx,%rdx,4),%rdx
  0x000000000f12199e: cmp    0xc(%rbx),%r8d
  0x000000000f1219a2: jae    0x000000000f122761
  0x000000000f1219a8: cmp    $0x0,%rax
  0x000000000f1219ac: jne    0x000000000f1219c7
  0x000000000f1219ae: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1219b8: orl    $0x100,0x1c0(%rsi)
  0x000000000f1219c2: jmpq   0x000000000f121aa5
  0x000000000f1219c7: mov    0x8(%rbx),%r8d     ; implicit exception: dispatches to 0x000000000f12276a
  0x000000000f1219cb: mov    0x8(%rax),%esi
  0x000000000f1219ce: mov    0xf0(%r8),%r8
  0x000000000f1219d5: cmp    %r8,%rsi
  0x000000000f1219d8: je     0x000000000f121a0a
  0x000000000f1219de: mov    0xc(%r8),%edi
  0x000000000f1219e2: cmp    (%rsi,%rdi,1),%r8
  0x000000000f1219e6: je     0x000000000f121a0a
  0x000000000f1219ec: cmp    $0x18,%edi
  0x000000000f1219ef: jne    0x000000000f121a8e
  0x000000000f1219f5: push   %rsi
  0x000000000f1219f6: push   %r8
  0x000000000f1219f8: callq  0x000000000f10f7a0  ;   {runtime_call}
  0x000000000f1219fd: pop    %rsi
  0x000000000f1219fe: pop    %r8
  0x000000000f121a00: cmp    $0x0,%r8d
  0x000000000f121a04: je     0x000000000f121a8e
  0x000000000f121a0a: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121a14: mov    0x8(%rax),%r8d
  0x000000000f121a18: cmp    0x1d0(%rsi),%r8
  0x000000000f121a1f: jne    0x000000000f121a2e
  0x000000000f121a21: addq   $0x1,0x1d8(%rsi)
  0x000000000f121a29: jmpq   0x000000000f121aa5
  0x000000000f121a2e: cmp    0x1e0(%rsi),%r8
  0x000000000f121a35: jne    0x000000000f121a44
  0x000000000f121a37: addq   $0x1,0x1e8(%rsi)
  0x000000000f121a3f: jmpq   0x000000000f121aa5
  0x000000000f121a44: cmpq   $0x0,0x1d0(%rsi)
  0x000000000f121a4f: jne    0x000000000f121a68
  0x000000000f121a51: mov    %r8,0x1d0(%rsi)
  0x000000000f121a58: movq   $0x1,0x1d8(%rsi)
  0x000000000f121a63: jmpq   0x000000000f121aa5
  0x000000000f121a68: cmpq   $0x0,0x1e0(%rsi)
  0x000000000f121a73: jne    0x000000000f121a8c
  0x000000000f121a75: mov    %r8,0x1e0(%rsi)
  0x000000000f121a7c: movq   $0x1,0x1e8(%rsi)
  0x000000000f121a87: jmpq   0x000000000f121aa5
  0x000000000f121a8c: jmp    0x000000000f121aa5
  0x000000000f121a8e: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121a98: subq   $0x1,0x1c8(%rsi)
  0x000000000f121aa0: jmpq   0x000000000f12276f
  0x000000000f121aa5: mov    %rax,%r10
  0x000000000f121aa8: mov    %r10d,(%rdx)
  0x000000000f121aab: shr    $0x9,%rdx
  0x000000000f121aaf: movabs $0x2dd5000,%r8
  0x000000000f121ab9: movb   $0x0,(%rdx,%r8,1)  ;*aastore
                                                ; - java.util.HashMap::putVal@59 (line 630)

  0x000000000f121abe: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121ac8: incl   0x1f8(%r8)
  0x000000000f121acf: jmpq   0x000000000f122410  ;*goto
                                                ; - java.util.HashMap::putVal@60 (line 630)

  0x000000000f121ad4: mov    0xc(%rsi),%r8d     ;*getfield hash
                                                ; - java.util.HashMap::putVal@65 (line 633)
                                                ; implicit exception: dispatches to 0x000000000f122778
  0x000000000f121ad8: cmp    0x40(%rsp),%r8d
  0x000000000f121add: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121ae7: movabs $0x210,%rdx
  0x000000000f121af1: jne    0x000000000f121b01
  0x000000000f121af7: movabs $0x220,%rdx
  0x000000000f121b01: mov    (%r8,%rdx,1),%rdi
  0x000000000f121b05: lea    0x1(%rdi),%rdi
  0x000000000f121b09: mov    %rdi,(%r8,%rdx,1)
  0x000000000f121b0d: je     0x000000000f121b1d  ;*if_icmpne
                                                ; - java.util.HashMap::putVal@69 (line 633)

  0x000000000f121b13: mov    %rbx,0x68(%rsp)
  0x000000000f121b18: jmpq   0x000000000f121c92  ;*aload
                                                ; - java.util.HashMap::putVal@104 (line 636)

  0x000000000f121b1d: mov    0x50(%rsp),%r9
  0x000000000f121b22: mov    0x10(%rsi),%r8d    ;*getfield key
                                                ; - java.util.HashMap::putVal@74 (line 633)

  0x000000000f121b26: cmp    %r9,%r8
  0x000000000f121b29: movabs $0x8589900,%rdx    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121b33: movabs $0x230,%rdi
  0x000000000f121b3d: je     0x000000000f121b4d
  0x000000000f121b43: movabs $0x240,%rdi
  0x000000000f121b4d: mov    (%rdx,%rdi,1),%rax
  0x000000000f121b51: lea    0x1(%rax),%rax
  0x000000000f121b55: mov    %rax,(%rdx,%rdi,1)
  0x000000000f121b59: je     0x000000000f1223c2  ;*if_acmpeq
                                                ; - java.util.HashMap::putVal@81 (line 633)

  0x000000000f121b5f: cmp    $0x0,%r9
  0x000000000f121b63: movabs $0x8589900,%rdx    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121b6d: movabs $0x250,%rdi
  0x000000000f121b77: je     0x000000000f121b87
  0x000000000f121b7d: movabs $0x260,%rdi
  0x000000000f121b87: mov    (%rdx,%rdi,1),%rax
  0x000000000f121b8b: lea    0x1(%rax),%rax
  0x000000000f121b8f: mov    %rax,(%rdx,%rdi,1)
  0x000000000f121b93: jne    0x000000000f121ba3  ;*ifnull
                                                ; - java.util.HashMap::putVal@85 (line 633)

  0x000000000f121b99: mov    %rbx,0x68(%rsp)
  0x000000000f121b9e: jmpq   0x000000000f121c92  ;*aload
                                                ; - java.util.HashMap::putVal@104 (line 636)

  0x000000000f121ba3: mov    %rsi,0x70(%rsp)
  0x000000000f121ba8: mov    %rbx,0x68(%rsp)
  0x000000000f121bad: cmp    (%r9),%rax         ; implicit exception: dispatches to 0x000000000f12277d
  0x000000000f121bb0: mov    %r9,%rdx
  0x000000000f121bb3: movabs $0x8589900,%rdi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121bbd: mov    0x8(%rdx),%edx
  0x000000000f121bc0: cmp    0x278(%rdi),%rdx
  0x000000000f121bc7: jne    0x000000000f121bd6
  0x000000000f121bc9: addq   $0x1,0x280(%rdi)
  0x000000000f121bd1: jmpq   0x000000000f121c3c
  0x000000000f121bd6: cmp    0x288(%rdi),%rdx
  0x000000000f121bdd: jne    0x000000000f121bec
  0x000000000f121bdf: addq   $0x1,0x290(%rdi)
  0x000000000f121be7: jmpq   0x000000000f121c3c
  0x000000000f121bec: cmpq   $0x0,0x278(%rdi)
  0x000000000f121bf7: jne    0x000000000f121c10
  0x000000000f121bf9: mov    %rdx,0x278(%rdi)
  0x000000000f121c00: movq   $0x1,0x280(%rdi)
  0x000000000f121c0b: jmpq   0x000000000f121c3c
  0x000000000f121c10: cmpq   $0x0,0x288(%rdi)
  0x000000000f121c1b: jne    0x000000000f121c34
  0x000000000f121c1d: mov    %rdx,0x288(%rdi)
  0x000000000f121c24: movq   $0x1,0x290(%rdi)
  0x000000000f121c2f: jmpq   0x000000000f121c3c
  0x000000000f121c34: addq   $0x1,0x270(%rdi)
  0x000000000f121c3c: mov    %r9,%rdx           ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@91 (line 634)

  0x000000000f121c3f: nop
  0x000000000f121c40: nop
  0x000000000f121c41: nop
  0x000000000f121c42: nop
  0x000000000f121c43: nop
  0x000000000f121c44: nop
  0x000000000f121c45: movabs $0xffffffffffffffff,%rax
  0x000000000f121c4f: callq  0x000000000f0563e0  ; OopMap{[72]=Oop [88]=Oop [80]=Oop [112]=Oop [104]=Oop off=1428}
                                                ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@91 (line 634)
                                                ;   {virtual_call}
  0x000000000f121c54: cmp    $0x0,%eax
  0x000000000f121c57: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121c61: movabs $0x2a0,%r9
  0x000000000f121c6b: je     0x000000000f121c7b
  0x000000000f121c71: movabs $0x2b0,%r9
  0x000000000f121c7b: mov    (%r8,%r9,1),%rdi
  0x000000000f121c7f: lea    0x1(%rdi),%rdi
  0x000000000f121c83: mov    %rdi,(%r8,%r9,1)
  0x000000000f121c87: mov    0x70(%rsp),%rsi
  0x000000000f121c8c: jne    0x000000000f1223c2  ;*ifeq
                                                ; - java.util.HashMap::putVal@94 (line 634)

  0x000000000f121c92: cmp    $0x0,%rsi
  0x000000000f121c96: jne    0x000000000f121cb1
  0x000000000f121c98: movabs $0x8589900,%rdi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121ca2: orl    $0x100,0x2d0(%rdi)
  0x000000000f121cac: jmpq   0x000000000f121d6a
  0x000000000f121cb1: movabs $0x1e048e90,%rcx   ;   {metadata(&apos;java/util/HashMap$TreeNode&apos;)}
  0x000000000f121cbb: mov    0x8(%rsi),%r9d
  0x000000000f121cbf: cmp    %r9,%rcx
  0x000000000f121cc2: jne    0x000000000f121d4e
  0x000000000f121cc8: movabs $0x8589900,%rdi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121cd2: mov    0x8(%rsi),%ecx
  0x000000000f121cd5: cmp    0x2e0(%rdi),%rcx
  0x000000000f121cdc: jne    0x000000000f121ceb
  0x000000000f121cde: addq   $0x1,0x2e8(%rdi)
  0x000000000f121ce6: jmpq   0x000000000f121d6f
  0x000000000f121ceb: cmp    0x2f0(%rdi),%rcx
  0x000000000f121cf2: jne    0x000000000f121d01
  0x000000000f121cf4: addq   $0x1,0x2f8(%rdi)
  0x000000000f121cfc: jmpq   0x000000000f121d6f
  0x000000000f121d01: cmpq   $0x0,0x2e0(%rdi)
  0x000000000f121d0c: jne    0x000000000f121d25
  0x000000000f121d0e: mov    %rcx,0x2e0(%rdi)
  0x000000000f121d15: movq   $0x1,0x2e8(%rdi)
  0x000000000f121d20: jmpq   0x000000000f121d6f
  0x000000000f121d25: cmpq   $0x0,0x2f0(%rdi)
  0x000000000f121d30: jne    0x000000000f121d49
  0x000000000f121d32: mov    %rcx,0x2f0(%rdi)
  0x000000000f121d39: movq   $0x1,0x2f8(%rdi)
  0x000000000f121d44: jmpq   0x000000000f121d6f
  0x000000000f121d49: jmpq   0x000000000f121d6f
  0x000000000f121d4e: movabs $0x8589900,%rdi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121d58: subq   $0x1,0x2d8(%rdi)
  0x000000000f121d60: jmpq   0x000000000f121d6a
  0x000000000f121d65: jmpq   0x000000000f121d6f
  0x000000000f121d6a: xor    %r8,%r8
  0x000000000f121d6d: jmp    0x000000000f121d79
  0x000000000f121d6f: movabs $0x1,%r8           ;*instanceof
                                                ; - java.util.HashMap::putVal@106 (line 636)

  0x000000000f121d79: cmp    $0x0,%r8d
  0x000000000f121d7d: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121d87: movabs $0x308,%r9
  0x000000000f121d91: je     0x000000000f121da1
  0x000000000f121d97: movabs $0x318,%r9
  0x000000000f121da1: mov    (%r8,%r9,1),%rdi
  0x000000000f121da5: lea    0x1(%rdi),%rdi
  0x000000000f121da9: mov    %rdi,(%r8,%r9,1)
  0x000000000f121dad: je     0x000000000f121f52  ;*ifeq
                                                ; - java.util.HashMap::putVal@109 (line 636)

  0x000000000f121db3: cmp    $0x0,%rsi
  0x000000000f121db7: jne    0x000000000f121dd3
  0x000000000f121db9: movabs $0x8589900,%r9     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121dc3: orl    $0x100,0x320(%r9)
  0x000000000f121dce: jmpq   0x000000000f121e8c
  0x000000000f121dd3: movabs $0x1e048e90,%rdi   ;   {metadata(&apos;java/util/HashMap$TreeNode&apos;)}
  0x000000000f121ddd: mov    0x8(%rsi),%r8d
  0x000000000f121de1: cmp    %r8,%rdi
  0x000000000f121de4: jne    0x000000000f121e70
  0x000000000f121dea: movabs $0x8589900,%r9     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121df4: mov    0x8(%rsi),%edi
  0x000000000f121df7: cmp    0x330(%r9),%rdi
  0x000000000f121dfe: jne    0x000000000f121e0d
  0x000000000f121e00: addq   $0x1,0x338(%r9)
  0x000000000f121e08: jmpq   0x000000000f121e8c
  0x000000000f121e0d: cmp    0x340(%r9),%rdi
  0x000000000f121e14: jne    0x000000000f121e23
  0x000000000f121e16: addq   $0x1,0x348(%r9)
  0x000000000f121e1e: jmpq   0x000000000f121e8c
  0x000000000f121e23: cmpq   $0x0,0x330(%r9)
  0x000000000f121e2e: jne    0x000000000f121e47
  0x000000000f121e30: mov    %rdi,0x330(%r9)
  0x000000000f121e37: movq   $0x1,0x338(%r9)
  0x000000000f121e42: jmpq   0x000000000f121e8c
  0x000000000f121e47: cmpq   $0x0,0x340(%r9)
  0x000000000f121e52: jne    0x000000000f121e6b
  0x000000000f121e54: mov    %rdi,0x340(%r9)
  0x000000000f121e5b: movq   $0x1,0x348(%r9)
  0x000000000f121e66: jmpq   0x000000000f121e8c
  0x000000000f121e6b: jmpq   0x000000000f121e8c
  0x000000000f121e70: movabs $0x8589900,%r9     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121e7a: subq   $0x1,0x328(%r9)
  0x000000000f121e82: jmpq   0x000000000f122782
  0x000000000f121e87: jmpq   0x000000000f121e8c
  0x000000000f121e8c: mov    %rsi,%rdx          ;*checkcast
                                                ; - java.util.HashMap::putVal@114 (line 637)

  0x000000000f121e8f: cmp    (%rdx),%rax        ; implicit exception: dispatches to 0x000000000f12278b
  0x000000000f121e92: mov    %rdx,%r8
  0x000000000f121e95: movabs $0x8589900,%r9     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121e9f: mov    0x8(%r8),%r8d
  0x000000000f121ea3: cmp    0x360(%r9),%r8
  0x000000000f121eaa: jne    0x000000000f121eb9
  0x000000000f121eac: addq   $0x1,0x368(%r9)
  0x000000000f121eb4: jmpq   0x000000000f121f1f
  0x000000000f121eb9: cmp    0x370(%r9),%r8
  0x000000000f121ec0: jne    0x000000000f121ecf
  0x000000000f121ec2: addq   $0x1,0x378(%r9)
  0x000000000f121eca: jmpq   0x000000000f121f1f
  0x000000000f121ecf: cmpq   $0x0,0x360(%r9)
  0x000000000f121eda: jne    0x000000000f121ef3
  0x000000000f121edc: mov    %r8,0x360(%r9)
  0x000000000f121ee3: movq   $0x1,0x368(%r9)
  0x000000000f121eee: jmpq   0x000000000f121f1f
  0x000000000f121ef3: cmpq   $0x0,0x370(%r9)
  0x000000000f121efe: jne    0x000000000f121f17
  0x000000000f121f00: mov    %r8,0x370(%r9)
  0x000000000f121f07: movq   $0x1,0x378(%r9)
  0x000000000f121f12: jmpq   0x000000000f121f1f
  0x000000000f121f17: addq   $0x1,0x358(%r9)
  0x000000000f121f1f: mov    0x48(%rsp),%r8
  0x000000000f121f24: mov    0x68(%rsp),%r9
  0x000000000f121f29: mov    0x40(%rsp),%edi
  0x000000000f121f2d: mov    0x50(%rsp),%rsi
  0x000000000f121f32: mov    0x58(%rsp),%rcx    ;*invokevirtual putTreeVal
                                                ; - java.util.HashMap::putVal@123 (line 637)

  0x000000000f121f37: callq  0x000000000f0561a0  ; OopMap{[72]=Oop [88]=Oop off=2172}
                                                ;*invokevirtual putTreeVal
                                                ; - java.util.HashMap::putVal@123 (line 637)
                                                ;   {optimized virtual_call}
  0x000000000f121f3c: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121f46: incl   0x388(%r8)
  0x000000000f121f4d: jmpq   0x000000000f1223d6  ;*goto
                                                ; - java.util.HashMap::putVal@128 (line 637)

  0x000000000f121f52: mov    $0x0,%edi          ;*aload
                                                ; - java.util.HashMap::putVal@134 (line 640)

  0x000000000f121f57: nop
  0x000000000f121f58: mov    %edi,0x78(%rsp)
  0x000000000f121f5c: mov    0x50(%rsp),%r9
  0x000000000f121f61: mov    0x40(%rsp),%r8d
  0x000000000f121f66: mov    0x18(%rsi),%ebx    ;*getfield next
                                                ; - java.util.HashMap::putVal@136 (line 640)
                                                ; implicit exception: dispatches to 0x000000000f122790
  0x000000000f121f69: mov    %rbx,0x80(%rsp)
  0x000000000f121f71: cmp    $0x0,%rbx
  0x000000000f121f75: movabs $0x8589900,%rdx    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121f7f: movabs $0x3a0,%rax
  0x000000000f121f89: jne    0x000000000f121f99
  0x000000000f121f8f: movabs $0x3b0,%rax
  0x000000000f121f99: mov    (%rdx,%rax,1),%rcx
  0x000000000f121f9d: lea    0x1(%rcx),%rcx
  0x000000000f121fa1: mov    %rcx,(%rdx,%rax,1)
  0x000000000f121fa5: je     0x000000000f1221c9  ;*ifnonnull
                                                ; - java.util.HashMap::putVal@142 (line 640)

  0x000000000f121fab: mov    0xc(%rbx),%edx     ;*getfield hash
                                                ; - java.util.HashMap::putVal@177 (line 646)
                                                ; implicit exception: dispatches to 0x000000000f122795
  0x000000000f121fae: cmp    %r8d,%edx
  0x000000000f121fb1: movabs $0x8589900,%rdx    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121fbb: movabs $0x458,%rsi
  0x000000000f121fc5: jne    0x000000000f121fd5
  0x000000000f121fcb: movabs $0x468,%rsi
  0x000000000f121fd5: mov    (%rdx,%rsi,1),%rax
  0x000000000f121fd9: lea    0x1(%rax),%rax
  0x000000000f121fdd: mov    %rax,(%rdx,%rsi,1)
  0x000000000f121fe1: jne    0x000000000f12213d  ;*if_icmpne
                                                ; - java.util.HashMap::putVal@181 (line 646)

  0x000000000f121fe7: mov    0x10(%rbx),%edx    ;*getfield key
                                                ; - java.util.HashMap::putVal@186 (line 646)

  0x000000000f121fea: cmp    %r9,%rdx
  0x000000000f121fed: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f121ff7: movabs $0x478,%rax
  0x000000000f122001: je     0x000000000f122011
  0x000000000f122007: movabs $0x488,%rax
  0x000000000f122011: mov    (%rsi,%rax,1),%rcx
  0x000000000f122015: lea    0x1(%rcx),%rcx
  0x000000000f122019: mov    %rcx,(%rsi,%rax,1)
  0x000000000f12201d: je     0x000000000f12219e  ;*if_acmpeq
                                                ; - java.util.HashMap::putVal@193 (line 646)

  0x000000000f122023: cmp    $0x0,%r9
  0x000000000f122027: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122031: movabs $0x498,%rax
  0x000000000f12203b: je     0x000000000f12204b
  0x000000000f122041: movabs $0x4a8,%rax
  0x000000000f12204b: mov    (%rsi,%rax,1),%rcx
  0x000000000f12204f: lea    0x1(%rcx),%rcx
  0x000000000f122053: mov    %rcx,(%rsi,%rax,1)
  0x000000000f122057: je     0x000000000f12213d  ;*ifnull
                                                ; - java.util.HashMap::putVal@197 (line 646)

  0x000000000f12205d: cmp    (%r9),%rax         ; implicit exception: dispatches to 0x000000000f12279a
  0x000000000f122060: mov    %r9,%rsi
  0x000000000f122063: movabs $0x8589900,%rax    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f12206d: mov    0x8(%rsi),%esi
  0x000000000f122070: cmp    0x4c0(%rax),%rsi
  0x000000000f122077: jne    0x000000000f122086
  0x000000000f122079: addq   $0x1,0x4c8(%rax)
  0x000000000f122081: jmpq   0x000000000f1220ec
  0x000000000f122086: cmp    0x4d0(%rax),%rsi
  0x000000000f12208d: jne    0x000000000f12209c
  0x000000000f12208f: addq   $0x1,0x4d8(%rax)
  0x000000000f122097: jmpq   0x000000000f1220ec
  0x000000000f12209c: cmpq   $0x0,0x4c0(%rax)
  0x000000000f1220a7: jne    0x000000000f1220c0
  0x000000000f1220a9: mov    %rsi,0x4c0(%rax)
  0x000000000f1220b0: movq   $0x1,0x4c8(%rax)
  0x000000000f1220bb: jmpq   0x000000000f1220ec
  0x000000000f1220c0: cmpq   $0x0,0x4d0(%rax)
  0x000000000f1220cb: jne    0x000000000f1220e4
  0x000000000f1220cd: mov    %rsi,0x4d0(%rax)
  0x000000000f1220d4: movq   $0x1,0x4d8(%rax)
  0x000000000f1220df: jmpq   0x000000000f1220ec
  0x000000000f1220e4: addq   $0x1,0x4b8(%rax)
  0x000000000f1220ec: mov    %rdx,%r8
  0x000000000f1220ef: mov    %r9,%rdx           ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@203 (line 647)

  0x000000000f1220f2: nop
  0x000000000f1220f3: nop
  0x000000000f1220f4: nop
  0x000000000f1220f5: movabs $0xffffffffffffffff,%rax
  0x000000000f1220ff: callq  0x000000000f0563e0  ; OopMap{[72]=Oop [88]=Oop [104]=Oop [80]=Oop [128]=Oop off=2628}
                                                ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@203 (line 647)
                                                ;   {virtual_call}
  0x000000000f122104: cmp    $0x0,%eax
  0x000000000f122107: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122111: movabs $0x4e8,%r9
  0x000000000f12211b: je     0x000000000f12212b
  0x000000000f122121: movabs $0x4f8,%r9
  0x000000000f12212b: mov    (%r8,%r9,1),%rdi
  0x000000000f12212f: lea    0x1(%rdi),%rdi
  0x000000000f122133: mov    %rdi,(%r8,%r9,1)
  0x000000000f122137: jne    0x000000000f1221ab  ;*ifeq
                                                ; - java.util.HashMap::putVal@206 (line 647)

  0x000000000f12213d: mov    0x78(%rsp),%edi
  0x000000000f122141: inc    %edi
  0x000000000f122143: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f12214d: mov    0xe0(%r8),%r9d
  0x000000000f122154: add    $0x8,%r9d
  0x000000000f122158: mov    %r9d,0xe0(%r8)
  0x000000000f12215f: movabs $0x83dc540,%r8     ;   {metadata({method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122169: and    $0xfff8,%r9d
  0x000000000f122170: cmp    $0x0,%r9d
  0x000000000f122174: je     0x000000000f12279f  ; OopMap{[72]=Oop [88]=Oop [104]=Oop [80]=Oop [128]=Oop off=2746}
                                                ;*goto
                                                ; - java.util.HashMap::putVal@219 (line 639)

  0x000000000f12217a: test   %eax,-0xef02080(%rip)        # 0x0000000000220100
                                                ;   {poll}
  0x000000000f122180: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f12218a: incl   0x520(%r8)
  0x000000000f122191: mov    0x80(%rsp),%rsi
  0x000000000f122199: jmpq   0x000000000f121f58  ;*goto
                                                ; - java.util.HashMap::putVal@219 (line 639)

  0x000000000f12219e: mov    0x80(%rsp),%rax
  0x000000000f1221a6: jmpq   0x000000000f1223d6  ;*aload
                                                ; - java.util.HashMap::putVal@222 (line 652)

  0x000000000f1221ab: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1221b5: incl   0x508(%r8)
  0x000000000f1221bc: mov    0x80(%rsp),%rax
  0x000000000f1221c4: jmpq   0x000000000f1223d6  ;*goto
                                                ; - java.util.HashMap::putVal@209 (line 648)

  0x000000000f1221c9: mov    %rsi,0x88(%rsp)
  0x000000000f1221d1: mov    0x48(%rsp),%rdx
  0x000000000f1221d6: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1221e0: mov    0x8(%rdx),%edx
  0x000000000f1221e3: cmp    0x3c8(%r8),%rdx
  0x000000000f1221ea: jne    0x000000000f1221f9
  0x000000000f1221ec: addq   $0x1,0x3d0(%r8)
  0x000000000f1221f4: jmpq   0x000000000f12225f
  0x000000000f1221f9: cmp    0x3d8(%r8),%rdx
  0x000000000f122200: jne    0x000000000f12220f
  0x000000000f122202: addq   $0x1,0x3e0(%r8)
  0x000000000f12220a: jmpq   0x000000000f12225f
  0x000000000f12220f: cmpq   $0x0,0x3c8(%r8)
  0x000000000f12221a: jne    0x000000000f122233
  0x000000000f12221c: mov    %rdx,0x3c8(%r8)
  0x000000000f122223: movq   $0x1,0x3d0(%r8)
  0x000000000f12222e: jmpq   0x000000000f12225f
  0x000000000f122233: cmpq   $0x0,0x3d8(%r8)
  0x000000000f12223e: jne    0x000000000f122257
  0x000000000f122240: mov    %rdx,0x3d8(%r8)
  0x000000000f122247: movq   $0x1,0x3e0(%r8)
  0x000000000f122252: jmpq   0x000000000f12225f
  0x000000000f122257: addq   $0x1,0x3c0(%r8)
  0x000000000f12225f: mov    0x40(%rsp),%r8d
  0x000000000f122264: mov    0x58(%rsp),%rdi
  0x000000000f122269: movabs $0x0,%rsi          ;   {oop(NULL)}
  0x000000000f122273: mov    0x48(%rsp),%rdx    ;*invokevirtual newNode
                                                ; - java.util.HashMap::putVal@152 (line 641)

  0x000000000f122278: nop
  0x000000000f122279: nop
  0x000000000f12227a: nop
  0x000000000f12227b: nop
  0x000000000f12227c: nop
  0x000000000f12227d: movabs $0xffffffffffffffff,%rax
  0x000000000f122287: callq  0x000000000f0563e0  ; OopMap{[72]=Oop [88]=Oop [128]=Oop [104]=Oop [136]=Oop off=3020}
                                                ;*invokevirtual newNode
                                                ; - java.util.HashMap::putVal@152 (line 641)
                                                ;   {virtual_call}
  0x000000000f12228c: mov    0x88(%rsp),%rsi
  0x000000000f122294: mov    %rax,%r10
  0x000000000f122297: mov    %r10d,0x18(%rsi)
  0x000000000f12229b: shr    $0x9,%rsi
  0x000000000f12229f: movabs $0x2dd5000,%r8
  0x000000000f1222a9: movb   $0x0,(%rsi,%r8,1)  ;*putfield next
                                                ; - java.util.HashMap::putVal@155 (line 641)

  0x000000000f1222ae: mov    0x78(%rsp),%edi
  0x000000000f1222b2: cmp    $0x7,%edi
  0x000000000f1222b5: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1222bf: movabs $0x3f0,%r9
  0x000000000f1222c9: jl     0x000000000f1222d9
  0x000000000f1222cf: movabs $0x400,%r9
  0x000000000f1222d9: mov    (%r8,%r9,1),%rdx
  0x000000000f1222dd: lea    0x1(%rdx),%rdx
  0x000000000f1222e1: mov    %rdx,(%r8,%r9,1)
  0x000000000f1222e5: jge    0x000000000f1222f8  ;*if_icmplt
                                                ; - java.util.HashMap::putVal@162 (line 642)

  0x000000000f1222eb: mov    0x80(%rsp),%rax
  0x000000000f1222f3: jmpq   0x000000000f1223d6  ;*aload
                                                ; - java.util.HashMap::putVal@222 (line 652)

  0x000000000f1222f8: mov    0x68(%rsp),%rbx
  0x000000000f1222fd: mov    0x40(%rsp),%r9d
  0x000000000f122302: mov    0x48(%rsp),%rdx
  0x000000000f122307: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122311: mov    0x8(%rdx),%edx
  0x000000000f122314: cmp    0x418(%r8),%rdx
  0x000000000f12231b: jne    0x000000000f12232a
  0x000000000f12231d: addq   $0x1,0x420(%r8)
  0x000000000f122325: jmpq   0x000000000f122390
  0x000000000f12232a: cmp    0x428(%r8),%rdx
  0x000000000f122331: jne    0x000000000f122340
  0x000000000f122333: addq   $0x1,0x430(%r8)
  0x000000000f12233b: jmpq   0x000000000f122390
  0x000000000f122340: cmpq   $0x0,0x418(%r8)
  0x000000000f12234b: jne    0x000000000f122364
  0x000000000f12234d: mov    %rdx,0x418(%r8)
  0x000000000f122354: movq   $0x1,0x420(%r8)
  0x000000000f12235f: jmpq   0x000000000f122390
  0x000000000f122364: cmpq   $0x0,0x428(%r8)
  0x000000000f12236f: jne    0x000000000f122388
  0x000000000f122371: mov    %rdx,0x428(%r8)
  0x000000000f122378: movq   $0x1,0x430(%r8)
  0x000000000f122383: jmpq   0x000000000f122390
  0x000000000f122388: addq   $0x1,0x410(%r8)
  0x000000000f122390: mov    %rbx,%r8
  0x000000000f122393: mov    0x48(%rsp),%rdx    ;*invokevirtual treeifyBin
                                                ; - java.util.HashMap::putVal@169 (line 643)

  0x000000000f122398: nop
  0x000000000f122399: nop
  0x000000000f12239a: nop
  0x000000000f12239b: nop
  0x000000000f12239c: nop
  0x000000000f12239d: nop
  0x000000000f12239e: nop
  0x000000000f12239f: callq  0x000000000f0561a0  ; OopMap{[72]=Oop [88]=Oop [128]=Oop off=3300}
                                                ;*invokevirtual treeifyBin
                                                ; - java.util.HashMap::putVal@169 (line 643)
                                                ;   {optimized virtual_call}
  0x000000000f1223a4: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1223ae: incl   0x440(%r8)
  0x000000000f1223b5: mov    0x80(%rsp),%rax
  0x000000000f1223bd: jmpq   0x000000000f1223d6  ;*goto
                                                ; - java.util.HashMap::putVal@172 (line 643)

  0x000000000f1223c2: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1223cc: incl   0x2c0(%r8)
  0x000000000f1223d3: mov    %rsi,%rax          ;*goto
                                                ; - java.util.HashMap::putVal@101 (line 635)

  0x000000000f1223d6: cmp    $0x0,%rax
  0x000000000f1223da: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1223e4: movabs $0x538,%rdx
  0x000000000f1223ee: je     0x000000000f1223fe
  0x000000000f1223f4: movabs $0x548,%rdx
  0x000000000f1223fe: mov    (%r8,%rdx,1),%rsi
  0x000000000f122402: lea    0x1(%rsi),%rsi
  0x000000000f122406: mov    %rsi,(%r8,%rdx,1)
  0x000000000f12240a: jne    0x000000000f122470  ;*ifnull
                                                ; - java.util.HashMap::putVal@224 (line 652)

  0x000000000f122410: mov    0x48(%rsp),%rdx
  0x000000000f122415: mov    0x18(%rdx),%r8d    ;*getfield modCount
                                                ; - java.util.HashMap::putVal@261 (line 660)

  0x000000000f122419: inc    %r8d
  0x000000000f12241c: mov    %r8d,0x18(%rdx)    ;*putfield modCount
                                                ; - java.util.HashMap::putVal@266 (line 660)

  0x000000000f122420: mov    0x14(%rdx),%r8d    ;*getfield size
                                                ; - java.util.HashMap::putVal@271 (line 661)

  0x000000000f122424: inc    %r8d
  0x000000000f122427: mov    %r8d,0x14(%rdx)    ;*putfield size
                                                ; - java.util.HashMap::putVal@277 (line 661)

  0x000000000f12242b: mov    0x1c(%rdx),%esi    ;*getfield threshold
                                                ; - java.util.HashMap::putVal@281 (line 661)

  0x000000000f12242e: cmp    %esi,%r8d
  0x000000000f122431: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f12243b: movabs $0x5c8,%rsi
  0x000000000f122445: jle    0x000000000f122455
  0x000000000f12244b: movabs $0x5d8,%rsi
  0x000000000f122455: mov    (%r8,%rsi,1),%rdi
  0x000000000f122459: lea    0x1(%rdi),%rdi
  0x000000000f12245d: mov    %rdi,(%r8,%rsi,1)
  0x000000000f122461: jg     0x000000000f1225d3  ;*if_icmple
                                                ; - java.util.HashMap::putVal@284 (line 661)

  0x000000000f122467: mov    0x60(%rsp),%ecx
  0x000000000f12246b: jmpq   0x000000000f122675  ;*aload_0
                                                ; - java.util.HashMap::putVal@292 (line 663)

  0x000000000f122470: mov    0x44(%rsp),%esi
  0x000000000f122474: mov    0x48(%rsp),%rdx
  0x000000000f122479: mov    0x14(%rax),%edi    ;*getfield value
                                                ; - java.util.HashMap::putVal@229 (line 653)
                                                ; implicit exception: dispatches to 0x000000000f1227b6
  0x000000000f12247c: cmp    $0x0,%esi
  0x000000000f12247f: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122489: movabs $0x558,%rsi
  0x000000000f122493: je     0x000000000f1224a3
  0x000000000f122499: movabs $0x568,%rsi
  0x000000000f1224a3: mov    (%r8,%rsi,1),%rbx
  0x000000000f1224a7: lea    0x1(%rbx),%rbx
  0x000000000f1224ab: mov    %rbx,(%r8,%rsi,1)
  0x000000000f1224af: je     0x000000000f1224ef  ;*ifeq
                                                ; - java.util.HashMap::putVal@236 (line 654)

  0x000000000f1224b5: cmp    $0x0,%rdi
  0x000000000f1224b9: movabs $0x8589900,%r8     ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1224c3: movabs $0x578,%rsi
  0x000000000f1224cd: jne    0x000000000f1224dd
  0x000000000f1224d3: movabs $0x588,%rsi
  0x000000000f1224dd: mov    (%r8,%rsi,1),%rbx
  0x000000000f1224e1: lea    0x1(%rbx),%rbx
  0x000000000f1224e5: mov    %rbx,(%r8,%rsi,1)
  0x000000000f1224e9: jne    0x000000000f122511  ;*ifnonnull
                                                ; - java.util.HashMap::putVal@241 (line 654)

  0x000000000f1224ef: mov    0x58(%rsp),%r8
  0x000000000f1224f4: mov    %r8,%r10
  0x000000000f1224f7: mov    %r10d,0x14(%rax)
  0x000000000f1224fb: mov    %rax,%r8
  0x000000000f1224fe: shr    $0x9,%r8
  0x000000000f122502: movabs $0x2dd5000,%rsi
  0x000000000f12250c: movb   $0x0,(%r8,%rsi,1)  ;*putfield value
                                                ; - java.util.HashMap::putVal@247 (line 655)

  0x000000000f122511: mov    %rdi,0x90(%rsp)
  0x000000000f122519: mov    %rdx,%r8
  0x000000000f12251c: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122526: mov    0x8(%r8),%r8d
  0x000000000f12252a: cmp    0x5a0(%rsi),%r8
  0x000000000f122531: jne    0x000000000f122540
  0x000000000f122533: addq   $0x1,0x5a8(%rsi)
  0x000000000f12253b: jmpq   0x000000000f1225a6
  0x000000000f122540: cmp    0x5b0(%rsi),%r8
  0x000000000f122547: jne    0x000000000f122556
  0x000000000f122549: addq   $0x1,0x5b8(%rsi)
  0x000000000f122551: jmpq   0x000000000f1225a6
  0x000000000f122556: cmpq   $0x0,0x5a0(%rsi)
  0x000000000f122561: jne    0x000000000f12257a
  0x000000000f122563: mov    %r8,0x5a0(%rsi)
  0x000000000f12256a: movq   $0x1,0x5a8(%rsi)
  0x000000000f122575: jmpq   0x000000000f1225a6
  0x000000000f12257a: cmpq   $0x0,0x5b0(%rsi)
  0x000000000f122585: jne    0x000000000f12259e
  0x000000000f122587: mov    %r8,0x5b0(%rsi)
  0x000000000f12258e: movq   $0x1,0x5b8(%rsi)
  0x000000000f122599: jmpq   0x000000000f1225a6
  0x000000000f12259e: addq   $0x1,0x598(%rsi)
  0x000000000f1225a6: mov    %rax,%r8           ;*invokevirtual afterNodeAccess
                                                ; - java.util.HashMap::putVal@253 (line 656)

  0x000000000f1225a9: nop
  0x000000000f1225aa: nop
  0x000000000f1225ab: nop
  0x000000000f1225ac: nop
  0x000000000f1225ad: movabs $0xffffffffffffffff,%rax
  0x000000000f1225b7: callq  0x000000000f0563e0  ; OopMap{[144]=Oop off=3836}
                                                ;*invokevirtual afterNodeAccess
                                                ; - java.util.HashMap::putVal@253 (line 656)
                                                ;   {virtual_call}
  0x000000000f1225bc: mov    0x90(%rsp),%rax
  0x000000000f1225c4: add    $0xa0,%rsp
  0x000000000f1225cb: pop    %rbp
  0x000000000f1225cc: test   %eax,-0xef024d2(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f1225d2: retq                      ;*areturn
                                                ; - java.util.HashMap::putVal@258 (line 657)

  0x000000000f1225d3: mov    %rdx,%rsi
  0x000000000f1225d6: movabs $0x8589900,%rdi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f1225e0: mov    0x8(%rsi),%esi
  0x000000000f1225e3: cmp    0x5f0(%rdi),%rsi
  0x000000000f1225ea: jne    0x000000000f1225f9
  0x000000000f1225ec: addq   $0x1,0x5f8(%rdi)
  0x000000000f1225f4: jmpq   0x000000000f12265f
  0x000000000f1225f9: cmp    0x600(%rdi),%rsi
  0x000000000f122600: jne    0x000000000f12260f
  0x000000000f122602: addq   $0x1,0x608(%rdi)
  0x000000000f12260a: jmpq   0x000000000f12265f
  0x000000000f12260f: cmpq   $0x0,0x5f0(%rdi)
  0x000000000f12261a: jne    0x000000000f122633
  0x000000000f12261c: mov    %rsi,0x5f0(%rdi)
  0x000000000f122623: movq   $0x1,0x5f8(%rdi)
  0x000000000f12262e: jmpq   0x000000000f12265f
  0x000000000f122633: cmpq   $0x0,0x600(%rdi)
  0x000000000f12263e: jne    0x000000000f122657
  0x000000000f122640: mov    %rsi,0x600(%rdi)
  0x000000000f122647: movq   $0x1,0x608(%rdi)
  0x000000000f122652: jmpq   0x000000000f12265f
  0x000000000f122657: addq   $0x1,0x5e8(%rdi)
  0x000000000f12265f: mov    %rdx,%rsi
  0x000000000f122662: mov    %rsi,%rdx          ;*invokevirtual resize
                                                ; - java.util.HashMap::putVal@288 (line 662)

  0x000000000f122665: nop
  0x000000000f122666: nop
  0x000000000f122667: callq  0x000000000f0561a0  ; OopMap{[72]=Oop off=4012}
                                                ;*invokevirtual resize
                                                ; - java.util.HashMap::putVal@288 (line 662)
                                                ;   {optimized virtual_call}
  0x000000000f12266c: mov    0x60(%rsp),%ecx
  0x000000000f122670: mov    0x48(%rsp),%rdx
  0x000000000f122675: mov    %rdx,%r8
  0x000000000f122678: movabs $0x8589900,%rsi    ;   {metadata(method data for {method} {0x00000000083dc548} &apos;putVal&apos; &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos; in &apos;java/util/HashMap&apos;)}
  0x000000000f122682: mov    0x8(%r8),%r8d
  0x000000000f122686: cmp    0x620(%rsi),%r8
  0x000000000f12268d: jne    0x000000000f12269c
  0x000000000f12268f: addq   $0x1,0x628(%rsi)
  0x000000000f122697: jmpq   0x000000000f122702
  0x000000000f12269c: cmp    0x630(%rsi),%r8
  0x000000000f1226a3: jne    0x000000000f1226b2
  0x000000000f1226a5: addq   $0x1,0x638(%rsi)
  0x000000000f1226ad: jmpq   0x000000000f122702
  0x000000000f1226b2: cmpq   $0x0,0x620(%rsi)
  0x000000000f1226bd: jne    0x000000000f1226d6
  0x000000000f1226bf: mov    %r8,0x620(%rsi)
  0x000000000f1226c6: movq   $0x1,0x628(%rsi)
  0x000000000f1226d1: jmpq   0x000000000f122702
  0x000000000f1226d6: cmpq   $0x0,0x630(%rsi)
  0x000000000f1226e1: jne    0x000000000f1226fa
  0x000000000f1226e3: mov    %r8,0x630(%rsi)
  0x000000000f1226ea: movq   $0x1,0x638(%rsi)
  0x000000000f1226f5: jmpq   0x000000000f122702
  0x000000000f1226fa: addq   $0x1,0x618(%rsi)
  0x000000000f122702: mov    %rcx,%r8           ;*invokevirtual afterNodeInsertion
                                                ; - java.util.HashMap::putVal@295 (line 663)

  0x000000000f122705: movabs $0xffffffffffffffff,%rax
  0x000000000f12270f: callq  0x000000000f0563e0  ; OopMap{off=4180}
                                                ;*invokevirtual afterNodeInsertion
                                                ; - java.util.HashMap::putVal@295 (line 663)
                                                ;   {virtual_call}
  0x000000000f122714: movabs $0x0,%rax          ;   {oop(NULL)}
  0x000000000f12271e: add    $0xa0,%rsp
  0x000000000f122725: pop    %rbp
  0x000000000f122726: test   %eax,-0xef0262c(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f12272c: retq   
  0x000000000f12272d: mov    %rbx,0x8(%rsp)
  0x000000000f122732: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f12273a: callq  0x000000000f111820  ; OopMap{rdx=Oop [72]=Oop r9=Oop [80]=Oop rdi=Oop off=4223}
                                                ;*synchronization entry
                                                ; - java.util.HashMap::putVal@-1 (line 627)
                                                ;   {runtime_call}
  0x000000000f12273f: jmpq   0x000000000f121730
  0x000000000f122744: callq  0x000000000f10cf80  ; OopMap{rdx=Oop [72]=Oop r9=Oop [80]=Oop rdi=Oop rbx=Oop off=4233}
                                                ;*arraylength
                                                ; - java.util.HashMap::putVal@12 (line 627)
                                                ;   {runtime_call}
  0x000000000f122749: callq  0x000000000f10cf80  ; OopMap{[88]=Oop [80]=Oop [72]=Oop r8=Oop off=4238}
                                                ;*arraylength
                                                ; - java.util.HashMap::putVal@26 (line 628)
                                                ;   {runtime_call}
  0x000000000f12274e: callq  0x000000000f10cf80  ; OopMap{[88]=Oop [80]=Oop [72]=Oop rbx=Oop off=4243}
                                                ;*aaload
                                                ; - java.util.HashMap::putVal@40 (line 629)
                                                ;   {runtime_call}
  0x000000000f122753: callq  0x000000000f10cf80  ; OopMap{[88]=Oop [80]=Oop [72]=Oop rbx=Oop off=4248}
                                                ;*aaload
                                                ; - java.util.HashMap::putVal@40 (line 629)
                                                ;   {runtime_call}
  0x000000000f122758: mov    %rax,(%rsp)
  0x000000000f12275c: callq  0x000000000f10c8c0  ; OopMap{[88]=Oop [80]=Oop [72]=Oop rbx=Oop off=4257}
                                                ;*aaload
                                                ; - java.util.HashMap::putVal@40 (line 629)
                                                ;   {runtime_call}
  0x000000000f122761: mov    %r8,(%rsp)
  0x000000000f122765: callq  0x000000000f10c8c0  ; OopMap{[72]=Oop rax=Oop rbx=Oop off=4266}
                                                ;*aastore
                                                ; - java.util.HashMap::putVal@59 (line 630)
                                                ;   {runtime_call}
  0x000000000f12276a: callq  0x000000000f10cf80  ; OopMap{[72]=Oop rax=Oop off=4271}
                                                ;*aastore
                                                ; - java.util.HashMap::putVal@59 (line 630)
                                                ;   {runtime_call}
  0x000000000f12276f: mov    %rax,(%rsp)
  0x000000000f122773: callq  0x000000000f10f100  ; OopMap{[72]=Oop rax=Oop off=4280}
                                                ;*aastore
                                                ; - java.util.HashMap::putVal@59 (line 630)
                                                ;   {runtime_call}
  0x000000000f122778: callq  0x000000000f10cf80  ; OopMap{[72]=Oop rsi=Oop [88]=Oop [80]=Oop rbx=Oop off=4285}
                                                ;*getfield hash
                                                ; - java.util.HashMap::putVal@65 (line 633)
                                                ;   {runtime_call}
  0x000000000f12277d: callq  0x000000000f10cf80  ; OopMap{[72]=Oop [88]=Oop r9=Oop [80]=Oop [104]=Oop [112]=Oop r8=Oop off=4290}
                                                ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@91 (line 634)
                                                ;   {runtime_call}
  0x000000000f122782: mov    %rsi,(%rsp)
  0x000000000f122786: callq  0x000000000f10f340  ; OopMap{[72]=Oop [88]=Oop [104]=Oop [80]=Oop off=4299}
                                                ;*checkcast
                                                ; - java.util.HashMap::putVal@114 (line 637)
                                                ;   {runtime_call}
  0x000000000f12278b: callq  0x000000000f10cf80  ; OopMap{[72]=Oop [88]=Oop [104]=Oop [80]=Oop rdx=Oop off=4304}
                                                ;*invokevirtual putTreeVal
                                                ; - java.util.HashMap::putVal@123 (line 637)
                                                ;   {runtime_call}
  0x000000000f122790: callq  0x000000000f10cf80  ; OopMap{[72]=Oop [88]=Oop [104]=Oop rsi=Oop r9=Oop [80]=Oop off=4309}
                                                ;*getfield next
                                                ; - java.util.HashMap::putVal@136 (line 640)
                                                ;   {runtime_call}
  0x000000000f122795: callq  0x000000000f10cf80  ; OopMap{[72]=Oop [88]=Oop [104]=Oop r9=Oop [80]=Oop rbx=Oop [128]=Oop off=4314}
                                                ;*getfield hash
                                                ; - java.util.HashMap::putVal@177 (line 646)
                                                ;   {runtime_call}
  0x000000000f12279a: callq  0x000000000f10cf80  ; OopMap{[72]=Oop [88]=Oop [104]=Oop r9=Oop [80]=Oop [128]=Oop rdx=Oop off=4319}
                                                ;*invokevirtual equals
                                                ; - java.util.HashMap::putVal@203 (line 647)
                                                ;   {runtime_call}
  0x000000000f12279f: mov    %r8,0x8(%rsp)
  0x000000000f1227a4: movq   $0xdb,(%rsp)
  0x000000000f1227ac: callq  0x000000000f111820  ; OopMap{[72]=Oop [88]=Oop [104]=Oop [80]=Oop [128]=Oop off=4337}
                                                ;*goto
                                                ; - java.util.HashMap::putVal@219 (line 639)
                                                ;   {runtime_call}
  0x000000000f1227b1: jmpq   0x000000000f12217a
  0x000000000f1227b6: callq  0x000000000f10cf80  ; OopMap{rdx=Oop [72]=Oop [88]=Oop rax=Oop off=4347}
                                                ;*getfield value
                                                ; - java.util.HashMap::putVal@229 (line 653)
                                                ;   {runtime_call}
  0x000000000f1227bb: nop
  0x000000000f1227bc: nop
  0x000000000f1227bd: mov    0x2a8(%r15),%rax
  0x000000000f1227c4: movabs $0x0,%r10
  0x000000000f1227ce: mov    %r10,0x2a8(%r15)
  0x000000000f1227d5: movabs $0x0,%r10
  0x000000000f1227df: mov    %r10,0x2b0(%r15)
  0x000000000f1227e6: add    $0xa0,%rsp
  0x000000000f1227ed: pop    %rbp
  0x000000000f1227ee: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1227f3: hlt    
  0x000000000f1227f4: hlt    
  0x000000000f1227f5: hlt    
  0x000000000f1227f6: hlt    
  0x000000000f1227f7: hlt    
  0x000000000f1227f8: hlt    
  0x000000000f1227f9: hlt    
  0x000000000f1227fa: hlt    
  0x000000000f1227fb: hlt    
  0x000000000f1227fc: hlt    
  0x000000000f1227fd: hlt    
  0x000000000f1227fe: hlt    
  0x000000000f1227ff: hlt    
[Stub Code]
  0x000000000f122800: nop                       ;   {no_reloc}
  0x000000000f122801: nop
  0x000000000f122802: nop
  0x000000000f122803: nop
  0x000000000f122804: nop
  0x000000000f122805: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12280f: jmpq   0x000000000f12280f  ;   {runtime_call}
  0x000000000f122814: nop
  0x000000000f122815: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12281f: jmpq   0x000000000f12281f  ;   {runtime_call}
  0x000000000f122824: nop
  0x000000000f122825: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12282f: jmpq   0x000000000f12282f  ;   {runtime_call}
  0x000000000f122834: nop
  0x000000000f122835: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12283f: jmpq   0x000000000f12283f  ;   {runtime_call}
  0x000000000f122844: nop
  0x000000000f122845: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12284f: jmpq   0x000000000f12284f  ;   {runtime_call}
  0x000000000f122854: nop
  0x000000000f122855: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12285f: jmpq   0x000000000f12285f  ;   {runtime_call}
  0x000000000f122864: nop
  0x000000000f122865: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12286f: jmpq   0x000000000f12286f  ;   {runtime_call}
  0x000000000f122874: nop
  0x000000000f122875: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12287f: jmpq   0x000000000f12287f  ;   {runtime_call}
  0x000000000f122884: nop
  0x000000000f122885: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12288f: jmpq   0x000000000f12288f  ;   {runtime_call}
  0x000000000f122894: nop
  0x000000000f122895: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12289f: jmpq   0x000000000f12289f  ;   {runtime_call}
[Exception Handler]
  0x000000000f1228a4: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f1228a9: mov    %rsp,-0x28(%rsp)
  0x000000000f1228ae: sub    $0x80,%rsp
  0x000000000f1228b5: mov    %rax,0x78(%rsp)
  0x000000000f1228ba: mov    %rcx,0x70(%rsp)
  0x000000000f1228bf: mov    %rdx,0x68(%rsp)
  0x000000000f1228c4: mov    %rbx,0x60(%rsp)
  0x000000000f1228c9: mov    %rbp,0x50(%rsp)
  0x000000000f1228ce: mov    %rsi,0x48(%rsp)
  0x000000000f1228d3: mov    %rdi,0x40(%rsp)
  0x000000000f1228d8: mov    %r8,0x38(%rsp)
  0x000000000f1228dd: mov    %r9,0x30(%rsp)
  0x000000000f1228e2: mov    %r10,0x28(%rsp)
  0x000000000f1228e7: mov    %r11,0x20(%rsp)
  0x000000000f1228ec: mov    %r12,0x18(%rsp)
  0x000000000f1228f1: mov    %r13,0x10(%rsp)
  0x000000000f1228f6: mov    %r14,0x8(%rsp)
  0x000000000f1228fb: mov    %r15,(%rsp)
  0x000000000f1228ff: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f122909: movabs $0xf1228a9,%rdx    ;   {internal_word}
  0x000000000f122913: mov    %rsp,%r8
  0x000000000f122916: and    $0xfffffffffffffff0,%rsp
  0x000000000f12291a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f12291f: hlt    
[Deopt Handler Code]
  0x000000000f122920: movabs $0xf122920,%r10    ;   {section_word}
  0x000000000f12292a: push   %r10
  0x000000000f12292c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f122931: hlt    
  0x000000000f122932: hlt    
  0x000000000f122933: hlt    
  0x000000000f122934: hlt    
  0x000000000f122935: hlt    
  0x000000000f122936: hlt    
  0x000000000f122937: hlt    
<nmethod compile_id='18' compiler='C1' level='3' entry='0x000000000f1216c0' size='8016' address='0x000000000f121450' relocation_offset='288' insts_offset='624' stub_offset='5040' scopes_data_offset='5360' scopes_pcs_offset='6368' dependencies_offset='7904' nul_chk_table_offset='7912' method='java/util/HashMap putVal (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;' bytes='300' count='519' backedge_count='69' iicount='519' stamp='0.349'/>
Decoding compiled method 0x000000000f1210d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  # this:     rdx:rdx   = &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  # parm0:    r8        = int
  # parm1:    r9        = int
  #           [sp+0x50]  (sp of caller)
  0x000000000f121220: mov    0x8(%rdx),%r10d
  0x000000000f121224: cmp    %rax,%r10
  0x000000000f121227: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f12122d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f121238: data16 data16 xchg %ax,%ax
  0x000000000f12123c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f121240: mov    %eax,-0x6000(%rsp)
  0x000000000f121247: push   %rbp
  0x000000000f121248: sub    $0x40,%rsp
  0x000000000f12124c: movabs $0x86e2f78,%rax
  0x000000000f121256: mov    0x8(%rax),%esi
  0x000000000f121259: add    $0x8,%esi
  0x000000000f12125c: mov    %esi,0x8(%rax)
  0x000000000f12125f: movabs $0x86e2c20,%rax    ;   {metadata({method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f121269: and    $0x3ff8,%esi
  0x000000000f12126f: cmp    $0x0,%esi
  0x000000000f121272: je     0x000000000f1212af  ;*iload_1
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@0 (line 8)

  0x000000000f121278: add    %r9d,%r8d
  0x000000000f12127b: vmovsd 0x10(%rdx),%xmm0
  0x000000000f121280: vmovq  %xmm0,%rax         ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@6 (line 9)

  0x000000000f121285: movslq %r8d,%rsi
  0x000000000f121288: add    %rsi,%rax
  0x000000000f12128b: mov    %rax,0x30(%rsp)
  0x000000000f121290: vmovsd 0x30(%rsp),%xmm0
  0x000000000f121296: vmovsd %xmm0,0x10(%rdx)
  0x000000000f12129b: lock addl $0x0,(%rsp)     ;*putfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@12 (line 9)

  0x000000000f1212a0: mov    %r8,%rax
  0x000000000f1212a3: add    $0x40,%rsp
  0x000000000f1212a7: pop    %rbp
  0x000000000f1212a8: test   %eax,-0xef011ae(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f1212ae: retq   
  0x000000000f1212af: mov    %rax,0x8(%rsp)
  0x000000000f1212b4: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1212bc: callq  0x000000000f111820  ; OopMap{rdx=Oop off=161}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@-1 (line 8)
                                                ;   {runtime_call}
  0x000000000f1212c1: jmp    0x000000000f121278
  0x000000000f1212c3: nop
  0x000000000f1212c4: nop
  0x000000000f1212c5: mov    0x2a8(%r15),%rax
  0x000000000f1212cc: movabs $0x0,%r10
  0x000000000f1212d6: mov    %r10,0x2a8(%r15)
  0x000000000f1212dd: movabs $0x0,%r10
  0x000000000f1212e7: mov    %r10,0x2b0(%r15)
  0x000000000f1212ee: add    $0x40,%rsp
  0x000000000f1212f2: pop    %rbp
  0x000000000f1212f3: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f1212f8: hlt    
  0x000000000f1212f9: hlt    
  0x000000000f1212fa: hlt    
  0x000000000f1212fb: hlt    
  0x000000000f1212fc: hlt    
  0x000000000f1212fd: hlt    
  0x000000000f1212fe: hlt    
  0x000000000f1212ff: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f121300: callq  0x000000000f10efa0  ;   {no_reloc}
  0x000000000f121305: mov    %rsp,-0x28(%rsp)
  0x000000000f12130a: sub    $0x80,%rsp
  0x000000000f121311: mov    %rax,0x78(%rsp)
  0x000000000f121316: mov    %rcx,0x70(%rsp)
  0x000000000f12131b: mov    %rdx,0x68(%rsp)
  0x000000000f121320: mov    %rbx,0x60(%rsp)
  0x000000000f121325: mov    %rbp,0x50(%rsp)
  0x000000000f12132a: mov    %rsi,0x48(%rsp)
  0x000000000f12132f: mov    %rdi,0x40(%rsp)
  0x000000000f121334: mov    %r8,0x38(%rsp)
  0x000000000f121339: mov    %r9,0x30(%rsp)
  0x000000000f12133e: mov    %r10,0x28(%rsp)
  0x000000000f121343: mov    %r11,0x20(%rsp)
  0x000000000f121348: mov    %r12,0x18(%rsp)
  0x000000000f12134d: mov    %r13,0x10(%rsp)
  0x000000000f121352: mov    %r14,0x8(%rsp)
  0x000000000f121357: mov    %r15,(%rsp)
  0x000000000f12135b: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f121365: movabs $0xf121305,%rdx    ;   {internal_word}
  0x000000000f12136f: mov    %rsp,%r8
  0x000000000f121372: and    $0xfffffffffffffff0,%rsp
  0x000000000f121376: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f12137b: hlt    
[Deopt Handler Code]
  0x000000000f12137c: movabs $0xf12137c,%r10    ;   {section_word}
  0x000000000f121386: push   %r10
  0x000000000f121388: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f12138d: hlt    
  0x000000000f12138e: hlt    
  0x000000000f12138f: hlt    
<nmethod compile_id='23' compiler='C1' level='2' entry='0x000000000f121220' size='864' address='0x000000000f1210d0' relocation_offset='288' insts_offset='336' stub_offset='560' scopes_data_offset='720' scopes_pcs_offset='760' dependencies_offset='856' oops_offset='704' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='144384' iicount='144384' stamp='0.353'/>
<writer thread='6336'/>
<task_queued compile_id='24' compile_kind='osr' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='144384' iicount='1' osr_bci='12' level='3' stamp='0.353' comment='tiered' hot_count='144384'/>
<writer thread='12324'/>
Decoding compiled method 0x000000000f11f650:
Code:
[Entry Point]
[Constants]
  # {method} {0x000000000834fab8} &apos;append&apos; &apos;(C)Ljava/lang/StringBuffer;&apos; in &apos;java/lang/StringBuffer&apos;
  # this:     rdx:rdx   = &apos;java/lang/StringBuffer&apos;
  # parm0:    r8        = char
  #           [sp+0x90]  (sp of caller)
  0x000000000f11f7a0: mov    0x8(%rdx),%r10d
  0x000000000f11f7a4: cmp    %r10,%rax
  0x000000000f11f7a7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11f7ad: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f11f7b0: mov    %eax,-0x6000(%rsp)
  0x000000000f11f7b7: push   %rbp
  0x000000000f11f7b8: sub    $0x80,%rsp
  0x000000000f11f7bf: mov    %r8d,0x30(%rsp)
  0x000000000f11f7c4: mov    %rdx,%rbp
  0x000000000f11f7c7: mov    (%rdx),%rax
  0x000000000f11f7ca: mov    %rax,%r10
  0x000000000f11f7cd: and    $0x7,%r10
  0x000000000f11f7d1: cmp    $0x5,%r10
  0x000000000f11f7d5: jne    0x000000000f11fa6e
  0x000000000f11f7db: mov    $0x1e01d5e0,%r11d  ;   {metadata(&apos;java/lang/StringBuffer&apos;)}
  0x000000000f11f7e1: movabs $0x0,%r10
  0x000000000f11f7eb: add    %r11,%r10
  0x000000000f11f7ee: mov    0xa8(%r10),%r10
  0x000000000f11f7f5: mov    %r10,%r11
  0x000000000f11f7f8: or     %r15,%r11
  0x000000000f11f7fb: mov    %r11,%r8
  0x000000000f11f7fe: xor    %rax,%r8
  0x000000000f11f801: test   $0xffffffffffffff87,%r8
  0x000000000f11f808: jne    0x000000000f11fad1  ;*synchronization entry
                                                ; - java.lang.StringBuffer::append@-1 (line 382)

  0x000000000f11f80e: mov    0x10(%rbp),%r9d    ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f812: mov    %r12d,0x14(%rbp)   ;*putfield toStringCache
                                                ; - java.lang.StringBuffer::append@2 (line 382)

  0x000000000f11f816: mov    0xc(%r9),%r8d      ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ; implicit exception: dispatches to 0x000000000f11fbed
  0x000000000f11f81a: mov    0xc(%rbp),%r10d    ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@2 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f81e: mov    %r10d,%ebx
  0x000000000f11f821: sub    %r8d,%ebx
  0x000000000f11f824: mov    %r9,%rcx           ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f827: inc    %ebx
  0x000000000f11f829: mov    %r10d,%r11d
  0x000000000f11f82c: inc    %r11d              ;*iadd
                                                ; - java.lang.AbstractStringBuilder::append@6 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f82f: test   %ebx,%ebx
  0x000000000f11f831: jg     0x000000000f11f87e  ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@16 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f833: mov    %r11d,0xc(%rbp)    ;*putfield count
                                                ; - java.lang.AbstractStringBuilder::append@22 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f837: test   %rcx,%rcx
  0x000000000f11f83a: je     0x000000000f11fa41
  0x000000000f11f840: mov    0xc(%rcx),%r11d
  0x000000000f11f844: cmp    %r11d,%r10d
  0x000000000f11f847: jae    0x000000000f11fa51
  0x000000000f11f84d: mov    0x30(%rsp),%r8d
  0x000000000f11f852: mov    %r8w,0x10(%rcx,%r10,2)
  0x000000000f11f858: mov    $0x7,%r10d
  0x000000000f11f85e: and    0x0(%rbp),%r10
  0x000000000f11f862: cmp    $0x5,%r10
  0x000000000f11f866: jne    0x000000000f11fafc  ;*areturn
                                                ; - java.lang.StringBuffer::append@12 (line 384)

  0x000000000f11f86c: mov    %rbp,%rax
  0x000000000f11f86f: add    $0x80,%rsp
  0x000000000f11f876: pop    %rbp
  0x000000000f11f877: test   %eax,-0xeeff87d(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f11f87d: retq   
  0x000000000f11f87e: mov    %r8d,%ebx
  0x000000000f11f881: shl    %ebx               ;*imul
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@6 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f883: mov    %ebx,%edi
  0x000000000f11f885: sub    %r10d,%edi
  0x000000000f11f888: inc    %edi
  0x000000000f11f88a: test   %edi,%edi
  0x000000000f11f88c: jge    0x000000000f11f994  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@13 (line 130)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f892: test   %r11d,%r11d
  0x000000000f11f895: jge    0x000000000f11f8a6  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f897: test   %r11d,%r11d
  0x000000000f11f89a: jl     0x000000000f11fbe0  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@23 (line 133)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f8a0: mov    $0x7fffffff,%r11d  ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@37 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f8a6: movslq %r11d,%r10
  0x000000000f11f8a9: shl    %r10
  0x000000000f11f8ac: add    $0x17,%r10
  0x000000000f11f8b0: mov    %r10,%rdi
  0x000000000f11f8b3: and    $0xfffffffffffffff8,%rdi
  0x000000000f11f8b7: cmp    $0x80000,%r11d
  0x000000000f11f8be: ja     0x000000000f11f9ed
  0x000000000f11f8c4: mov    0x60(%r15),%rbx
  0x000000000f11f8c8: mov    %rbx,%rdx
  0x000000000f11f8cb: add    %rdi,%rdx
  0x000000000f11f8ce: cmp    0x70(%r15),%rdx
  0x000000000f11f8d2: jae    0x000000000f11f9ed
  0x000000000f11f8d8: mov    %rdx,0x60(%r15)
  0x000000000f11f8dc: prefetchnta 0xc0(%rdx)
  0x000000000f11f8e3: movq   $0x1,(%rbx)
  0x000000000f11f8ea: prefetchnta 0x100(%rdx)
  0x000000000f11f8f1: movl   $0x1e010208,0x8(%rbx)  ;   {metadata({type array char})}
  0x000000000f11f8f8: mov    %r11d,0xc(%rbx)
  0x000000000f11f8fc: prefetchnta 0x140(%rdx)
  0x000000000f11f903: prefetchnta 0x180(%rdx)   ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f90a: cmp    %r11d,%r8d
  0x000000000f11f90d: mov    %r11d,%esi
  0x000000000f11f910: cmovl  %r8d,%esi          ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3334)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f914: mov    %rbx,%r13
  0x000000000f11f917: add    $0x10,%r13         ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f91b: mov    %r9,%rdx           ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f91e: shr    $0x3,%r10
  0x000000000f11f922: mov    %r10,%rcx
  0x000000000f11f925: add    $0xfffffffffffffffe,%rcx
  0x000000000f11f929: cmp    %esi,%r8d
  0x000000000f11f92c: jb     0x000000000f11fba4
  0x000000000f11f932: cmp    %esi,%r11d
  0x000000000f11f935: jb     0x000000000f11fba4
  0x000000000f11f93b: test   %esi,%esi
  0x000000000f11f93d: jle    0x000000000f11fbce
  0x000000000f11f943: lea    0x10(%r9),%r9
  0x000000000f11f947: cmp    %r11d,%esi
  0x000000000f11f94a: jl     0x000000000f11f9a7
  0x000000000f11f94c: add    $0xfffffffffffffff0,%rdi
  0x000000000f11f950: shr    $0x3,%rdi
  0x000000000f11f954: mov    %r9,%rcx
  0x000000000f11f957: mov    %r13,%rdx
  0x000000000f11f95a: mov    %rdi,%r8
  0x000000000f11f95d: movabs $0xf062ac0,%r10
  0x000000000f11f967: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f96a: mov    0xc(%rbp),%r10d    ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@16 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f96e: mov    %rbx,%r11
  0x000000000f11f971: mov    %r11d,0x10(%rbp)   ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@46 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f975: mov    %r10d,%r11d
  0x000000000f11f978: inc    %r11d              ;*iadd
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f97b: mov    %rbp,%r8
  0x000000000f11f97e: shr    $0x9,%r8
  0x000000000f11f982: mov    $0x2dd5000,%r9d
  0x000000000f11f988: mov    %r12b,(%r9,%r8,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@46 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f98c: mov    %rbx,%rcx
  0x000000000f11f98f: jmpq   0x000000000f11f833
  0x000000000f11f994: add    $0x2,%ebx          ;*iadd
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@8 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f997: test   %ebx,%ebx
  0x000000000f11f999: jl     0x000000000f11f897  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f99f: mov    %ebx,%r11d
  0x000000000f11f9a2: jmpq   0x000000000f11f8a6
  0x000000000f11f9a7: movslq %esi,%r8
  0x000000000f11f9aa: mov    %r8,%r11
  0x000000000f11f9ad: shl    %r11
  0x000000000f11f9b0: add    $0x10,%r11
  0x000000000f11f9b4: mov    %r11,%rcx
  0x000000000f11f9b7: and    $0xfffffffffffffff9,%rcx
  0x000000000f11f9bb: mov    %rbx,%rdi
  0x000000000f11f9be: add    %rcx,%rdi
  0x000000000f11f9c1: shr    $0x3,%r11
  0x000000000f11f9c5: sub    %r11,%r10
  0x000000000f11f9c8: mov    %r10,%rcx
  0x000000000f11f9cb: xor    %rax,%rax
  0x000000000f11f9ce: shl    $0x3,%rcx
  0x000000000f11f9d2: rep rex.W stos %al,%es:(%rdi)
  0x000000000f11f9d5: mov    %r9,%rcx
  0x000000000f11f9d8: mov    %r13,%rdx
  0x000000000f11f9db: movabs $0xf0627c0,%r10
  0x000000000f11f9e5: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11f9e8: jmpq   0x000000000f11f96a
  0x000000000f11f9ed: mov    %r8d,0x60(%rsp)
  0x000000000f11f9f2: mov    %r9d,0x34(%rsp)
  0x000000000f11f9f7: mov    %rdi,0x38(%rsp)
  0x000000000f11f9fc: mov    %r10,0x28(%rsp)
  0x000000000f11fa01: mov    %r11d,0x20(%rsp)   ;*synchronization entry
                                                ; - java.util.Arrays::copyOf@-1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fa06: movabs $0x1e010208,%rdx   ;   {metadata({type array char})}
  0x000000000f11fa10: mov    %r11d,%r8d
  0x000000000f11fa13: mov    %rcx,0x58(%rsp)
  0x000000000f11fa18: data16 xchg %ax,%ax
  0x000000000f11fa1b: callq  0x000000000f1156e0  ; OopMap{rbp=Oop [52]=NarrowOop [88]=Oop off=640}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fa20: mov    0x20(%rsp),%r11d
  0x000000000f11fa25: mov    0x28(%rsp),%r10
  0x000000000f11fa2a: mov    0x38(%rsp),%rdi
  0x000000000f11fa2f: mov    0x34(%rsp),%r9d
  0x000000000f11fa34: mov    0x60(%rsp),%r8d
  0x000000000f11fa39: mov    %rax,%rbx
  0x000000000f11fa3c: jmpq   0x000000000f11f90a
  0x000000000f11fa41: mov    $0xfffffff6,%edx
  0x000000000f11fa46: mov    %r10d,0x24(%rsp)
  0x000000000f11fa4b: callq  0x000000000f0557a0  ; OopMap{rbp=Oop off=688}
                                                ;*castore
                                                ; - java.lang.AbstractStringBuilder::append@26 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fa50: int3   
  0x000000000f11fa51: mov    $0xffffffe4,%edx
  0x000000000f11fa56: mov    %rcx,0x38(%rsp)
  0x000000000f11fa5b: mov    %r10d,0x34(%rsp)
  0x000000000f11fa60: data16 xchg %ax,%ax
  0x000000000f11fa63: callq  0x000000000f0557a0  ; OopMap{rbp=Oop [56]=Oop off=712}
                                                ;*castore
                                                ; - java.lang.AbstractStringBuilder::append@26 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fa68: int3                      ;*castore
                                                ; - java.lang.AbstractStringBuilder::append@26 (line 623)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fa69: lock cmpxchg %r10,(%rdx)
  0x000000000f11fa6e: lea    0x70(%rsp),%rbx
  0x000000000f11fa73: mov    (%rdx),%rax
  0x000000000f11fa76: test   $0x2,%rax
  0x000000000f11fa7c: jne    0x000000000f11faa2
  0x000000000f11fa7e: or     $0x1,%rax
  0x000000000f11fa82: mov    %rax,(%rbx)
  0x000000000f11fa85: lock cmpxchg %rbx,(%rdx)
  0x000000000f11fa8a: je     0x000000000f11fabb
  0x000000000f11fa90: sub    %rsp,%rax
  0x000000000f11fa93: and    $0xfffffffffffff007,%rax
  0x000000000f11fa9a: mov    %rax,(%rbx)
  0x000000000f11fa9d: jmpq   0x000000000f11fabb
  0x000000000f11faa2: movq   $0x3,(%rbx)
  0x000000000f11faa9: mov    %rax,%rbx
  0x000000000f11faac: mov    0x16(%rbx),%rax
  0x000000000f11fab0: test   %rax,%rax
  0x000000000f11fab3: jne    0x000000000f11fabb
  0x000000000f11fab5: lock cmpxchg %r15,0x16(%rbx)
  0x000000000f11fabb: je     0x000000000f11f80e
  0x000000000f11fac1: lea    0x70(%rsp),%r8
  0x000000000f11fac6: nop
  0x000000000f11fac7: callq  0x000000000f11eee0  ; OopMap{rbp=Oop off=812}
                                                ;*synchronization entry
                                                ; - java.lang.StringBuffer::append@-1 (line 382)
                                                ;   {runtime_call}
  0x000000000f11facc: jmpq   0x000000000f11f80e
  0x000000000f11fad1: test   $0x7,%r8
  0x000000000f11fad8: jne    0x000000000f11fa69
  0x000000000f11fada: test   $0x300,%r8
  0x000000000f11fae1: jne    0x000000000f11faf0
  0x000000000f11fae3: and    $0x37f,%rax
  0x000000000f11faea: mov    %rax,%r11
  0x000000000f11faed: or     %r15,%r11
  0x000000000f11faf0: lock cmpxchg %r11,(%rdx)
  0x000000000f11faf5: jne    0x000000000f11fac1
  0x000000000f11faf7: jmpq   0x000000000f11f80e
  0x000000000f11fafc: lea    0x70(%rsp),%rax
  0x000000000f11fb01: cmpq   $0x0,(%rax)
  0x000000000f11fb08: je     0x000000000f11fb84
  0x000000000f11fb0e: mov    0x0(%rbp),%r10
  0x000000000f11fb12: test   $0x2,%r10
  0x000000000f11fb19: je     0x000000000f11fb7b
  0x000000000f11fb1b: mov    0x16(%r10),%rax
  0x000000000f11fb1f: xor    %r15,%rax
  0x000000000f11fb22: or     0x26(%r10),%rax
  0x000000000f11fb26: jne    0x000000000f11fb84
  0x000000000f11fb28: mov    0x36(%r10),%rax
  0x000000000f11fb2c: or     0x3e(%r10),%rax
  0x000000000f11fb30: jne    0x000000000f11fb3c
  0x000000000f11fb32: movq   $0x0,0x16(%r10)
  0x000000000f11fb3a: jmp    0x000000000f11fb84
  0x000000000f11fb3c: cmpq   $0x0,0x46(%r10)
  0x000000000f11fb44: je     0x000000000f11fb6f
  0x000000000f11fb46: movq   $0x0,0x16(%r10)
  0x000000000f11fb4e: lock addl $0x0,(%rsp)
  0x000000000f11fb53: cmpq   $0x0,0x46(%r10)
  0x000000000f11fb5b: jne    0x000000000f11fb74
  0x000000000f11fb5d: movabs $0x0,%rax
  0x000000000f11fb67: lock cmpxchg %r15,0x16(%r10)
  0x000000000f11fb6d: jne    0x000000000f11fb74
  0x000000000f11fb6f: or     $0x1,%eax
  0x000000000f11fb72: jmp    0x000000000f11fb84
  0x000000000f11fb74: test   $0x0,%eax
  0x000000000f11fb79: jmp    0x000000000f11fb84
  0x000000000f11fb7b: mov    (%rax),%r10
  0x000000000f11fb7e: lock cmpxchg %r10,0x0(%rbp)
  0x000000000f11fb84: je     0x000000000f11f86c
  0x000000000f11fb8a: mov    %rbp,%rcx
  0x000000000f11fb8d: lea    0x70(%rsp),%rdx    ;*synchronization entry
                                                ; - java.lang.StringBuffer::append@-1 (line 382)

  0x000000000f11fb92: movabs $0x2368d30,%r10
  0x000000000f11fb9c: callq  *%r10              ;*areturn
                                                ; - java.lang.StringBuffer::append@12 (line 384)

  0x000000000f11fb9f: jmpq   0x000000000f11f86c
  0x000000000f11fba4: mov    %r13,%rdi
  0x000000000f11fba7: xor    %rax,%rax
  0x000000000f11fbaa: shl    $0x3,%rcx
  0x000000000f11fbae: rep rex.W stos %al,%es:(%rdi)
  0x000000000f11fbb1: xor    %r8d,%r8d
  0x000000000f11fbb4: mov    %rbx,%r9
  0x000000000f11fbb7: xor    %edi,%edi
  0x000000000f11fbb9: mov    %rbx,0x48(%rsp)
  0x000000000f11fbbe: nop
  0x000000000f11fbbf: callq  0x000000000f1158e0  ; OopMap{rbp=Oop [72]=Oop off=1060}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fbc4: mov    0x48(%rsp),%rbx
  0x000000000f11fbc9: jmpq   0x000000000f11f96a
  0x000000000f11fbce: mov    %r13,%rdi
  0x000000000f11fbd1: xor    %rax,%rax
  0x000000000f11fbd4: shl    $0x3,%rcx
  0x000000000f11fbd8: rep rex.W stos %al,%es:(%rdi)  ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fbdb: jmpq   0x000000000f11f96a  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@13 (line 130)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fbe0: mov    $0x8d,%edx
  0x000000000f11fbe5: xchg   %ax,%ax
  0x000000000f11fbe7: callq  0x000000000f0557a0  ; OopMap{rbp=Oop off=1100}
                                                ;*new  ; - java.lang.AbstractStringBuilder::expandCapacity@26 (line 134)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fbec: int3   
  0x000000000f11fbed: mov    $0xfffffff6,%edx
  0x000000000f11fbf2: nop
  0x000000000f11fbf3: callq  0x000000000f0557a0  ; OopMap{rbp=Oop off=1112}
                                                ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)
                                                ;   {runtime_call}
  0x000000000f11fbf8: int3                      ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fbf9: mov    %rax,%rbx
  0x000000000f11fbfc: jmp    0x000000000f11fc01  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fbfe: mov    %rax,%rbx          ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fc01: mov    $0x7,%r10d
  0x000000000f11fc07: and    0x0(%rbp),%r10
  0x000000000f11fc0b: cmp    $0x5,%r10
  0x000000000f11fc0f: jne    0x000000000f11fc21
  0x000000000f11fc11: mov    %rbx,%rdx
  0x000000000f11fc14: add    $0x80,%rsp
  0x000000000f11fc1b: pop    %rbp
  0x000000000f11fc1c: jmpq   0x000000000f115a60  ;   {runtime_call}
  0x000000000f11fc21: lea    0x70(%rsp),%rax
  0x000000000f11fc26: cmpq   $0x0,(%rax)
  0x000000000f11fc2d: je     0x000000000f11fca9
  0x000000000f11fc33: mov    0x0(%rbp),%r10
  0x000000000f11fc37: test   $0x2,%r10
  0x000000000f11fc3e: je     0x000000000f11fca0
  0x000000000f11fc40: mov    0x16(%r10),%rax
  0x000000000f11fc44: xor    %r15,%rax
  0x000000000f11fc47: or     0x26(%r10),%rax
  0x000000000f11fc4b: jne    0x000000000f11fca9
  0x000000000f11fc4d: mov    0x36(%r10),%rax
  0x000000000f11fc51: or     0x3e(%r10),%rax
  0x000000000f11fc55: jne    0x000000000f11fc61
  0x000000000f11fc57: movq   $0x0,0x16(%r10)
  0x000000000f11fc5f: jmp    0x000000000f11fca9
  0x000000000f11fc61: cmpq   $0x0,0x46(%r10)
  0x000000000f11fc69: je     0x000000000f11fc94
  0x000000000f11fc6b: movq   $0x0,0x16(%r10)
  0x000000000f11fc73: lock addl $0x0,(%rsp)
  0x000000000f11fc78: cmpq   $0x0,0x46(%r10)
  0x000000000f11fc80: jne    0x000000000f11fc99
  0x000000000f11fc82: movabs $0x0,%rax
  0x000000000f11fc8c: lock cmpxchg %r15,0x16(%r10)
  0x000000000f11fc92: jne    0x000000000f11fc99
  0x000000000f11fc94: or     $0x1,%eax
  0x000000000f11fc97: jmp    0x000000000f11fca9
  0x000000000f11fc99: test   $0x0,%eax
  0x000000000f11fc9e: jmp    0x000000000f11fca9
  0x000000000f11fca0: mov    (%rax),%r10
  0x000000000f11fca3: lock cmpxchg %r10,0x0(%rbp)
  0x000000000f11fca9: je     0x000000000f11fc11
  0x000000000f11fcaf: mov    %rbp,%rcx
  0x000000000f11fcb2: lea    0x70(%rsp),%rdx    ;*synchronization entry
                                                ; - java.lang.StringBuffer::append@-1 (line 382)

  0x000000000f11fcb7: movabs $0x2368d30,%r10
  0x000000000f11fcc1: callq  *%r10
  0x000000000f11fcc4: jmpq   0x000000000f11fc11  ;*iload_2
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@18 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; - java.lang.StringBuffer::append@7 (line 383)

  0x000000000f11fcc9: hlt    
  0x000000000f11fcca: hlt    
  0x000000000f11fccb: hlt    
  0x000000000f11fccc: hlt    
  0x000000000f11fccd: hlt    
  0x000000000f11fcce: hlt    
  0x000000000f11fccf: hlt    
  0x000000000f11fcd0: hlt    
  0x000000000f11fcd1: hlt    
  0x000000000f11fcd2: hlt    
  0x000000000f11fcd3: hlt    
  0x000000000f11fcd4: hlt    
  0x000000000f11fcd5: hlt    
  0x000000000f11fcd6: hlt    
  0x000000000f11fcd7: hlt    
  0x000000000f11fcd8: hlt    
  0x000000000f11fcd9: hlt    
  0x000000000f11fcda: hlt    
  0x000000000f11fcdb: hlt    
  0x000000000f11fcdc: hlt    
  0x000000000f11fcdd: hlt    
  0x000000000f11fcde: hlt    
  0x000000000f11fcdf: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f11fce0: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f11fce5: callq  0x000000000f11fcea
  0x000000000f11fcea: subq   $0x5,(%rsp)
  0x000000000f11fcef: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f11fcf4: hlt    
  0x000000000f11fcf5: hlt    
  0x000000000f11fcf6: hlt    
  0x000000000f11fcf7: hlt    
<nmethod compile_id='20' compiler='C2' level='4' entry='0x000000000f11f7a0' size='2920' address='0x000000000f11f650' relocation_offset='288' insts_offset='336' stub_offset='1680' scopes_data_offset='1760' scopes_pcs_offset='2096' dependencies_offset='2848' handler_table_offset='2856' nul_chk_table_offset='2904' method='java/lang/StringBuffer append (C)Ljava/lang/StringBuffer;' bytes='13' count='19560' iicount='19560' stamp='0.369'/>
<writer thread='15144'/>
Decoding compiled method 0x000000000f120990:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000008353700} &apos;ensureCapacityInternal&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;
  # this:     rdx:rdx   = &apos;java/lang/AbstractStringBuilder&apos;
  # parm0:    r8        = int
  #           [sp+0x70]  (sp of caller)
  0x000000000f120ae0: mov    0x8(%rdx),%r10d
  0x000000000f120ae4: cmp    %r10,%rax
  0x000000000f120ae7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f120aed: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f120af0: mov    %eax,-0x6000(%rsp)
  0x000000000f120af7: push   %rbp
  0x000000000f120af8: sub    $0x60,%rsp         ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@-1 (line 120)

  0x000000000f120afc: mov    %rdx,0x40(%rsp)
  0x000000000f120b01: mov    0x10(%rdx),%edi    ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)

  0x000000000f120b04: mov    0xc(%rdi),%ebp     ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; implicit exception: dispatches to 0x000000000f120d29
  0x000000000f120b07: mov    %r8d,%r10d
  0x000000000f120b0a: sub    %ebp,%r10d
  0x000000000f120b0d: test   %r10d,%r10d
  0x000000000f120b10: jg     0x000000000f120b1e  ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@-1 (line 120)

  0x000000000f120b12: add    $0x60,%rsp
  0x000000000f120b16: pop    %rbp
  0x000000000f120b17: test   %eax,-0xef00b1d(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f120b1d: retq   
  0x000000000f120b1e: mov    %ebp,%r11d
  0x000000000f120b21: shl    %r11d              ;*imul
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@6 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120b24: mov    %r11d,%r9d
  0x000000000f120b27: sub    %r8d,%r9d
  0x000000000f120b2a: add    $0x2,%r9d
  0x000000000f120b2e: test   %r9d,%r9d
  0x000000000f120b31: jge    0x000000000f120c38  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@13 (line 130)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120b37: mov    %r8d,%r9d
  0x000000000f120b3a: test   %r8d,%r8d
  0x000000000f120b3d: jl     0x000000000f120b44
  0x000000000f120b3f: jmp    0x000000000f120b53
  0x000000000f120b41: mov    %r8d,%r9d          ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120b44: test   %r9d,%r9d
  0x000000000f120b47: jl     0x000000000f120d1c  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@23 (line 133)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120b4d: mov    $0x7fffffff,%r9d   ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@37 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120b53: movslq %r9d,%r11
  0x000000000f120b56: shl    %r11
  0x000000000f120b59: add    $0x17,%r11
  0x000000000f120b5d: mov    %r11,%rax
  0x000000000f120b60: and    $0xfffffffffffffff8,%rax
  0x000000000f120b64: cmp    $0x80000,%r9d
  0x000000000f120b6b: ja     0x000000000f120c90
  0x000000000f120b71: mov    0x60(%r15),%rbx
  0x000000000f120b75: mov    %rbx,%r10
  0x000000000f120b78: add    %rax,%r10
  0x000000000f120b7b: cmp    0x70(%r15),%r10
  0x000000000f120b7f: jae    0x000000000f120c90
  0x000000000f120b85: mov    %r10,0x60(%r15)
  0x000000000f120b89: prefetchnta 0xc0(%r10)
  0x000000000f120b91: movq   $0x1,(%rbx)
  0x000000000f120b98: prefetchnta 0x100(%r10)
  0x000000000f120ba0: movl   $0x1e010208,0x8(%rbx)  ;   {metadata({type array char})}
  0x000000000f120ba7: mov    %r9d,0xc(%rbx)
  0x000000000f120bab: prefetchnta 0x140(%r10)
  0x000000000f120bb3: prefetchnta 0x180(%r10)   ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120bbb: cmp    %r9d,%ebp
  0x000000000f120bbe: mov    %r9d,%esi
  0x000000000f120bc1: cmovl  %ebp,%esi          ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3334)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120bc4: mov    %rbx,%r10
  0x000000000f120bc7: add    $0x10,%r10         ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120bcb: mov    %rdi,%rdx          ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)

  0x000000000f120bce: shr    $0x3,%r11
  0x000000000f120bd2: mov    %r11,%rcx
  0x000000000f120bd5: add    $0xfffffffffffffffe,%rcx
  0x000000000f120bd9: cmp    %esi,%ebp
  0x000000000f120bdb: jb     0x000000000f120cda
  0x000000000f120be1: cmp    %esi,%r9d
  0x000000000f120be4: jb     0x000000000f120cda
  0x000000000f120bea: test   %esi,%esi
  0x000000000f120bec: jle    0x000000000f120d0a
  0x000000000f120bf2: lea    0x10(%rdi),%rdx
  0x000000000f120bf6: cmp    %r9d,%esi
  0x000000000f120bf9: jl     0x000000000f120c4d
  0x000000000f120bfb: add    $0xfffffffffffffff0,%rax
  0x000000000f120bff: shr    $0x3,%rax
  0x000000000f120c03: mov    %rdx,%rcx
  0x000000000f120c06: mov    %r10,%rdx
  0x000000000f120c09: mov    %rax,%r8
  0x000000000f120c0c: movabs $0xf062ac0,%r10
  0x000000000f120c16: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120c19: mov    %rbx,%r11
  0x000000000f120c1c: mov    0x40(%rsp),%r10
  0x000000000f120c21: mov    %r11d,0x10(%r10)
  0x000000000f120c25: shr    $0x9,%r10
  0x000000000f120c29: mov    $0x2dd5000,%r11d
  0x000000000f120c2f: mov    %r12b,(%r11,%r10,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@46 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120c33: jmpq   0x000000000f120b12
  0x000000000f120c38: add    $0x2,%r11d         ;*iadd
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@8 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120c3c: test   %r11d,%r11d
  0x000000000f120c3f: jl     0x000000000f120b41  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120c45: mov    %r11d,%r9d
  0x000000000f120c48: jmpq   0x000000000f120b53
  0x000000000f120c4d: movslq %esi,%r8
  0x000000000f120c50: mov    %r8,%r9
  0x000000000f120c53: shl    %r9
  0x000000000f120c56: add    $0x10,%r9
  0x000000000f120c5a: mov    %r9,%rcx
  0x000000000f120c5d: and    $0xfffffffffffffff9,%rcx
  0x000000000f120c61: mov    %rbx,%rdi
  0x000000000f120c64: add    %rcx,%rdi
  0x000000000f120c67: shr    $0x3,%r9
  0x000000000f120c6b: sub    %r9,%r11
  0x000000000f120c6e: mov    %r11,%rcx
  0x000000000f120c71: xor    %rax,%rax
  0x000000000f120c74: shl    $0x3,%rcx
  0x000000000f120c78: rep rex.W stos %al,%es:(%rdi)
  0x000000000f120c7b: mov    %rdx,%rcx
  0x000000000f120c7e: mov    %r10,%rdx
  0x000000000f120c81: movabs $0xf0627c0,%r10
  0x000000000f120c8b: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120c8e: jmp    0x000000000f120c19
  0x000000000f120c90: mov    %edi,0x2c(%rsp)
  0x000000000f120c94: mov    %rax,0x38(%rsp)
  0x000000000f120c99: mov    %r11,0x30(%rsp)
  0x000000000f120c9e: mov    %r9d,0x28(%rsp)
  0x000000000f120ca3: mov    %rdx,0x20(%rsp)
  0x000000000f120ca8: movabs $0x1e010208,%rdx   ;   {metadata({type array char})}
  0x000000000f120cb2: mov    %r9d,%r8d
  0x000000000f120cb5: xchg   %ax,%ax
  0x000000000f120cb7: callq  0x000000000f1156e0  ; OopMap{[32]=Oop [44]=NarrowOop [64]=Oop off=476}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ;   {runtime_call}
  0x000000000f120cbc: mov    %rax,%r10
  0x000000000f120cbf: mov    0x28(%rsp),%r9d
  0x000000000f120cc4: mov    0x30(%rsp),%r11
  0x000000000f120cc9: mov    0x38(%rsp),%rax
  0x000000000f120cce: mov    0x2c(%rsp),%edi
  0x000000000f120cd2: mov    %r10,%rbx
  0x000000000f120cd5: jmpq   0x000000000f120bbb
  0x000000000f120cda: mov    %r10,%rdi
  0x000000000f120cdd: xor    %rax,%rax
  0x000000000f120ce0: shl    $0x3,%rcx
  0x000000000f120ce4: rep rex.W stos %al,%es:(%rdi)
  0x000000000f120ce7: xor    %r8d,%r8d
  0x000000000f120cea: mov    %rbx,%r9
  0x000000000f120ced: xor    %edi,%edi
  0x000000000f120cef: mov    0x40(%rsp),%rbp
  0x000000000f120cf4: mov    %rbx,0x28(%rsp)
  0x000000000f120cf9: xchg   %ax,%ax
  0x000000000f120cfb: callq  0x000000000f1158e0  ; OopMap{rbp=Oop [40]=Oop [64]=Oop off=544}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ;   {runtime_call}
  0x000000000f120d00: mov    0x28(%rsp),%rbx
  0x000000000f120d05: jmpq   0x000000000f120c19
  0x000000000f120d0a: mov    %r10,%rdi
  0x000000000f120d0d: xor    %rax,%rax
  0x000000000f120d10: shl    $0x3,%rcx
  0x000000000f120d14: rep rex.W stos %al,%es:(%rdi)  ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120d17: jmpq   0x000000000f120c19
  0x000000000f120d1c: mov    $0x8d,%edx
  0x000000000f120d21: xchg   %ax,%ax
  0x000000000f120d23: callq  0x000000000f0557a0  ; OopMap{off=584}
                                                ;*new  ; - java.lang.AbstractStringBuilder::expandCapacity@26 (line 134)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ;   {runtime_call}
  0x000000000f120d28: int3                      ;*new  ; - java.lang.AbstractStringBuilder::expandCapacity@26 (line 134)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120d29: mov    $0xfffffff6,%edx
  0x000000000f120d2e: nop
  0x000000000f120d2f: callq  0x000000000f0557a0  ; OopMap{off=596}
                                                ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ;   {runtime_call}
  0x000000000f120d34: int3                      ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120d35: mov    %rax,%rdx
  0x000000000f120d38: jmp    0x000000000f120d3d  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120d3a: mov    %rax,%rdx          ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@-1 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)

  0x000000000f120d3d: add    $0x60,%rsp
  0x000000000f120d41: pop    %rbp
  0x000000000f120d42: jmpq   0x000000000f115a60  ;*iload_2
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@18 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ;   {runtime_call}
  0x000000000f120d47: hlt    
  0x000000000f120d48: hlt    
  0x000000000f120d49: hlt    
  0x000000000f120d4a: hlt    
  0x000000000f120d4b: hlt    
  0x000000000f120d4c: hlt    
  0x000000000f120d4d: hlt    
  0x000000000f120d4e: hlt    
  0x000000000f120d4f: hlt    
  0x000000000f120d50: hlt    
  0x000000000f120d51: hlt    
  0x000000000f120d52: hlt    
  0x000000000f120d53: hlt    
  0x000000000f120d54: hlt    
  0x000000000f120d55: hlt    
  0x000000000f120d56: hlt    
  0x000000000f120d57: hlt    
  0x000000000f120d58: hlt    
  0x000000000f120d59: hlt    
  0x000000000f120d5a: hlt    
  0x000000000f120d5b: hlt    
  0x000000000f120d5c: hlt    
  0x000000000f120d5d: hlt    
  0x000000000f120d5e: hlt    
  0x000000000f120d5f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f120d60: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f120d65: callq  0x000000000f120d6a
  0x000000000f120d6a: subq   $0x5,(%rsp)
  0x000000000f120d6f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f120d74: hlt    
  0x000000000f120d75: hlt    
  0x000000000f120d76: hlt    
  0x000000000f120d77: hlt    
<nmethod compile_id='6' compiler='C2' level='4' entry='0x000000000f120ae0' size='1784' address='0x000000000f120990' relocation_offset='288' insts_offset='336' stub_offset='976' scopes_data_offset='1032' scopes_pcs_offset='1232' dependencies_offset='1712' handler_table_offset='1720' nul_chk_table_offset='1768' method='java/lang/AbstractStringBuilder ensureCapacityInternal (I)V' bytes='16' count='23649' iicount='23649' stamp='0.378'/>
<writer thread='12324'/>
Decoding compiled method 0x000000000f115b10:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e3bf0} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;
  #           [sp+0x20]  (sp of caller)
  0x000000000f115c40: mov    0x8(%rdx),%r10d
  0x000000000f115c44: cmp    %r10,%rax
  0x000000000f115c47: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f115c4d: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f115c50: mov    %eax,-0x6000(%rsp)
  0x000000000f115c57: push   %rbp
  0x000000000f115c58: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 611)

  0x000000000f115c5c: mov    0xc(%rdx),%r11d    ;*getfield value
                                                ; - java.lang.String::length@1 (line 611)

  0x000000000f115c60: mov    0xc(%r11),%eax     ; implicit exception: dispatches to 0x000000000f115c70
  0x000000000f115c64: add    $0x10,%rsp
  0x000000000f115c68: pop    %rbp
  0x000000000f115c69: test   %eax,-0xeef5c6f(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f115c6f: retq   
  0x000000000f115c70: mov    $0xfffffff6,%edx
  0x000000000f115c75: xchg   %ax,%ax
  0x000000000f115c77: callq  0x000000000f0557a0  ; OopMap{off=60}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 611)
                                                ;   {runtime_call}
  0x000000000f115c7c: int3                      ;*arraylength
                                                ; - java.lang.String::length@4 (line 611)

  0x000000000f115c7d: hlt    
  0x000000000f115c7e: hlt    
  0x000000000f115c7f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f115c80: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f115c85: callq  0x000000000f115c8a
  0x000000000f115c8a: subq   $0x5,(%rsp)
  0x000000000f115c8f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f115c94: hlt    
  0x000000000f115c95: hlt    
  0x000000000f115c96: hlt    
  0x000000000f115c97: hlt    
<nmethod compile_id='7' compiler='C2' level='4' entry='0x000000000f115c40' size='552' address='0x000000000f115b10' relocation_offset='288' insts_offset='304' stub_offset='368' scopes_data_offset='400' scopes_pcs_offset='432' dependencies_offset='528' nul_chk_table_offset='536' method='java/lang/String length ()I' bytes='6' count='29239' iicount='29239' stamp='0.379'/>
<writer thread='6336'/>
<task_queued compile_id='25' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='145920' iicount='145920' stamp='0.380' comment='tiered' hot_count='145920'/>
<writer thread='15144'/>
Decoding compiled method 0x000000000f120690:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  # this:     rdx:rdx   = &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  # parm0:    r8        = int
  # parm1:    r9        = int
  #           [sp+0x20]  (sp of caller)
  0x000000000f1207c0: mov    0x8(%rdx),%r10d
  0x000000000f1207c4: cmp    %r10,%rax
  0x000000000f1207c7: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f1207cd: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f1207d0: sub    $0x18,%rsp
  0x000000000f1207d7: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@-1 (line 8)

  0x000000000f1207dc: mov    0x10(%rdx),%r10    ;*putfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@12 (line 9)

  0x000000000f1207e0: mov    %r8d,%eax
  0x000000000f1207e3: add    %r9d,%eax          ;*iadd
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@2 (line 8)

  0x000000000f1207e6: movslq %eax,%r11
  0x000000000f1207e9: add    %r10,%r11
  0x000000000f1207ec: mov    %r11,0x10(%rdx)
  0x000000000f1207f0: lock addl $0x0,(%rsp)     ;*putfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@12 (line 9)

  0x000000000f1207f5: add    $0x10,%rsp
  0x000000000f1207f9: pop    %rbp
  0x000000000f1207fa: test   %eax,-0xef00800(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f120800: retq   
  0x000000000f120801: hlt    
  0x000000000f120802: hlt    
  0x000000000f120803: hlt    
  0x000000000f120804: hlt    
  0x000000000f120805: hlt    
  0x000000000f120806: hlt    
  0x000000000f120807: hlt    
  0x000000000f120808: hlt    
  0x000000000f120809: hlt    
  0x000000000f12080a: hlt    
  0x000000000f12080b: hlt    
  0x000000000f12080c: hlt    
  0x000000000f12080d: hlt    
  0x000000000f12080e: hlt    
  0x000000000f12080f: hlt    
  0x000000000f120810: hlt    
  0x000000000f120811: hlt    
  0x000000000f120812: hlt    
  0x000000000f120813: hlt    
  0x000000000f120814: hlt    
  0x000000000f120815: hlt    
  0x000000000f120816: hlt    
  0x000000000f120817: hlt    
  0x000000000f120818: hlt    
  0x000000000f120819: hlt    
  0x000000000f12081a: hlt    
  0x000000000f12081b: hlt    
  0x000000000f12081c: hlt    
  0x000000000f12081d: hlt    
  0x000000000f12081e: hlt    
  0x000000000f12081f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f120820: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f120825: callq  0x000000000f12082a
  0x000000000f12082a: subq   $0x5,(%rsp)
  0x000000000f12082f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f120834: hlt    
  0x000000000f120835: hlt    
  0x000000000f120836: hlt    
  0x000000000f120837: hlt    
<nmethod compile_id='25' compiler='C2' level='4' entry='0x000000000f1207c0' size='568' address='0x000000000f120690' relocation_offset='288' insts_offset='304' stub_offset='400' scopes_data_offset='440' scopes_pcs_offset='464' dependencies_offset='560' oops_offset='424' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='179781' iicount='179800' stamp='0.383'/>
<make_not_entrant thread='15144' compile_id='23' compiler='C1' level='2' stamp='0.383'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f126550:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  0x000000000f1267a0: mov    %eax,-0x6000(%rsp)
  0x000000000f1267a7: push   %rbp
  0x000000000f1267a8: sub    $0xb0,%rsp
  0x000000000f1267af: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1267b9: mov    0xdc(%rsi),%edi
  0x000000000f1267bf: add    $0x8,%edi
  0x000000000f1267c2: mov    %edi,0xdc(%rsi)
  0x000000000f1267c8: movabs $0x86e2d40,%rsi    ;   {metadata({method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1267d2: and    $0x1ff8,%edi
  0x000000000f1267d8: cmp    $0x0,%edi
  0x000000000f1267db: je     0x000000000f127050
  0x000000000f1267e1: movabs $0x1e070828,%rdx   ;   {metadata(&apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1267eb: mov    0x60(%r15),%rax
  0x000000000f1267ef: lea    0x18(%rax),%rdi
  0x000000000f1267f3: cmp    0x70(%r15),%rdi
  0x000000000f1267f7: ja     0x000000000f127067
  0x000000000f1267fd: mov    %rdi,0x60(%r15)
  0x000000000f126801: mov    0xa8(%rdx),%rcx
  0x000000000f126808: mov    %rcx,(%rax)
  0x000000000f12680b: mov    %rdx,%rcx
  0x000000000f12680e: mov    %ecx,0x8(%rax)
  0x000000000f126811: xor    %rcx,%rcx
  0x000000000f126814: mov    %ecx,0xc(%rax)
  0x000000000f126817: xor    %rcx,%rcx
  0x000000000f12681a: mov    %rcx,0x10(%rax)    ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@0 (line 14)

  0x000000000f12681e: mov    %rax,%rdx
  0x000000000f126821: movabs $0x86e3158,%rcx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12682b: addq   $0x1,0x108(%rcx)
  0x000000000f126833: movabs $0x86e34b8,%rdx    ;   {metadata(method data for {method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12683d: mov    0xdc(%rdx),%ecx
  0x000000000f126843: add    $0x8,%ecx
  0x000000000f126846: mov    %ecx,0xdc(%rdx)
  0x000000000f12684c: movabs $0x86e2b48,%rdx    ;   {metadata({method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126856: and    $0x7ffff8,%ecx
  0x000000000f12685c: cmp    $0x0,%ecx
  0x000000000f12685f: je     0x000000000f127074
  0x000000000f126865: mov    %rax,%rdx
  0x000000000f126868: movabs $0x86e34b8,%rcx    ;   {metadata(method data for {method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126872: addq   $0x1,0x108(%rcx)
  0x000000000f12687a: movabs $0x840e480,%rdx    ;   {metadata(method data for {method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f126884: mov    0xdc(%rdx),%ecx
  0x000000000f12688a: add    $0x8,%ecx
  0x000000000f12688d: mov    %ecx,0xdc(%rdx)
  0x000000000f126893: movabs $0x82e0488,%rdx    ;   {metadata({method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f12689d: and    $0x7ffff8,%ecx
  0x000000000f1268a3: cmp    $0x0,%ecx
  0x000000000f1268a6: je     0x000000000f12708b
  0x000000000f1268ac: mov    $0x0,%esi
  0x000000000f1268b1: mov    $0x0,%edi
  0x000000000f1268b6: jmpq   0x000000000f12698c  ;*iload_3
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@12 (line 16)

  0x000000000f1268bb: nopl   0x0(%rax,%rax,1)
  0x000000000f1268c0: cmp    (%rax),%rax        ;*invokevirtual myadd
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)
                                                ; implicit exception: dispatches to 0x000000000f1270a2
  0x000000000f1268c3: mov    %rax,%rdx
  0x000000000f1268c6: movabs $0x86e3158,%rbx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1268d0: movabs $0x1e070828,%r10   ;   {metadata(&apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1268da: mov    %r10,0x140(%rbx)
  0x000000000f1268e1: addq   $0x1,0x148(%rbx)
  0x000000000f1268e9: movabs $0x86e3028,%rdx    ;   {metadata(method data for {method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1268f3: mov    0xdc(%rdx),%ebx
  0x000000000f1268f9: add    $0x8,%ebx
  0x000000000f1268fc: mov    %ebx,0xdc(%rdx)
  0x000000000f126902: movabs $0x86e2c20,%rdx    ;   {metadata({method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12690c: and    $0x7ffff8,%ebx
  0x000000000f126912: cmp    $0x0,%ebx
  0x000000000f126915: je     0x000000000f1270a7
  0x000000000f12691b: inc    %edi
  0x000000000f12691d: vmovsd 0x10(%rax),%xmm0
  0x000000000f126922: vmovq  %xmm0,%rdx         ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@6 (line 9)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)

  0x000000000f126927: movslq %edi,%rbx
  0x000000000f12692a: add    %rbx,%rdx
  0x000000000f12692d: mov    %rdx,0x68(%rsp)
  0x000000000f126932: vmovsd 0x68(%rsp),%xmm0
  0x000000000f126938: vmovsd %xmm0,0x10(%rax)
  0x000000000f12693d: lock addl $0x0,(%rsp)     ;*putfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@12 (line 9)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)

  0x000000000f126942: inc    %esi
  0x000000000f126944: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12694e: mov    0xe0(%rdx),%ebx
  0x000000000f126954: add    $0x8,%ebx
  0x000000000f126957: mov    %ebx,0xe0(%rdx)
  0x000000000f12695d: movabs $0x86e2d40,%rdx    ;   {metadata({method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126967: and    $0xfff8,%ebx
  0x000000000f12696d: cmp    $0x0,%ebx
  0x000000000f126970: je     0x000000000f1270be  ; OopMap{rax=Oop off=470}
                                                ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)

  0x000000000f126976: test   %eax,-0xef0687c(%rip)        # 0x0000000000220100
                                                ;   {poll}
  0x000000000f12697c: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126986: incl   0x168(%rdx)        ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)

  0x000000000f12698c: cmp    $0xf4240,%esi
  0x000000000f126992: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12699c: movabs $0x118,%rbx
  0x000000000f1269a6: jge    0x000000000f1269b6
  0x000000000f1269ac: movabs $0x128,%rbx
  0x000000000f1269b6: mov    (%rdx,%rbx,1),%rcx
  0x000000000f1269ba: lea    0x1(%rcx),%rcx
  0x000000000f1269be: mov    %rcx,(%rdx,%rbx,1)
  0x000000000f1269c2: jl     0x000000000f1268c0  ;*if_icmpge
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@15 (line 16)

  0x000000000f1269c8: mov    %edi,0x78(%rsp)
  0x000000000f1269cc: mov    %rax,0x88(%rsp)
  0x000000000f1269d4: nopl   0x0(%rax)
  0x000000000f1269d8: jmpq   0x000000000f12712a  ;   {no_reloc}
  0x000000000f1269dd: add    %al,(%rax)
  0x000000000f1269df: add    %al,(%rax)
  0x000000000f1269e1: add    %ah,0xf(%rsi)
  0x000000000f1269e4: (bad)  
  0x000000000f1269e5: add    %r8b,(%rax)
  0x000000000f1269e8: jmpq   0x000000000f127144  ; implicit exception: dispatches to 0x000000000f127134
  0x000000000f1269ed: nop                       ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@31 (line 20)

  0x000000000f1269ee: xchg   %ax,%ax
  0x000000000f1269f0: jmpq   0x000000000f12715d  ;   {no_reloc}
  0x000000000f1269f5: add    %al,(%rax)
  0x000000000f1269f7: add    %al,(%rax)
  0x000000000f1269f9: add    %ch,%cl
  0x000000000f1269fb: pushq  $0x48000007        ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)

  0x000000000f126a00: mov    %eax,%edx
  0x000000000f126a02: movabs $0x86e3158,%rcx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126a0c: addq   $0x1,0x180(%rcx)
  0x000000000f126a14: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@38 (line 20)

  0x000000000f126a17: mov    %rsi,0x80(%rsp)
  0x000000000f126a1f: mov    %rax,0x70(%rsp)
  0x000000000f126a24: nop
  0x000000000f126a25: nop
  0x000000000f126a26: nop
  0x000000000f126a27: callq  0x000000000f0561a0  ; OopMap{[112]=Oop [136]=Oop [128]=Oop off=652}
                                                ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@38 (line 20)
                                                ;   {optimized virtual_call}
  0x000000000f126a2c: mov    0x70(%rsp),%rax
  0x000000000f126a31: movabs $0x86e3158,%r8     ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126a3b: mov    0x8(%rax),%eax
  0x000000000f126a3e: cmp    0x198(%r8),%rax
  0x000000000f126a45: jne    0x000000000f126a54
  0x000000000f126a47: addq   $0x1,0x1a0(%r8)
  0x000000000f126a4f: jmpq   0x000000000f126aba
  0x000000000f126a54: cmp    0x1a8(%r8),%rax
  0x000000000f126a5b: jne    0x000000000f126a6a
  0x000000000f126a5d: addq   $0x1,0x1b0(%r8)
  0x000000000f126a65: jmpq   0x000000000f126aba
  0x000000000f126a6a: cmpq   $0x0,0x198(%r8)
  0x000000000f126a75: jne    0x000000000f126a8e
  0x000000000f126a77: mov    %rax,0x198(%r8)
  0x000000000f126a7e: movq   $0x1,0x1a0(%r8)
  0x000000000f126a89: jmpq   0x000000000f126aba
  0x000000000f126a8e: cmpq   $0x0,0x1a8(%r8)
  0x000000000f126a99: jne    0x000000000f126ab2
  0x000000000f126a9b: mov    %rax,0x1a8(%r8)
  0x000000000f126aa2: movq   $0x1,0x1b0(%r8)
  0x000000000f126aad: jmpq   0x000000000f126aba
  0x000000000f126ab2: addq   $0x1,0x190(%r8)
  0x000000000f126aba: movabs $0xd6010b70,%r8    ;   {oop(&quot;Sum:&quot;)}
  0x000000000f126ac4: mov    0x70(%rsp),%rdx    ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@43 (line 20)

  0x000000000f126ac9: nop
  0x000000000f126aca: nop
  0x000000000f126acb: nop
  0x000000000f126acc: nop
  0x000000000f126acd: movabs $0xffffffffffffffff,%rax
  0x000000000f126ad7: callq  0x000000000f0563e0  ; OopMap{[136]=Oop [128]=Oop off=828}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@43 (line 20)
                                                ;   {virtual_call}
  0x000000000f126adc: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f127174
  0x000000000f126adf: mov    %rax,%r8
  0x000000000f126ae2: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126aec: mov    0x8(%r8),%r8d
  0x000000000f126af0: cmp    0x1c8(%rdx),%r8
  0x000000000f126af7: jne    0x000000000f126b06
  0x000000000f126af9: addq   $0x1,0x1d0(%rdx)
  0x000000000f126b01: jmpq   0x000000000f126b6c
  0x000000000f126b06: cmp    0x1d8(%rdx),%r8
  0x000000000f126b0d: jne    0x000000000f126b1c
  0x000000000f126b0f: addq   $0x1,0x1e0(%rdx)
  0x000000000f126b17: jmpq   0x000000000f126b6c
  0x000000000f126b1c: cmpq   $0x0,0x1c8(%rdx)
  0x000000000f126b27: jne    0x000000000f126b40
  0x000000000f126b29: mov    %r8,0x1c8(%rdx)
  0x000000000f126b30: movq   $0x1,0x1d0(%rdx)
  0x000000000f126b3b: jmpq   0x000000000f126b6c
  0x000000000f126b40: cmpq   $0x0,0x1d8(%rdx)
  0x000000000f126b4b: jne    0x000000000f126b64
  0x000000000f126b4d: mov    %r8,0x1d8(%rdx)
  0x000000000f126b54: movq   $0x1,0x1e0(%rdx)
  0x000000000f126b5f: jmpq   0x000000000f126b6c
  0x000000000f126b64: addq   $0x1,0x1c0(%rdx)
  0x000000000f126b6c: mov    0x78(%rsp),%r8d
  0x000000000f126b71: mov    %rax,%rdx          ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)

  0x000000000f126b74: nop
  0x000000000f126b75: movabs $0xffffffffffffffff,%rax
  0x000000000f126b7f: callq  0x000000000f0563e0  ; OopMap{[136]=Oop [128]=Oop off=996}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)
                                                ;   {virtual_call}
  0x000000000f126b84: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f127179
  0x000000000f126b87: mov    %rax,%rdx
  0x000000000f126b8a: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126b94: mov    0x8(%rdx),%edx
  0x000000000f126b97: cmp    0x1f8(%rsi),%rdx
  0x000000000f126b9e: jne    0x000000000f126bad
  0x000000000f126ba0: addq   $0x1,0x200(%rsi)
  0x000000000f126ba8: jmpq   0x000000000f126c13
  0x000000000f126bad: cmp    0x208(%rsi),%rdx
  0x000000000f126bb4: jne    0x000000000f126bc3
  0x000000000f126bb6: addq   $0x1,0x210(%rsi)
  0x000000000f126bbe: jmpq   0x000000000f126c13
  0x000000000f126bc3: cmpq   $0x0,0x1f8(%rsi)
  0x000000000f126bce: jne    0x000000000f126be7
  0x000000000f126bd0: mov    %rdx,0x1f8(%rsi)
  0x000000000f126bd7: movq   $0x1,0x200(%rsi)
  0x000000000f126be2: jmpq   0x000000000f126c13
  0x000000000f126be7: cmpq   $0x0,0x208(%rsi)
  0x000000000f126bf2: jne    0x000000000f126c0b
  0x000000000f126bf4: mov    %rdx,0x208(%rsi)
  0x000000000f126bfb: movq   $0x1,0x210(%rsi)
  0x000000000f126c06: jmpq   0x000000000f126c13
  0x000000000f126c0b: addq   $0x1,0x1f0(%rsi)
  0x000000000f126c13: mov    %rax,%rdx          ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)

  0x000000000f126c16: nop
  0x000000000f126c17: nop
  0x000000000f126c18: nop
  0x000000000f126c19: nop
  0x000000000f126c1a: nop
  0x000000000f126c1b: nop
  0x000000000f126c1c: nop
  0x000000000f126c1d: movabs $0xffffffffffffffff,%rax
  0x000000000f126c27: callq  0x000000000f0563e0  ; OopMap{[136]=Oop [128]=Oop off=1164}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)
                                                ;   {virtual_call}
  0x000000000f126c2c: mov    0x80(%rsp),%rsi
  0x000000000f126c34: cmp    (%rsi),%rax        ; implicit exception: dispatches to 0x000000000f12717e
  0x000000000f126c37: mov    %rsi,%r8
  0x000000000f126c3a: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126c44: mov    0x8(%r8),%r8d
  0x000000000f126c48: cmp    0x228(%rdx),%r8
  0x000000000f126c4f: jne    0x000000000f126c5e
  0x000000000f126c51: addq   $0x1,0x230(%rdx)
  0x000000000f126c59: jmpq   0x000000000f126cc4
  0x000000000f126c5e: cmp    0x238(%rdx),%r8
  0x000000000f126c65: jne    0x000000000f126c74
  0x000000000f126c67: addq   $0x1,0x240(%rdx)
  0x000000000f126c6f: jmpq   0x000000000f126cc4
  0x000000000f126c74: cmpq   $0x0,0x228(%rdx)
  0x000000000f126c7f: jne    0x000000000f126c98
  0x000000000f126c81: mov    %r8,0x228(%rdx)
  0x000000000f126c88: movq   $0x1,0x230(%rdx)
  0x000000000f126c93: jmpq   0x000000000f126cc4
  0x000000000f126c98: cmpq   $0x0,0x238(%rdx)
  0x000000000f126ca3: jne    0x000000000f126cbc
  0x000000000f126ca5: mov    %r8,0x238(%rdx)
  0x000000000f126cac: movq   $0x1,0x240(%rdx)
  0x000000000f126cb7: jmpq   0x000000000f126cc4
  0x000000000f126cbc: addq   $0x1,0x220(%rdx)
  0x000000000f126cc4: mov    %rax,%r8
  0x000000000f126cc7: mov    %rsi,%rdx          ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)

  0x000000000f126cca: nop
  0x000000000f126ccb: nop
  0x000000000f126ccc: nop
  0x000000000f126ccd: movabs $0xffffffffffffffff,%rax
  0x000000000f126cd7: callq  0x000000000f0563e0  ; OopMap{[136]=Oop off=1340}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)
                                                ;   {virtual_call}
  0x000000000f126cdc: nopl   0x0(%rax)
  0x000000000f126ce0: jmpq   0x000000000f1271d8  ;   {no_reloc}
  0x000000000f126ce5: add    %al,(%rax)
  0x000000000f126ce7: add    %al,(%rax)
  0x000000000f126ce9: add    %ah,0xf(%rsi)
  0x000000000f126cec: (bad)  
  0x000000000f126ced: add    %r8b,(%rax)
  0x000000000f126cf0: jmpq   0x000000000f1271f2  ; implicit exception: dispatches to 0x000000000f1271e2
  0x000000000f126cf5: nop                       ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@56 (line 21)

  0x000000000f126cf6: xchg   %ax,%ax
  0x000000000f126cf8: jmpq   0x000000000f12720b  ;   {no_reloc}
  0x000000000f126cfd: add    %al,(%rax)
  0x000000000f126cff: add    %al,(%rax)
  0x000000000f126d01: add    %ch,%cl
  0x000000000f126d03: (bad)  
  0x000000000f126d04: add    $0x8b480000,%eax   ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)

  0x000000000f126d09: rorb   -0x41(%rax)        ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126d0c: pop    %rax
  0x000000000f126d0d: xor    %ebp,0x8(%rsi)
  0x000000000f126d10: add    %al,(%rax)
  0x000000000f126d12: add    %al,(%rax)
  0x000000000f126d14: addq   $0x1,0x250(%rdi)
  0x000000000f126d1c: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@63 (line 21)

  0x000000000f126d1f: mov    %rsi,0x98(%rsp)
  0x000000000f126d27: mov    %rax,0x90(%rsp)
  0x000000000f126d2f: callq  0x000000000f0561a0  ; OopMap{[136]=Oop [144]=Oop [152]=Oop off=1428}
                                                ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@63 (line 21)
                                                ;   {optimized virtual_call}
  0x000000000f126d34: mov    0x90(%rsp),%rax
  0x000000000f126d3c: movabs $0x86e3158,%r8     ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126d46: mov    0x8(%rax),%eax
  0x000000000f126d49: cmp    0x268(%r8),%rax
  0x000000000f126d50: jne    0x000000000f126d5f
  0x000000000f126d52: addq   $0x1,0x270(%r8)
  0x000000000f126d5a: jmpq   0x000000000f126dc5
  0x000000000f126d5f: cmp    0x278(%r8),%rax
  0x000000000f126d66: jne    0x000000000f126d75
  0x000000000f126d68: addq   $0x1,0x280(%r8)
  0x000000000f126d70: jmpq   0x000000000f126dc5
  0x000000000f126d75: cmpq   $0x0,0x268(%r8)
  0x000000000f126d80: jne    0x000000000f126d99
  0x000000000f126d82: mov    %rax,0x268(%r8)
  0x000000000f126d89: movq   $0x1,0x270(%r8)
  0x000000000f126d94: jmpq   0x000000000f126dc5
  0x000000000f126d99: cmpq   $0x0,0x278(%r8)
  0x000000000f126da4: jne    0x000000000f126dbd
  0x000000000f126da6: mov    %rax,0x278(%r8)
  0x000000000f126dad: movq   $0x1,0x280(%r8)
  0x000000000f126db8: jmpq   0x000000000f126dc5
  0x000000000f126dbd: addq   $0x1,0x260(%r8)
  0x000000000f126dc5: movabs $0xd6010ba0,%r8    ;   {oop(&quot;Test.sum:&quot;)}
  0x000000000f126dcf: mov    0x90(%rsp),%rdx    ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@68 (line 21)

  0x000000000f126dd7: nop
  0x000000000f126dd8: nop
  0x000000000f126dd9: nop
  0x000000000f126dda: nop
  0x000000000f126ddb: nop
  0x000000000f126ddc: nop
  0x000000000f126ddd: movabs $0xffffffffffffffff,%rax
  0x000000000f126de7: callq  0x000000000f0563e0  ; OopMap{[136]=Oop [152]=Oop off=1612}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@68 (line 21)
                                                ;   {virtual_call}
  0x000000000f126dec: mov    0x88(%rsp),%r8
  0x000000000f126df4: vmovsd 0x10(%r8),%xmm0    ; implicit exception: dispatches to 0x000000000f127222
  0x000000000f126dfa: vmovq  %xmm0,%r8          ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@72 (line 21)

  0x000000000f126dff: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f127227
  0x000000000f126e02: mov    %rax,%rdx
  0x000000000f126e05: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126e0f: mov    0x8(%rdx),%edx
  0x000000000f126e12: cmp    0x298(%rsi),%rdx
  0x000000000f126e19: jne    0x000000000f126e28
  0x000000000f126e1b: addq   $0x1,0x2a0(%rsi)
  0x000000000f126e23: jmpq   0x000000000f126e8e
  0x000000000f126e28: cmp    0x2a8(%rsi),%rdx
  0x000000000f126e2f: jne    0x000000000f126e3e
  0x000000000f126e31: addq   $0x1,0x2b0(%rsi)
  0x000000000f126e39: jmpq   0x000000000f126e8e
  0x000000000f126e3e: cmpq   $0x0,0x298(%rsi)
  0x000000000f126e49: jne    0x000000000f126e62
  0x000000000f126e4b: mov    %rdx,0x298(%rsi)
  0x000000000f126e52: movq   $0x1,0x2a0(%rsi)
  0x000000000f126e5d: jmpq   0x000000000f126e8e
  0x000000000f126e62: cmpq   $0x0,0x2a8(%rsi)
  0x000000000f126e6d: jne    0x000000000f126e86
  0x000000000f126e6f: mov    %rdx,0x2a8(%rsi)
  0x000000000f126e76: movq   $0x1,0x2b0(%rsi)
  0x000000000f126e81: jmpq   0x000000000f126e8e
  0x000000000f126e86: addq   $0x1,0x290(%rsi)
  0x000000000f126e8e: mov    %rax,%rdx          ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)

  0x000000000f126e91: nop
  0x000000000f126e92: nop
  0x000000000f126e93: nop
  0x000000000f126e94: nop
  0x000000000f126e95: movabs $0xffffffffffffffff,%rax
  0x000000000f126e9f: callq  0x000000000f0563e0  ; OopMap{[152]=Oop off=1796}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)
                                                ;   {virtual_call}
  0x000000000f126ea4: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f12722c
  0x000000000f126ea7: mov    %rax,%rdx
  0x000000000f126eaa: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126eb4: mov    0x8(%rdx),%edx
  0x000000000f126eb7: cmp    0x2c8(%rsi),%rdx
  0x000000000f126ebe: jne    0x000000000f126ecd
  0x000000000f126ec0: addq   $0x1,0x2d0(%rsi)
  0x000000000f126ec8: jmpq   0x000000000f126f33
  0x000000000f126ecd: cmp    0x2d8(%rsi),%rdx
  0x000000000f126ed4: jne    0x000000000f126ee3
  0x000000000f126ed6: addq   $0x1,0x2e0(%rsi)
  0x000000000f126ede: jmpq   0x000000000f126f33
  0x000000000f126ee3: cmpq   $0x0,0x2c8(%rsi)
  0x000000000f126eee: jne    0x000000000f126f07
  0x000000000f126ef0: mov    %rdx,0x2c8(%rsi)
  0x000000000f126ef7: movq   $0x1,0x2d0(%rsi)
  0x000000000f126f02: jmpq   0x000000000f126f33
  0x000000000f126f07: cmpq   $0x0,0x2d8(%rsi)
  0x000000000f126f12: jne    0x000000000f126f2b
  0x000000000f126f14: mov    %rdx,0x2d8(%rsi)
  0x000000000f126f1b: movq   $0x1,0x2e0(%rsi)
  0x000000000f126f26: jmpq   0x000000000f126f33
  0x000000000f126f2b: addq   $0x1,0x2c0(%rsi)
  0x000000000f126f33: mov    %rax,%rdx          ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)

  0x000000000f126f36: nop
  0x000000000f126f37: nop
  0x000000000f126f38: nop
  0x000000000f126f39: nop
  0x000000000f126f3a: nop
  0x000000000f126f3b: nop
  0x000000000f126f3c: nop
  0x000000000f126f3d: movabs $0xffffffffffffffff,%rax
  0x000000000f126f47: callq  0x000000000f0563e0  ; OopMap{[152]=Oop off=1964}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)
                                                ;   {virtual_call}
  0x000000000f126f4c: mov    0x98(%rsp),%rsi
  0x000000000f126f54: cmp    (%rsi),%rax        ; implicit exception: dispatches to 0x000000000f127231
  0x000000000f126f57: mov    %rsi,%r8
  0x000000000f126f5a: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f126f64: mov    0x8(%r8),%r8d
  0x000000000f126f68: cmp    0x2f8(%rdx),%r8
  0x000000000f126f6f: jne    0x000000000f126f7e
  0x000000000f126f71: addq   $0x1,0x300(%rdx)
  0x000000000f126f79: jmpq   0x000000000f126fe4
  0x000000000f126f7e: cmp    0x308(%rdx),%r8
  0x000000000f126f85: jne    0x000000000f126f94
  0x000000000f126f87: addq   $0x1,0x310(%rdx)
  0x000000000f126f8f: jmpq   0x000000000f126fe4
  0x000000000f126f94: cmpq   $0x0,0x2f8(%rdx)
  0x000000000f126f9f: jne    0x000000000f126fb8
  0x000000000f126fa1: mov    %r8,0x2f8(%rdx)
  0x000000000f126fa8: movq   $0x1,0x300(%rdx)
  0x000000000f126fb3: jmpq   0x000000000f126fe4
  0x000000000f126fb8: cmpq   $0x0,0x308(%rdx)
  0x000000000f126fc3: jne    0x000000000f126fdc
  0x000000000f126fc5: mov    %r8,0x308(%rdx)
  0x000000000f126fcc: movq   $0x1,0x310(%rdx)
  0x000000000f126fd7: jmpq   0x000000000f126fe4
  0x000000000f126fdc: addq   $0x1,0x2f0(%rdx)
  0x000000000f126fe4: mov    %rax,%r8
  0x000000000f126fe7: mov    %rsi,%rdx          ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)

  0x000000000f126fea: nop
  0x000000000f126feb: nop
  0x000000000f126fec: nop
  0x000000000f126fed: movabs $0xffffffffffffffff,%rax
  0x000000000f126ff7: callq  0x000000000f0563e0  ; OopMap{off=2140}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)
                                                ;   {virtual_call}
  0x000000000f126ffc: add    $0xb0,%rsp
  0x000000000f127003: pop    %rbp
  0x000000000f127004: test   %eax,-0xef06f0a(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f12700a: retq                      ;*return
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@84 (line 22)

  0x000000000f12700b: mov    %eax,-0x6000(%rsp)
  0x000000000f127012: push   %rbp
  0x000000000f127013: sub    $0xb0,%rsp
  0x000000000f12701a: mov    0x10(%rdx),%rsi
  0x000000000f12701e: mov    0x8(%rdx),%edi
  0x000000000f127021: mov    (%rdx),%ebx
  0x000000000f127023: mov    %rdx,%rcx
  0x000000000f127026: mov    %rsi,0x60(%rsp)
  0x000000000f12702b: mov    %edi,0x5c(%rsp)
  0x000000000f12702f: mov    %ebx,0x58(%rsp)
  0x000000000f127033: callq  0x00000000023685f0  ;   {runtime_call}
  0x000000000f127038: mov    0x58(%rsp),%ebx
  0x000000000f12703c: mov    %rbx,%rsi
  0x000000000f12703f: mov    0x5c(%rsp),%edi
  0x000000000f127043: mov    0x60(%rsp),%rdx
  0x000000000f127048: mov    %rdx,%rax
  0x000000000f12704b: jmpq   0x000000000f12698c
  0x000000000f127050: mov    %rsi,0x8(%rsp)
  0x000000000f127055: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f12705d: callq  0x000000000f111820  ; OopMap{rdx=Oop off=2242}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@-1 (line 14)
                                                ;   {runtime_call}
  0x000000000f127062: jmpq   0x000000000f1267e1
  0x000000000f127067: mov    %rdx,%rdx
  0x000000000f12706a: callq  0x000000000f10d700  ; OopMap{off=2255}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@0 (line 14)
                                                ;   {runtime_call}
  0x000000000f12706f: jmpq   0x000000000f12681e
  0x000000000f127074: mov    %rdx,0x8(%rsp)
  0x000000000f127079: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f127081: callq  0x000000000f111820  ; OopMap{rax=Oop off=2278}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::&lt;init&gt;@-1 (line 4)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@4 (line 14)
                                                ;   {runtime_call}
  0x000000000f127086: jmpq   0x000000000f126865
  0x000000000f12708b: mov    %rdx,0x8(%rsp)
  0x000000000f127090: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f127098: callq  0x000000000f111820  ; OopMap{rax=Oop off=2301}
                                                ;*synchronization entry
                                                ; - java.lang.Object::&lt;init&gt;@-1 (line 37)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::&lt;init&gt;@1 (line 4)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@4 (line 14)
                                                ;   {runtime_call}
  0x000000000f12709d: jmpq   0x000000000f1268ac
  0x000000000f1270a2: callq  0x000000000f10cf80  ; OopMap{rax=Oop off=2311}
                                                ;*invokevirtual myadd
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)
                                                ;   {runtime_call}
  0x000000000f1270a7: mov    %rdx,0x8(%rsp)
  0x000000000f1270ac: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1270b4: callq  0x000000000f111820  ; OopMap{rax=Oop off=2329}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@-1 (line 8)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)
                                                ;   {runtime_call}
  0x000000000f1270b9: jmpq   0x000000000f12691b
  0x000000000f1270be: mov    %rdx,0x8(%rsp)
  0x000000000f1270c3: movq   $0x1c,(%rsp)
  0x000000000f1270cb: callq  0x000000000f111820  ; OopMap{rax=Oop off=2352}
                                                ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)
                                                ;   {runtime_call}
  0x000000000f1270d0: jmpq   0x000000000f126976
  0x000000000f1270d5: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000000f1270df: push   %rax
  0x000000000f1270e0: push   %rbx
  0x000000000f1270e1: mov    0x48(%rdx),%rbx
  0x000000000f1270e5: push   %rdi
  0x000000000f1270e6: push   %rsi
  0x000000000f1270e7: push   %rdx
  0x000000000f1270e8: push   %rcx
  0x000000000f1270e9: push   %r8
  0x000000000f1270eb: push   %r9
  0x000000000f1270ed: push   %r10
  0x000000000f1270ef: mov    %rsp,%r10
  0x000000000f1270f2: and    $0xfffffffffffffff0,%rsp
  0x000000000f1270f6: push   %r10
  0x000000000f1270f8: push   %r11
  0x000000000f1270fa: mov    $0xd,%ecx
  0x000000000f1270ff: callq  0x0000000076fb1100  ;   {runtime_call}
  0x000000000f127104: pop    %r11
  0x000000000f127106: pop    %rsp
  0x000000000f127107: pop    %r10
  0x000000000f127109: pop    %r9
  0x000000000f12710b: pop    %r8
  0x000000000f12710d: pop    %rcx
  0x000000000f12710e: pop    %rdx
  0x000000000f12710f: pop    %rsi
  0x000000000f127110: pop    %rdi
  0x000000000f127111: cmp    0x118(%rbx),%rax
  0x000000000f127118: pop    %rbx
  0x000000000f127119: pop    %rax
  0x000000000f12711a: jne    0x000000000f12712a
  0x000000000f127120: jmpq   0x000000000f1269e2
  0x000000000f127125: mov    $0xa4b5500,%eax
  0x000000000f12712a: callq  0x000000000f110ba0  ; OopMap{[136]=Oop off=2447}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@31 (line 20)
                                                ;   {runtime_call}
  0x000000000f12712f: jmpq   0x000000000f1269d8
  0x000000000f127134: callq  0x000000000f10cf80  ; OopMap{[136]=Oop rdx=Oop off=2457}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@31 (line 20)
                                                ;   {runtime_call}
  0x000000000f127139: mov    0x0(%rdx),%esi
  0x000000000f12713f: mov    $0x6050b00,%eax
  0x000000000f127144: callq  0x000000000f110320  ; OopMap{[136]=Oop rdx=Oop off=2473}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@31 (line 20)
                                                ;   {runtime_call}
  0x000000000f127149: jmpq   0x000000000f1269e8
  0x000000000f12714e: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f127158: mov    $0xa050f00,%eax
  0x000000000f12715d: callq  0x000000000f110760  ; OopMap{[136]=Oop rsi=Oop off=2498}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)
                                                ;   {runtime_call}
  0x000000000f127162: jmpq   0x000000000f1269f0
  0x000000000f127167: mov    %rdx,%rdx
  0x000000000f12716a: callq  0x000000000f10d420  ; OopMap{rsi=Oop [136]=Oop off=2511}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)
                                                ;   {runtime_call}
  0x000000000f12716f: jmpq   0x000000000f1269ff
  0x000000000f127174: callq  0x000000000f10cf80  ; OopMap{[136]=Oop [128]=Oop rax=Oop off=2521}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)
                                                ;   {runtime_call}
  0x000000000f127179: callq  0x000000000f10cf80  ; OopMap{[136]=Oop [128]=Oop rax=Oop off=2526}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)
                                                ;   {runtime_call}
  0x000000000f12717e: callq  0x000000000f10cf80  ; OopMap{[136]=Oop rax=Oop rsi=Oop off=2531}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)
                                                ;   {runtime_call}
  0x000000000f127183: movabs $0x0,%rdx          ;   {oop(NULL)}
  0x000000000f12718d: push   %rax
  0x000000000f12718e: push   %rbx
  0x000000000f12718f: mov    0x48(%rdx),%rbx
  0x000000000f127193: push   %rdi
  0x000000000f127194: push   %rsi
  0x000000000f127195: push   %rdx
  0x000000000f127196: push   %rcx
  0x000000000f127197: push   %r8
  0x000000000f127199: push   %r9
  0x000000000f12719b: push   %r10
  0x000000000f12719d: mov    %rsp,%r10
  0x000000000f1271a0: and    $0xfffffffffffffff0,%rsp
  0x000000000f1271a4: push   %r10
  0x000000000f1271a6: push   %r11
  0x000000000f1271a8: mov    $0xd,%ecx
  0x000000000f1271ad: callq  0x0000000076fb1100  ;   {runtime_call}
  0x000000000f1271b2: pop    %r11
  0x000000000f1271b4: pop    %rsp
  0x000000000f1271b5: pop    %r10
  0x000000000f1271b7: pop    %r9
  0x000000000f1271b9: pop    %r8
  0x000000000f1271bb: pop    %rcx
  0x000000000f1271bc: pop    %rdx
  0x000000000f1271bd: pop    %rsi
  0x000000000f1271be: pop    %rdi
  0x000000000f1271bf: cmp    0x118(%rbx),%rax
  0x000000000f1271c6: pop    %rbx
  0x000000000f1271c7: pop    %rax
  0x000000000f1271c8: jne    0x000000000f1271d8
  0x000000000f1271ce: jmpq   0x000000000f126cea
  0x000000000f1271d3: mov    $0xa4b5500,%eax
  0x000000000f1271d8: callq  0x000000000f110ba0  ; OopMap{[136]=Oop off=2621}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@56 (line 21)
                                                ;   {runtime_call}
  0x000000000f1271dd: jmpq   0x000000000f126ce0
  0x000000000f1271e2: callq  0x000000000f10cf80  ; OopMap{[136]=Oop rdx=Oop off=2631}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@56 (line 21)
                                                ;   {runtime_call}
  0x000000000f1271e7: mov    0x0(%rdx),%esi
  0x000000000f1271ed: mov    $0x6050b00,%eax
  0x000000000f1271f2: callq  0x000000000f110320  ; OopMap{[136]=Oop rdx=Oop off=2647}
                                                ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@56 (line 21)
                                                ;   {runtime_call}
  0x000000000f1271f7: jmpq   0x000000000f126cf0
  0x000000000f1271fc: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f127206: mov    $0xa050f00,%eax
  0x000000000f12720b: callq  0x000000000f110760  ; OopMap{[136]=Oop rsi=Oop off=2672}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)
                                                ;   {runtime_call}
  0x000000000f127210: jmpq   0x000000000f126cf8
  0x000000000f127215: mov    %rdx,%rdx
  0x000000000f127218: callq  0x000000000f10d420  ; OopMap{[136]=Oop rsi=Oop off=2685}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)
                                                ;   {runtime_call}
  0x000000000f12721d: jmpq   0x000000000f126d07
  0x000000000f127222: callq  0x000000000f10cf80  ; OopMap{[152]=Oop rax=Oop off=2695}
                                                ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@72 (line 21)
                                                ;   {runtime_call}
  0x000000000f127227: callq  0x000000000f10cf80  ; OopMap{[152]=Oop rax=Oop off=2700}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)
                                                ;   {runtime_call}
  0x000000000f12722c: callq  0x000000000f10cf80  ; OopMap{[152]=Oop rax=Oop off=2705}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)
                                                ;   {runtime_call}
  0x000000000f127231: callq  0x000000000f10cf80  ; OopMap{rax=Oop rsi=Oop off=2710}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)
                                                ;   {runtime_call}
  0x000000000f127236: nop
  0x000000000f127237: nop
  0x000000000f127238: mov    0x2a8(%r15),%rax
  0x000000000f12723f: movabs $0x0,%r10
  0x000000000f127249: mov    %r10,0x2a8(%r15)
  0x000000000f127250: movabs $0x0,%r10
  0x000000000f12725a: mov    %r10,0x2b0(%r15)
  0x000000000f127261: add    $0xb0,%rsp
  0x000000000f127268: pop    %rbp
  0x000000000f127269: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f12726e: hlt    
  0x000000000f12726f: hlt    
  0x000000000f127270: hlt    
  0x000000000f127271: hlt    
  0x000000000f127272: hlt    
  0x000000000f127273: hlt    
  0x000000000f127274: hlt    
  0x000000000f127275: hlt    
  0x000000000f127276: hlt    
  0x000000000f127277: hlt    
  0x000000000f127278: hlt    
  0x000000000f127279: hlt    
  0x000000000f12727a: hlt    
  0x000000000f12727b: hlt    
  0x000000000f12727c: hlt    
  0x000000000f12727d: hlt    
  0x000000000f12727e: hlt    
  0x000000000f12727f: hlt    
[Stub Code]
  0x000000000f127280: nop                       ;   {no_reloc}
  0x000000000f127281: nop
  0x000000000f127282: nop
  0x000000000f127283: nop
  0x000000000f127284: nop
  0x000000000f127285: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12728f: jmpq   0x000000000f12728f  ;   {runtime_call}
  0x000000000f127294: nop
  0x000000000f127295: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12729f: jmpq   0x000000000f12729f  ;   {runtime_call}
  0x000000000f1272a4: nop
  0x000000000f1272a5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272af: jmpq   0x000000000f1272af  ;   {runtime_call}
  0x000000000f1272b4: nop
  0x000000000f1272b5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272bf: jmpq   0x000000000f1272bf  ;   {runtime_call}
  0x000000000f1272c4: nop
  0x000000000f1272c5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272cf: jmpq   0x000000000f1272cf  ;   {runtime_call}
  0x000000000f1272d4: nop
  0x000000000f1272d5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272df: jmpq   0x000000000f1272df  ;   {runtime_call}
  0x000000000f1272e4: nop
  0x000000000f1272e5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272ef: jmpq   0x000000000f1272ef  ;   {runtime_call}
  0x000000000f1272f4: nop
  0x000000000f1272f5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f1272ff: jmpq   0x000000000f1272ff  ;   {runtime_call}
  0x000000000f127304: nop
  0x000000000f127305: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12730f: jmpq   0x000000000f12730f  ;   {runtime_call}
  0x000000000f127314: nop
  0x000000000f127315: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12731f: jmpq   0x000000000f12731f  ;   {runtime_call}
[Exception Handler]
  0x000000000f127324: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f127329: mov    %rsp,-0x28(%rsp)
  0x000000000f12732e: sub    $0x80,%rsp
  0x000000000f127335: mov    %rax,0x78(%rsp)
  0x000000000f12733a: mov    %rcx,0x70(%rsp)
  0x000000000f12733f: mov    %rdx,0x68(%rsp)
  0x000000000f127344: mov    %rbx,0x60(%rsp)
  0x000000000f127349: mov    %rbp,0x50(%rsp)
  0x000000000f12734e: mov    %rsi,0x48(%rsp)
  0x000000000f127353: mov    %rdi,0x40(%rsp)
  0x000000000f127358: mov    %r8,0x38(%rsp)
  0x000000000f12735d: mov    %r9,0x30(%rsp)
  0x000000000f127362: mov    %r10,0x28(%rsp)
  0x000000000f127367: mov    %r11,0x20(%rsp)
  0x000000000f12736c: mov    %r12,0x18(%rsp)
  0x000000000f127371: mov    %r13,0x10(%rsp)
  0x000000000f127376: mov    %r14,0x8(%rsp)
  0x000000000f12737b: mov    %r15,(%rsp)
  0x000000000f12737f: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f127389: movabs $0xf127329,%rdx    ;   {internal_word}
  0x000000000f127393: mov    %rsp,%r8
  0x000000000f127396: and    $0xfffffffffffffff0,%rsp
  0x000000000f12739a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f12739f: hlt    
[Deopt Handler Code]
  0x000000000f1273a0: movabs $0xf1273a0,%r10    ;   {section_word}
  0x000000000f1273aa: push   %r10
  0x000000000f1273ac: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f1273b1: hlt    
  0x000000000f1273b2: hlt    
  0x000000000f1273b3: hlt    
  0x000000000f1273b4: hlt    
  0x000000000f1273b5: hlt    
  0x000000000f1273b6: hlt    
  0x000000000f1273b7: hlt    
<nmethod compile_id='24' compile_kind='osr' compiler='C1' level='3' entry='0x000000000f1267a0' size='5240' address='0x000000000f126550' relocation_offset='288' insts_offset='592' stub_offset='3376' scopes_data_offset='3736' scopes_pcs_offset='4184' dependencies_offset='5144' nul_chk_table_offset='5152' oops_offset='3688' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='543708' iicount='1' stamp='0.405'/>
<writer thread='6336'/>
<task_queued compile_id='26' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='544768' iicount='1' level='3' stamp='0.405' comment='tiered' hot_count='1'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f125b90:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;
  # this:     rdx:rdx   = &apos;java/lang/AbstractStringBuilder&apos;
  # parm0:    r8:r8     = &apos;java/lang/String&apos;
  #           [sp+0x80]  (sp of caller)
  0x000000000f125d20: mov    0x8(%rdx),%r10d
  0x000000000f125d24: cmp    %rax,%r10
  0x000000000f125d27: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f125d2d: data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000000f125d38: data16 data16 xchg %ax,%ax
  0x000000000f125d3c: nopl   0x0(%rax)
[Verified Entry Point]
  0x000000000f125d40: mov    %eax,-0x6000(%rsp)
  0x000000000f125d47: push   %rbp
  0x000000000f125d48: sub    $0x70,%rsp
  0x000000000f125d4c: mov    %rdx,0x48(%rsp)
  0x000000000f125d51: movabs $0x8527548,%rsi    ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125d5b: mov    0xdc(%rsi),%edi
  0x000000000f125d61: add    $0x8,%edi
  0x000000000f125d64: mov    %edi,0xdc(%rsi)
  0x000000000f125d6a: movabs $0x8353fa8,%rsi    ;   {metadata({method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125d74: and    $0x1ff8,%edi
  0x000000000f125d7a: cmp    $0x0,%edi
  0x000000000f125d7d: je     0x000000000f1260b8  ;*aload_1
                                                ; - java.lang.AbstractStringBuilder::append@0 (line 418)

  0x000000000f125d83: cmp    $0x0,%r8
  0x000000000f125d87: movabs $0x8527548,%rsi    ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125d91: movabs $0x108,%rdi
  0x000000000f125d9b: jne    0x000000000f125dab
  0x000000000f125da1: movabs $0x118,%rdi
  0x000000000f125dab: mov    (%rsi,%rdi,1),%rbx
  0x000000000f125daf: lea    0x1(%rbx),%rbx
  0x000000000f125db3: mov    %rbx,(%rsi,%rdi,1)
  0x000000000f125db7: je     0x000000000f126092  ;*ifnonnull
                                                ; - java.lang.AbstractStringBuilder::append@1 (line 418)

  0x000000000f125dbd: cmp    (%r8),%rax         ;*invokevirtual length
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)
                                                ; implicit exception: dispatches to 0x000000000f1260cf
  0x000000000f125dc0: mov    %r8,%rsi
  0x000000000f125dc3: movabs $0x8527548,%rdi    ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125dcd: mov    0x8(%rsi),%esi
  0x000000000f125dd0: cmp    0x140(%rdi),%rsi
  0x000000000f125dd7: jne    0x000000000f125de6
  0x000000000f125dd9: addq   $0x1,0x148(%rdi)
  0x000000000f125de1: jmpq   0x000000000f125e4c
  0x000000000f125de6: cmp    0x150(%rdi),%rsi
  0x000000000f125ded: jne    0x000000000f125dfc
  0x000000000f125def: addq   $0x1,0x158(%rdi)
  0x000000000f125df7: jmpq   0x000000000f125e4c
  0x000000000f125dfc: cmpq   $0x0,0x140(%rdi)
  0x000000000f125e07: jne    0x000000000f125e20
  0x000000000f125e09: mov    %rsi,0x140(%rdi)
  0x000000000f125e10: movq   $0x1,0x148(%rdi)
  0x000000000f125e1b: jmpq   0x000000000f125e4c
  0x000000000f125e20: cmpq   $0x0,0x150(%rdi)
  0x000000000f125e2b: jne    0x000000000f125e44
  0x000000000f125e2d: mov    %rsi,0x150(%rdi)
  0x000000000f125e34: movq   $0x1,0x158(%rdi)
  0x000000000f125e3f: jmpq   0x000000000f125e4c
  0x000000000f125e44: addq   $0x1,0x138(%rdi)
  0x000000000f125e4c: movabs $0x840d740,%rsi    ;   {metadata(method data for {method} {0x00000000082e3bf0} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x000000000f125e56: mov    0xdc(%rsi),%edi
  0x000000000f125e5c: add    $0x8,%edi
  0x000000000f125e5f: mov    %edi,0xdc(%rsi)
  0x000000000f125e65: movabs $0x82e3be8,%rsi    ;   {metadata({method} {0x00000000082e3bf0} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x000000000f125e6f: and    $0x7ffff8,%edi
  0x000000000f125e75: cmp    $0x0,%edi
  0x000000000f125e78: je     0x000000000f1260d4
  0x000000000f125e7e: mov    0xc(%r8),%esi      ;*getfield value
                                                ; - java.lang.String::length@1 (line 611)
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)

  0x000000000f125e82: mov    0xc(%rsi),%esi     ;*arraylength
                                                ; - java.lang.String::length@4 (line 611)
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)
                                                ; implicit exception: dispatches to 0x000000000f1260eb
  0x000000000f125e85: mov    %esi,0x58(%rsp)
  0x000000000f125e89: mov    0xc(%rdx),%edi     ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@16 (line 421)

  0x000000000f125e8c: add    %esi,%edi
  0x000000000f125e8e: mov    %rdx,%rbx
  0x000000000f125e91: movabs $0x8527548,%rax    ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125e9b: addq   $0x1,0x168(%rax)
  0x000000000f125ea3: movabs $0x84dbbe0,%rbx    ;   {metadata(method data for {method} {0x0000000008353700} &apos;ensureCapacityInternal&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125ead: mov    0xdc(%rbx),%eax
  0x000000000f125eb3: add    $0x8,%eax
  0x000000000f125eb6: mov    %eax,0xdc(%rbx)
  0x000000000f125ebc: movabs $0x83536f8,%rbx    ;   {metadata({method} {0x0000000008353700} &apos;ensureCapacityInternal&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125ec6: and    $0x7ffff8,%eax
  0x000000000f125ecc: cmp    $0x0,%eax
  0x000000000f125ecf: je     0x000000000f1260f0
  0x000000000f125ed5: mov    0x10(%rdx),%ebx    ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)

  0x000000000f125ed8: mov    0xc(%rbx),%ebx     ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)
                                                ; implicit exception: dispatches to 0x000000000f126107
  0x000000000f125edb: mov    %rdi,%rax
  0x000000000f125ede: sub    %ebx,%eax
  0x000000000f125ee0: cmp    $0x0,%eax
  0x000000000f125ee3: movabs $0x84dbbe0,%rbx    ;   {metadata(method data for {method} {0x0000000008353700} &apos;ensureCapacityInternal&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125eed: movabs $0x108,%rax
  0x000000000f125ef7: jle    0x000000000f125f07
  0x000000000f125efd: movabs $0x118,%rax
  0x000000000f125f07: mov    (%rbx,%rax,1),%rcx
  0x000000000f125f0b: lea    0x1(%rcx),%rcx
  0x000000000f125f0f: mov    %rcx,(%rbx,%rax,1)
  0x000000000f125f13: mov    %r8,0x50(%rsp)
  0x000000000f125f18: jle    0x000000000f125fbc  ;*ifle
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@7 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)

  0x000000000f125f1e: mov    %rdx,%rbx
  0x000000000f125f21: movabs $0x84dbbe0,%rax    ;   {metadata(method data for {method} {0x0000000008353700} &apos;ensureCapacityInternal&apos; &apos;(I)V&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125f2b: mov    0x8(%rbx),%ebx
  0x000000000f125f2e: cmp    0x130(%rax),%rbx
  0x000000000f125f35: jne    0x000000000f125f44
  0x000000000f125f37: addq   $0x1,0x138(%rax)
  0x000000000f125f3f: jmpq   0x000000000f125faa
  0x000000000f125f44: cmp    0x140(%rax),%rbx
  0x000000000f125f4b: jne    0x000000000f125f5a
  0x000000000f125f4d: addq   $0x1,0x148(%rax)
  0x000000000f125f55: jmpq   0x000000000f125faa
  0x000000000f125f5a: cmpq   $0x0,0x130(%rax)
  0x000000000f125f65: jne    0x000000000f125f7e
  0x000000000f125f67: mov    %rbx,0x130(%rax)
  0x000000000f125f6e: movq   $0x1,0x138(%rax)
  0x000000000f125f79: jmpq   0x000000000f125faa
  0x000000000f125f7e: cmpq   $0x0,0x140(%rax)
  0x000000000f125f89: jne    0x000000000f125fa2
  0x000000000f125f8b: mov    %rbx,0x140(%rax)
  0x000000000f125f92: movq   $0x1,0x148(%rax)
  0x000000000f125f9d: jmpq   0x000000000f125faa
  0x000000000f125fa2: addq   $0x1,0x128(%rax)
  0x000000000f125faa: mov    %rdi,%r8
  0x000000000f125fad: mov    %rdx,%rdi
  0x000000000f125fb0: mov    %rdi,%rdx          ;*invokevirtual expandCapacity
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)

  0x000000000f125fb3: nop
  0x000000000f125fb4: nop
  0x000000000f125fb5: nop
  0x000000000f125fb6: nop
  0x000000000f125fb7: callq  0x000000000f0561a0  ; OopMap{[72]=Oop [80]=Oop off=668}
                                                ;*invokevirtual expandCapacity
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)
                                                ;   {optimized virtual_call}
  0x000000000f125fbc: mov    0x58(%rsp),%esi
  0x000000000f125fc0: mov    0x50(%rsp),%rbx
  0x000000000f125fc5: mov    0x48(%rsp),%rdx
  0x000000000f125fca: mov    0x10(%rdx),%edi    ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::append@28 (line 422)

  0x000000000f125fcd: mov    0xc(%rdx),%eax     ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@32 (line 422)

  0x000000000f125fd0: mov    %rbx,%r8
  0x000000000f125fd3: movabs $0x8527548,%r9     ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f125fdd: mov    0x8(%r8),%r8d
  0x000000000f125fe1: cmp    0x180(%r9),%r8
  0x000000000f125fe8: jne    0x000000000f125ff7
  0x000000000f125fea: addq   $0x1,0x188(%r9)
  0x000000000f125ff2: jmpq   0x000000000f12605d
  0x000000000f125ff7: cmp    0x190(%r9),%r8
  0x000000000f125ffe: jne    0x000000000f12600d
  0x000000000f126000: addq   $0x1,0x198(%r9)
  0x000000000f126008: jmpq   0x000000000f12605d
  0x000000000f12600d: cmpq   $0x0,0x180(%r9)
  0x000000000f126018: jne    0x000000000f126031
  0x000000000f12601a: mov    %r8,0x180(%r9)
  0x000000000f126021: movq   $0x1,0x188(%r9)
  0x000000000f12602c: jmpq   0x000000000f12605d
  0x000000000f126031: cmpq   $0x0,0x190(%r9)
  0x000000000f12603c: jne    0x000000000f126055
  0x000000000f12603e: mov    %r8,0x190(%r9)
  0x000000000f126045: movq   $0x1,0x198(%r9)
  0x000000000f126050: jmpq   0x000000000f12605d
  0x000000000f126055: addq   $0x1,0x178(%r9)
  0x000000000f12605d: mov    $0x0,%r8d
  0x000000000f126063: mov    %rsi,%r9
  0x000000000f126066: mov    %rax,%rsi
  0x000000000f126069: mov    %rbx,%rdx          ;*invokevirtual getChars
                                                ; - java.lang.AbstractStringBuilder::append@35 (line 422)

  0x000000000f12606c: nop
  0x000000000f12606d: nop
  0x000000000f12606e: nop
  0x000000000f12606f: callq  0x000000000f0561a0  ; OopMap{[72]=Oop off=852}
                                                ;*invokevirtual getChars
                                                ; - java.lang.AbstractStringBuilder::append@35 (line 422)
                                                ;   {optimized virtual_call}
  0x000000000f126074: mov    0x48(%rsp),%rdx
  0x000000000f126079: mov    0xc(%rdx),%eax     ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@40 (line 423)

  0x000000000f12607c: add    0x58(%rsp),%eax
  0x000000000f126080: mov    %eax,0xc(%rdx)     ;*putfield count
                                                ; - java.lang.AbstractStringBuilder::append@45 (line 423)

  0x000000000f126083: mov    %rdx,%rax
  0x000000000f126086: add    $0x70,%rsp
  0x000000000f12608a: pop    %rbp
  0x000000000f12608b: test   %eax,-0xef05f91(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f126091: retq                      ;*areturn
                                                ; - java.lang.AbstractStringBuilder::append@49 (line 424)

  0x000000000f126092: mov    %rdx,%rsi
  0x000000000f126095: movabs $0x8527548,%rdi    ;   {metadata(method data for {method} {0x0000000008353fb0} &apos;append&apos; &apos;(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;)}
  0x000000000f12609f: addq   $0x1,0x128(%rdi)
  0x000000000f1260a7: callq  0x000000000f0561a0  ; OopMap{off=908}
                                                ;*invokespecial appendNull
                                                ; - java.lang.AbstractStringBuilder::append@5 (line 419)
                                                ;   {optimized virtual_call}
  0x000000000f1260ac: add    $0x70,%rsp
  0x000000000f1260b0: pop    %rbp
  0x000000000f1260b1: test   %eax,-0xef05fb7(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f1260b7: retq   
  0x000000000f1260b8: mov    %rsi,0x8(%rsp)
  0x000000000f1260bd: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1260c5: callq  0x000000000f111820  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=938}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::append@-1 (line 418)
                                                ;   {runtime_call}
  0x000000000f1260ca: jmpq   0x000000000f125d83
  0x000000000f1260cf: callq  0x000000000f10cf80  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=948}
                                                ;*invokevirtual length
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)
                                                ;   {runtime_call}
  0x000000000f1260d4: mov    %rsi,0x8(%rsp)
  0x000000000f1260d9: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1260e1: callq  0x000000000f111820  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=966}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 611)
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)
                                                ;   {runtime_call}
  0x000000000f1260e6: jmpq   0x000000000f125e7e
  0x000000000f1260eb: callq  0x000000000f10cf80  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=976}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 611)
                                                ; - java.lang.AbstractStringBuilder::append@10 (line 420)
                                                ;   {runtime_call}
  0x000000000f1260f0: mov    %rbx,0x8(%rsp)
  0x000000000f1260f5: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1260fd: callq  0x000000000f111820  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=994}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@-1 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)
                                                ;   {runtime_call}
  0x000000000f126102: jmpq   0x000000000f125ed5
  0x000000000f126107: callq  0x000000000f10cf80  ; OopMap{rdx=Oop [72]=Oop r8=Oop off=1004}
                                                ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 421)
                                                ;   {runtime_call}
  0x000000000f12610c: nop
  0x000000000f12610d: nop
  0x000000000f12610e: mov    0x2a8(%r15),%rax
  0x000000000f126115: movabs $0x0,%r10
  0x000000000f12611f: mov    %r10,0x2a8(%r15)
  0x000000000f126126: movabs $0x0,%r10
  0x000000000f126130: mov    %r10,0x2b0(%r15)
  0x000000000f126137: add    $0x70,%rsp
  0x000000000f12613b: pop    %rbp
  0x000000000f12613c: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f126141: hlt    
  0x000000000f126142: hlt    
  0x000000000f126143: hlt    
  0x000000000f126144: hlt    
  0x000000000f126145: hlt    
  0x000000000f126146: hlt    
  0x000000000f126147: hlt    
  0x000000000f126148: hlt    
  0x000000000f126149: hlt    
  0x000000000f12614a: hlt    
  0x000000000f12614b: hlt    
  0x000000000f12614c: hlt    
  0x000000000f12614d: hlt    
  0x000000000f12614e: hlt    
  0x000000000f12614f: hlt    
  0x000000000f126150: hlt    
  0x000000000f126151: hlt    
  0x000000000f126152: hlt    
  0x000000000f126153: hlt    
  0x000000000f126154: hlt    
  0x000000000f126155: hlt    
  0x000000000f126156: hlt    
  0x000000000f126157: hlt    
  0x000000000f126158: hlt    
  0x000000000f126159: hlt    
  0x000000000f12615a: hlt    
  0x000000000f12615b: hlt    
  0x000000000f12615c: hlt    
  0x000000000f12615d: hlt    
  0x000000000f12615e: hlt    
  0x000000000f12615f: hlt    
[Stub Code]
  0x000000000f126160: nop                       ;   {no_reloc}
  0x000000000f126161: nop
  0x000000000f126162: nop
  0x000000000f126163: nop
  0x000000000f126164: nop
  0x000000000f126165: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12616f: jmpq   0x000000000f12616f  ;   {runtime_call}
  0x000000000f126174: nop
  0x000000000f126175: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12617f: jmpq   0x000000000f12617f  ;   {runtime_call}
  0x000000000f126184: nop
  0x000000000f126185: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f12618f: jmpq   0x000000000f12618f  ;   {runtime_call}
[Exception Handler]
  0x000000000f126194: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f126199: mov    %rsp,-0x28(%rsp)
  0x000000000f12619e: sub    $0x80,%rsp
  0x000000000f1261a5: mov    %rax,0x78(%rsp)
  0x000000000f1261aa: mov    %rcx,0x70(%rsp)
  0x000000000f1261af: mov    %rdx,0x68(%rsp)
  0x000000000f1261b4: mov    %rbx,0x60(%rsp)
  0x000000000f1261b9: mov    %rbp,0x50(%rsp)
  0x000000000f1261be: mov    %rsi,0x48(%rsp)
  0x000000000f1261c3: mov    %rdi,0x40(%rsp)
  0x000000000f1261c8: mov    %r8,0x38(%rsp)
  0x000000000f1261cd: mov    %r9,0x30(%rsp)
  0x000000000f1261d2: mov    %r10,0x28(%rsp)
  0x000000000f1261d7: mov    %r11,0x20(%rsp)
  0x000000000f1261dc: mov    %r12,0x18(%rsp)
  0x000000000f1261e1: mov    %r13,0x10(%rsp)
  0x000000000f1261e6: mov    %r14,0x8(%rsp)
  0x000000000f1261eb: mov    %r15,(%rsp)
  0x000000000f1261ef: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f1261f9: movabs $0xf126199,%rdx    ;   {internal_word}
  0x000000000f126203: mov    %rsp,%r8
  0x000000000f126206: and    $0xfffffffffffffff0,%rsp
  0x000000000f12620a: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f12620f: hlt    
[Deopt Handler Code]
  0x000000000f126210: movabs $0xf126210,%r10    ;   {section_word}
  0x000000000f12621a: push   %r10
  0x000000000f12621c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f126221: hlt    
  0x000000000f126222: hlt    
  0x000000000f126223: hlt    
  0x000000000f126224: hlt    
  0x000000000f126225: hlt    
  0x000000000f126226: hlt    
  0x000000000f126227: hlt    
<nmethod compile_id='22' compiler='C1' level='3' entry='0x000000000f125d20' size='2440' address='0x000000000f125b90' relocation_offset='288' insts_offset='400' stub_offset='1488' scopes_data_offset='1720' scopes_pcs_offset='1968' dependencies_offset='2400' nul_chk_table_offset='2408' method='java/lang/AbstractStringBuilder append (Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;' bytes='50' count='1286' iicount='1286' stamp='0.416'/>
<writer thread='6336'/>
<task_queued compile_id='27' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='8448' iicount='8448' stamp='0.416' comment='tiered' hot_count='8448'/>
<writer thread='15144'/>
Decoding compiled method 0x000000000f11f3d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;
  #           [sp+0x20]  (sp of caller)
  0x000000000f11f500: mov    0x8(%rdx),%r10d
  0x000000000f11f504: cmp    %r10,%rax
  0x000000000f11f507: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f11f50d: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f11f510: mov    %eax,-0x6000(%rsp)
  0x000000000f11f517: push   %rbp
  0x000000000f11f518: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - java.lang.Object::&lt;init&gt;@-1 (line 37)

  0x000000000f11f51c: mov    0x8(%rdx),%r11d
  0x000000000f11f520: movabs $0x0,%r10
  0x000000000f11f52a: add    %r11,%r10
  0x000000000f11f52d: mov    $0x40000000,%r8d
  0x000000000f11f533: test   %r8d,0x9c(%r10)
  0x000000000f11f53a: je     0x000000000f11f544  ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)

  0x000000000f11f53c: mov    %rdx,%rbp
  0x000000000f11f53f: callq  0x000000000f1140e0  ; OopMap{rbp=Oop off=68}
                                                ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)
                                                ;   {runtime_call}
  0x000000000f11f544: add    $0x10,%rsp
  0x000000000f11f548: pop    %rbp
  0x000000000f11f549: test   %eax,-0xeeff54f(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f11f54f: retq                      ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)

  0x000000000f11f550: mov    %rax,%rdx
  0x000000000f11f553: add    $0x10,%rsp
  0x000000000f11f557: pop    %rbp
  0x000000000f11f558: jmpq   0x000000000f115a60  ;   {runtime_call}
  0x000000000f11f55d: hlt    
  0x000000000f11f55e: hlt    
  0x000000000f11f55f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f11f560: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f11f565: callq  0x000000000f11f56a
  0x000000000f11f56a: subq   $0x5,(%rsp)
  0x000000000f11f56f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f11f574: hlt    
  0x000000000f11f575: hlt    
  0x000000000f11f576: hlt    
  0x000000000f11f577: hlt    
<nmethod compile_id='27' compiler='C2' level='4' entry='0x000000000f11f500' size='584' address='0x000000000f11f3d0' relocation_offset='288' insts_offset='304' stub_offset='400' scopes_data_offset='432' scopes_pcs_offset='456' dependencies_offset='552' handler_table_offset='560' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='8455' iicount='8455' stamp='0.418'/>
<writer thread='8892'/>
Decoding compiled method 0x000000000f127f50:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;
  # parm0:    rdx:rdx   = &apos;[Ljava/lang/String;&apos;
  #           [sp+0xb0]  (sp of caller)
  0x000000000f128180: mov    %eax,-0x6000(%rsp)
  0x000000000f128187: push   %rbp
  0x000000000f128188: sub    $0xa0,%rsp
  0x000000000f12818f: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128199: mov    0xdc(%rsi),%edi
  0x000000000f12819f: add    $0x8,%edi
  0x000000000f1281a2: mov    %edi,0xdc(%rsi)
  0x000000000f1281a8: movabs $0x86e2d40,%rsi    ;   {metadata({method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1281b2: and    $0x1ff8,%edi
  0x000000000f1281b8: cmp    $0x0,%edi
  0x000000000f1281bb: je     0x000000000f1289bb
  0x000000000f1281c1: movabs $0x1e070828,%rdx   ;   {metadata(&apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1281cb: mov    0x60(%r15),%rax
  0x000000000f1281cf: lea    0x18(%rax),%rdi
  0x000000000f1281d3: cmp    0x70(%r15),%rdi
  0x000000000f1281d7: ja     0x000000000f1289d2
  0x000000000f1281dd: mov    %rdi,0x60(%r15)
  0x000000000f1281e1: mov    0xa8(%rdx),%rcx
  0x000000000f1281e8: mov    %rcx,(%rax)
  0x000000000f1281eb: mov    %rdx,%rcx
  0x000000000f1281ee: mov    %ecx,0x8(%rax)
  0x000000000f1281f1: xor    %rcx,%rcx
  0x000000000f1281f4: mov    %ecx,0xc(%rax)
  0x000000000f1281f7: xor    %rcx,%rcx
  0x000000000f1281fa: mov    %rcx,0x10(%rax)    ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@0 (line 14)

  0x000000000f1281fe: mov    %rax,%rdx
  0x000000000f128201: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12820b: addq   $0x1,0x108(%rsi)
  0x000000000f128213: movabs $0x86e34b8,%rdx    ;   {metadata(method data for {method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12821d: mov    0xdc(%rdx),%esi
  0x000000000f128223: add    $0x8,%esi
  0x000000000f128226: mov    %esi,0xdc(%rdx)
  0x000000000f12822c: movabs $0x86e2b48,%rdx    ;   {metadata({method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128236: and    $0x7ffff8,%esi
  0x000000000f12823c: cmp    $0x0,%esi
  0x000000000f12823f: je     0x000000000f1289df
  0x000000000f128245: mov    %rax,%rdx
  0x000000000f128248: movabs $0x86e34b8,%rsi    ;   {metadata(method data for {method} {0x00000000086e2b50} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128252: addq   $0x1,0x108(%rsi)
  0x000000000f12825a: movabs $0x840e480,%rdx    ;   {metadata(method data for {method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f128264: mov    0xdc(%rdx),%esi
  0x000000000f12826a: add    $0x8,%esi
  0x000000000f12826d: mov    %esi,0xdc(%rdx)
  0x000000000f128273: movabs $0x82e0488,%rdx    ;   {metadata({method} {0x00000000082e0490} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x000000000f12827d: and    $0x7ffff8,%esi
  0x000000000f128283: cmp    $0x0,%esi
  0x000000000f128286: je     0x000000000f1289f6
  0x000000000f12828c: mov    $0x0,%edx
  0x000000000f128291: mov    $0x0,%esi
  0x000000000f128296: jmpq   0x000000000f128358  ;*iload_3
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@12 (line 16)

  0x000000000f12829b: nopl   0x0(%rax,%rax,1)
  0x000000000f1282a0: mov    %rax,%rdi
  0x000000000f1282a3: movabs $0x86e3158,%rbx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1282ad: addq   $0x1,0x148(%rbx)
  0x000000000f1282b5: movabs $0x86e3028,%rdi    ;   {metadata(method data for {method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1282bf: mov    0xdc(%rdi),%ebx
  0x000000000f1282c5: add    $0x8,%ebx
  0x000000000f1282c8: mov    %ebx,0xdc(%rdi)
  0x000000000f1282ce: movabs $0x86e2c20,%rdi    ;   {metadata({method} {0x00000000086e2c28} &apos;myadd&apos; &apos;(II)I&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1282d8: and    $0x7ffff8,%ebx
  0x000000000f1282de: cmp    $0x0,%ebx
  0x000000000f1282e1: je     0x000000000f128a0d
  0x000000000f1282e7: inc    %esi
  0x000000000f1282e9: vmovsd 0x10(%rax),%xmm0
  0x000000000f1282ee: vmovq  %xmm0,%rdi         ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@6 (line 9)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)

  0x000000000f1282f3: movslq %esi,%rbx
  0x000000000f1282f6: add    %rbx,%rdi
  0x000000000f1282f9: mov    %rdi,0x58(%rsp)
  0x000000000f1282fe: vmovsd 0x58(%rsp),%xmm0
  0x000000000f128304: vmovsd %xmm0,0x10(%rax)
  0x000000000f128309: lock addl $0x0,(%rsp)     ;*putfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@12 (line 9)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)

  0x000000000f12830e: inc    %edx
  0x000000000f128310: movabs $0x86e3158,%rdi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f12831a: mov    0xe0(%rdi),%ebx
  0x000000000f128320: add    $0x8,%ebx
  0x000000000f128323: mov    %ebx,0xe0(%rdi)
  0x000000000f128329: movabs $0x86e2d40,%rdi    ;   {metadata({method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128333: and    $0xfff8,%ebx
  0x000000000f128339: cmp    $0x0,%ebx
  0x000000000f12833c: je     0x000000000f128a24  ; OopMap{rax=Oop off=450}
                                                ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)

  0x000000000f128342: test   %eax,-0xef08248(%rip)        # 0x0000000000220100
                                                ;   {poll}
  0x000000000f128348: movabs $0x86e3158,%rdi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128352: incl   0x168(%rdi)        ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)

  0x000000000f128358: cmp    $0xf4240,%edx
  0x000000000f12835e: movabs $0x86e3158,%rdi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128368: movabs $0x118,%rbx
  0x000000000f128372: jge    0x000000000f128382
  0x000000000f128378: movabs $0x128,%rbx
  0x000000000f128382: mov    (%rdi,%rbx,1),%rcx
  0x000000000f128386: lea    0x1(%rcx),%rcx
  0x000000000f12838a: mov    %rcx,(%rdi,%rbx,1)
  0x000000000f12838e: jl     0x000000000f1282a0  ;*if_icmpge
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@15 (line 16)

  0x000000000f128394: mov    %esi,0x68(%rsp)
  0x000000000f128398: mov    %rax,0x80(%rsp)
  0x000000000f1283a0: movabs $0xd5d00c78,%rdi   ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x000000000f1283aa: mov    0x6c(%rdi),%ebx    ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@31 (line 20)

  0x000000000f1283ad: data16 xchg %ax,%ax
  0x000000000f1283b0: jmpq   0x000000000f128a4a  ;   {no_reloc}
  0x000000000f1283b5: add    %al,(%rax)
  0x000000000f1283b7: add    %al,(%rax)
  0x000000000f1283b9: add    %ch,%cl
  0x000000000f1283bb: xchg   %eax,%ebp
  0x000000000f1283bc: (bad)  
  0x000000000f1283bd: add    %al,(%rax)         ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)

  0x000000000f1283bf: mov    %rax,%rdx
  0x000000000f1283c2: movabs $0x86e3158,%r8     ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1283cc: addq   $0x1,0x180(%r8)
  0x000000000f1283d4: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@38 (line 20)

  0x000000000f1283d7: mov    %rdi,0x78(%rsp)
  0x000000000f1283dc: mov    %rbx,0x70(%rsp)
  0x000000000f1283e1: mov    %rax,0x60(%rsp)
  0x000000000f1283e6: nop
  0x000000000f1283e7: callq  0x000000000f0561a0  ; OopMap{[96]=Oop [128]=Oop [112]=Oop [120]=Oop off=620}
                                                ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@38 (line 20)
                                                ;   {optimized virtual_call}
  0x000000000f1283ec: mov    0x60(%rsp),%rax
  0x000000000f1283f1: movabs $0x86e3158,%r8     ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1283fb: mov    0x8(%rax),%eax
  0x000000000f1283fe: cmp    0x198(%r8),%rax
  0x000000000f128405: jne    0x000000000f128414
  0x000000000f128407: addq   $0x1,0x1a0(%r8)
  0x000000000f12840f: jmpq   0x000000000f12847a
  0x000000000f128414: cmp    0x1a8(%r8),%rax
  0x000000000f12841b: jne    0x000000000f12842a
  0x000000000f12841d: addq   $0x1,0x1b0(%r8)
  0x000000000f128425: jmpq   0x000000000f12847a
  0x000000000f12842a: cmpq   $0x0,0x198(%r8)
  0x000000000f128435: jne    0x000000000f12844e
  0x000000000f128437: mov    %rax,0x198(%r8)
  0x000000000f12843e: movq   $0x1,0x1a0(%r8)
  0x000000000f128449: jmpq   0x000000000f12847a
  0x000000000f12844e: cmpq   $0x0,0x1a8(%r8)
  0x000000000f128459: jne    0x000000000f128472
  0x000000000f12845b: mov    %rax,0x1a8(%r8)
  0x000000000f128462: movq   $0x1,0x1b0(%r8)
  0x000000000f12846d: jmpq   0x000000000f12847a
  0x000000000f128472: addq   $0x1,0x190(%r8)
  0x000000000f12847a: movabs $0xd6010b70,%r8    ;   {oop(&quot;Sum:&quot;)}
  0x000000000f128484: mov    0x60(%rsp),%rdx    ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@43 (line 20)

  0x000000000f128489: nop
  0x000000000f12848a: nop
  0x000000000f12848b: nop
  0x000000000f12848c: nop
  0x000000000f12848d: movabs $0xffffffffffffffff,%rax
  0x000000000f128497: callq  0x000000000f0563e0  ; OopMap{[128]=Oop [112]=Oop [120]=Oop off=796}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@43 (line 20)
                                                ;   {virtual_call}
  0x000000000f12849c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f128a61
  0x000000000f12849f: mov    %rax,%r8
  0x000000000f1284a2: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1284ac: mov    0x8(%r8),%r8d
  0x000000000f1284b0: cmp    0x1c8(%rdx),%r8
  0x000000000f1284b7: jne    0x000000000f1284c6
  0x000000000f1284b9: addq   $0x1,0x1d0(%rdx)
  0x000000000f1284c1: jmpq   0x000000000f12852c
  0x000000000f1284c6: cmp    0x1d8(%rdx),%r8
  0x000000000f1284cd: jne    0x000000000f1284dc
  0x000000000f1284cf: addq   $0x1,0x1e0(%rdx)
  0x000000000f1284d7: jmpq   0x000000000f12852c
  0x000000000f1284dc: cmpq   $0x0,0x1c8(%rdx)
  0x000000000f1284e7: jne    0x000000000f128500
  0x000000000f1284e9: mov    %r8,0x1c8(%rdx)
  0x000000000f1284f0: movq   $0x1,0x1d0(%rdx)
  0x000000000f1284fb: jmpq   0x000000000f12852c
  0x000000000f128500: cmpq   $0x0,0x1d8(%rdx)
  0x000000000f12850b: jne    0x000000000f128524
  0x000000000f12850d: mov    %r8,0x1d8(%rdx)
  0x000000000f128514: movq   $0x1,0x1e0(%rdx)
  0x000000000f12851f: jmpq   0x000000000f12852c
  0x000000000f128524: addq   $0x1,0x1c0(%rdx)
  0x000000000f12852c: mov    0x68(%rsp),%r8d
  0x000000000f128531: mov    %rax,%rdx          ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)

  0x000000000f128534: nop
  0x000000000f128535: movabs $0xffffffffffffffff,%rax
  0x000000000f12853f: callq  0x000000000f0563e0  ; OopMap{[128]=Oop [112]=Oop [120]=Oop off=964}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)
                                                ;   {virtual_call}
  0x000000000f128544: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f128a66
  0x000000000f128547: mov    %rax,%rdx
  0x000000000f12854a: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128554: mov    0x8(%rdx),%edx
  0x000000000f128557: cmp    0x1f8(%rsi),%rdx
  0x000000000f12855e: jne    0x000000000f12856d
  0x000000000f128560: addq   $0x1,0x200(%rsi)
  0x000000000f128568: jmpq   0x000000000f1285d3
  0x000000000f12856d: cmp    0x208(%rsi),%rdx
  0x000000000f128574: jne    0x000000000f128583
  0x000000000f128576: addq   $0x1,0x210(%rsi)
  0x000000000f12857e: jmpq   0x000000000f1285d3
  0x000000000f128583: cmpq   $0x0,0x1f8(%rsi)
  0x000000000f12858e: jne    0x000000000f1285a7
  0x000000000f128590: mov    %rdx,0x1f8(%rsi)
  0x000000000f128597: movq   $0x1,0x200(%rsi)
  0x000000000f1285a2: jmpq   0x000000000f1285d3
  0x000000000f1285a7: cmpq   $0x0,0x208(%rsi)
  0x000000000f1285b2: jne    0x000000000f1285cb
  0x000000000f1285b4: mov    %rdx,0x208(%rsi)
  0x000000000f1285bb: movq   $0x1,0x210(%rsi)
  0x000000000f1285c6: jmpq   0x000000000f1285d3
  0x000000000f1285cb: addq   $0x1,0x1f0(%rsi)
  0x000000000f1285d3: mov    %rax,%rdx          ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)

  0x000000000f1285d6: nop
  0x000000000f1285d7: nop
  0x000000000f1285d8: nop
  0x000000000f1285d9: nop
  0x000000000f1285da: nop
  0x000000000f1285db: nop
  0x000000000f1285dc: nop
  0x000000000f1285dd: movabs $0xffffffffffffffff,%rax
  0x000000000f1285e7: callq  0x000000000f0563e0  ; OopMap{[128]=Oop [112]=Oop [120]=Oop off=1132}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)
                                                ;   {virtual_call}
  0x000000000f1285ec: mov    0x70(%rsp),%rbx
  0x000000000f1285f1: cmp    (%rbx),%rax        ; implicit exception: dispatches to 0x000000000f128a6b
  0x000000000f1285f4: mov    %rbx,%r8
  0x000000000f1285f7: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128601: mov    0x8(%r8),%r8d
  0x000000000f128605: cmp    0x228(%rdx),%r8
  0x000000000f12860c: jne    0x000000000f12861b
  0x000000000f12860e: addq   $0x1,0x230(%rdx)
  0x000000000f128616: jmpq   0x000000000f128681
  0x000000000f12861b: cmp    0x238(%rdx),%r8
  0x000000000f128622: jne    0x000000000f128631
  0x000000000f128624: addq   $0x1,0x240(%rdx)
  0x000000000f12862c: jmpq   0x000000000f128681
  0x000000000f128631: cmpq   $0x0,0x228(%rdx)
  0x000000000f12863c: jne    0x000000000f128655
  0x000000000f12863e: mov    %r8,0x228(%rdx)
  0x000000000f128645: movq   $0x1,0x230(%rdx)
  0x000000000f128650: jmpq   0x000000000f128681
  0x000000000f128655: cmpq   $0x0,0x238(%rdx)
  0x000000000f128660: jne    0x000000000f128679
  0x000000000f128662: mov    %r8,0x238(%rdx)
  0x000000000f128669: movq   $0x1,0x240(%rdx)
  0x000000000f128674: jmpq   0x000000000f128681
  0x000000000f128679: addq   $0x1,0x220(%rdx)
  0x000000000f128681: mov    %rax,%r8
  0x000000000f128684: mov    %rbx,%rdx          ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)

  0x000000000f128687: nop
  0x000000000f128688: nop
  0x000000000f128689: nop
  0x000000000f12868a: nop
  0x000000000f12868b: nop
  0x000000000f12868c: nop
  0x000000000f12868d: movabs $0xffffffffffffffff,%rax
  0x000000000f128697: callq  0x000000000f0563e0  ; OopMap{[128]=Oop [120]=Oop off=1308}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)
                                                ;   {virtual_call}
  0x000000000f12869c: mov    0x78(%rsp),%rdi
  0x000000000f1286a1: mov    0x6c(%rdi),%esi    ;*getstatic out
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@56 (line 21)

  0x000000000f1286a4: nopl   0x0(%rax)
  0x000000000f1286a8: jmpq   0x000000000f128a7f  ;   {no_reloc}
  0x000000000f1286ad: add    %al,(%rax)
  0x000000000f1286af: add    %al,(%rax)
  0x000000000f1286b1: add    %ch,%cl
  0x000000000f1286b3: rolb   %cl,(%rbx)
  0x000000000f1286b5: add    %al,(%rax)         ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)

  0x000000000f1286b7: mov    %rax,%rdx
  0x000000000f1286ba: movabs $0x86e3158,%rdi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1286c4: addq   $0x1,0x250(%rdi)
  0x000000000f1286cc: mov    %rax,%rdx          ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@63 (line 21)

  0x000000000f1286cf: mov    %rsi,0x90(%rsp)
  0x000000000f1286d7: mov    %rax,0x88(%rsp)
  0x000000000f1286df: callq  0x000000000f0561a0  ; OopMap{[128]=Oop [136]=Oop [144]=Oop off=1380}
                                                ;*invokespecial &lt;init&gt;
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@63 (line 21)
                                                ;   {optimized virtual_call}
  0x000000000f1286e4: mov    0x88(%rsp),%rax
  0x000000000f1286ec: movabs $0x86e3158,%r8     ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1286f6: mov    0x8(%rax),%eax
  0x000000000f1286f9: cmp    0x268(%r8),%rax
  0x000000000f128700: jne    0x000000000f12870f
  0x000000000f128702: addq   $0x1,0x270(%r8)
  0x000000000f12870a: jmpq   0x000000000f128775
  0x000000000f12870f: cmp    0x278(%r8),%rax
  0x000000000f128716: jne    0x000000000f128725
  0x000000000f128718: addq   $0x1,0x280(%r8)
  0x000000000f128720: jmpq   0x000000000f128775
  0x000000000f128725: cmpq   $0x0,0x268(%r8)
  0x000000000f128730: jne    0x000000000f128749
  0x000000000f128732: mov    %rax,0x268(%r8)
  0x000000000f128739: movq   $0x1,0x270(%r8)
  0x000000000f128744: jmpq   0x000000000f128775
  0x000000000f128749: cmpq   $0x0,0x278(%r8)
  0x000000000f128754: jne    0x000000000f12876d
  0x000000000f128756: mov    %rax,0x278(%r8)
  0x000000000f12875d: movq   $0x1,0x280(%r8)
  0x000000000f128768: jmpq   0x000000000f128775
  0x000000000f12876d: addq   $0x1,0x260(%r8)
  0x000000000f128775: movabs $0xd6010ba0,%r8    ;   {oop(&quot;Test.sum:&quot;)}
  0x000000000f12877f: mov    0x88(%rsp),%rdx    ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@68 (line 21)

  0x000000000f128787: nop
  0x000000000f128788: nop
  0x000000000f128789: nop
  0x000000000f12878a: nop
  0x000000000f12878b: nop
  0x000000000f12878c: nop
  0x000000000f12878d: movabs $0xffffffffffffffff,%rax
  0x000000000f128797: callq  0x000000000f0563e0  ; OopMap{[128]=Oop [144]=Oop off=1564}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@68 (line 21)
                                                ;   {virtual_call}
  0x000000000f12879c: mov    0x80(%rsp),%r8
  0x000000000f1287a4: vmovsd 0x10(%r8),%xmm0
  0x000000000f1287aa: vmovq  %xmm0,%r8          ;*getfield sum
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@72 (line 21)

  0x000000000f1287af: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f128a96
  0x000000000f1287b2: mov    %rax,%rdx
  0x000000000f1287b5: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f1287bf: mov    0x8(%rdx),%edx
  0x000000000f1287c2: cmp    0x298(%rsi),%rdx
  0x000000000f1287c9: jne    0x000000000f1287d8
  0x000000000f1287cb: addq   $0x1,0x2a0(%rsi)
  0x000000000f1287d3: jmpq   0x000000000f12883e
  0x000000000f1287d8: cmp    0x2a8(%rsi),%rdx
  0x000000000f1287df: jne    0x000000000f1287ee
  0x000000000f1287e1: addq   $0x1,0x2b0(%rsi)
  0x000000000f1287e9: jmpq   0x000000000f12883e
  0x000000000f1287ee: cmpq   $0x0,0x298(%rsi)
  0x000000000f1287f9: jne    0x000000000f128812
  0x000000000f1287fb: mov    %rdx,0x298(%rsi)
  0x000000000f128802: movq   $0x1,0x2a0(%rsi)
  0x000000000f12880d: jmpq   0x000000000f12883e
  0x000000000f128812: cmpq   $0x0,0x2a8(%rsi)
  0x000000000f12881d: jne    0x000000000f128836
  0x000000000f12881f: mov    %rdx,0x2a8(%rsi)
  0x000000000f128826: movq   $0x1,0x2b0(%rsi)
  0x000000000f128831: jmpq   0x000000000f12883e
  0x000000000f128836: addq   $0x1,0x290(%rsi)
  0x000000000f12883e: mov    %rax,%rdx          ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)

  0x000000000f128841: nop
  0x000000000f128842: nop
  0x000000000f128843: nop
  0x000000000f128844: nop
  0x000000000f128845: movabs $0xffffffffffffffff,%rax
  0x000000000f12884f: callq  0x000000000f0563e0  ; OopMap{[144]=Oop off=1748}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)
                                                ;   {virtual_call}
  0x000000000f128854: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x000000000f128a9b
  0x000000000f128857: mov    %rax,%rdx
  0x000000000f12885a: movabs $0x86e3158,%rsi    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128864: mov    0x8(%rdx),%edx
  0x000000000f128867: cmp    0x2c8(%rsi),%rdx
  0x000000000f12886e: jne    0x000000000f12887d
  0x000000000f128870: addq   $0x1,0x2d0(%rsi)
  0x000000000f128878: jmpq   0x000000000f1288e3
  0x000000000f12887d: cmp    0x2d8(%rsi),%rdx
  0x000000000f128884: jne    0x000000000f128893
  0x000000000f128886: addq   $0x1,0x2e0(%rsi)
  0x000000000f12888e: jmpq   0x000000000f1288e3
  0x000000000f128893: cmpq   $0x0,0x2c8(%rsi)
  0x000000000f12889e: jne    0x000000000f1288b7
  0x000000000f1288a0: mov    %rdx,0x2c8(%rsi)
  0x000000000f1288a7: movq   $0x1,0x2d0(%rsi)
  0x000000000f1288b2: jmpq   0x000000000f1288e3
  0x000000000f1288b7: cmpq   $0x0,0x2d8(%rsi)
  0x000000000f1288c2: jne    0x000000000f1288db
  0x000000000f1288c4: mov    %rdx,0x2d8(%rsi)
  0x000000000f1288cb: movq   $0x1,0x2e0(%rsi)
  0x000000000f1288d6: jmpq   0x000000000f1288e3
  0x000000000f1288db: addq   $0x1,0x2c0(%rsi)
  0x000000000f1288e3: mov    %rax,%rdx          ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)

  0x000000000f1288e6: nop
  0x000000000f1288e7: nop
  0x000000000f1288e8: nop
  0x000000000f1288e9: nop
  0x000000000f1288ea: nop
  0x000000000f1288eb: nop
  0x000000000f1288ec: nop
  0x000000000f1288ed: movabs $0xffffffffffffffff,%rax
  0x000000000f1288f7: callq  0x000000000f0563e0  ; OopMap{[144]=Oop off=1916}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)
                                                ;   {virtual_call}
  0x000000000f1288fc: mov    0x90(%rsp),%rsi
  0x000000000f128904: cmp    (%rsi),%rax        ; implicit exception: dispatches to 0x000000000f128aa0
  0x000000000f128907: mov    %rsi,%r8
  0x000000000f12890a: movabs $0x86e3158,%rdx    ;   {metadata(method data for {method} {0x00000000086e2d48} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;com/awesomeJdk/practise/bthread/Thread2_volatile&apos;)}
  0x000000000f128914: mov    0x8(%r8),%r8d
  0x000000000f128918: cmp    0x2f8(%rdx),%r8
  0x000000000f12891f: jne    0x000000000f12892e
  0x000000000f128921: addq   $0x1,0x300(%rdx)
  0x000000000f128929: jmpq   0x000000000f128994
  0x000000000f12892e: cmp    0x308(%rdx),%r8
  0x000000000f128935: jne    0x000000000f128944
  0x000000000f128937: addq   $0x1,0x310(%rdx)
  0x000000000f12893f: jmpq   0x000000000f128994
  0x000000000f128944: cmpq   $0x0,0x2f8(%rdx)
  0x000000000f12894f: jne    0x000000000f128968
  0x000000000f128951: mov    %r8,0x2f8(%rdx)
  0x000000000f128958: movq   $0x1,0x300(%rdx)
  0x000000000f128963: jmpq   0x000000000f128994
  0x000000000f128968: cmpq   $0x0,0x308(%rdx)
  0x000000000f128973: jne    0x000000000f12898c
  0x000000000f128975: mov    %r8,0x308(%rdx)
  0x000000000f12897c: movq   $0x1,0x310(%rdx)
  0x000000000f128987: jmpq   0x000000000f128994
  0x000000000f12898c: addq   $0x1,0x2f0(%rdx)
  0x000000000f128994: mov    %rax,%r8
  0x000000000f128997: mov    %rsi,%rdx          ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)

  0x000000000f12899a: nop
  0x000000000f12899b: nop
  0x000000000f12899c: nop
  0x000000000f12899d: movabs $0xffffffffffffffff,%rax
  0x000000000f1289a7: callq  0x000000000f0563e0  ; OopMap{off=2092}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)
                                                ;   {virtual_call}
  0x000000000f1289ac: add    $0xa0,%rsp
  0x000000000f1289b3: pop    %rbp
  0x000000000f1289b4: test   %eax,-0xef088ba(%rip)        # 0x0000000000220100
                                                ;   {poll_return}
  0x000000000f1289ba: retq   
  0x000000000f1289bb: mov    %rsi,0x8(%rsp)
  0x000000000f1289c0: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1289c8: callq  0x000000000f111820  ; OopMap{rdx=Oop off=2125}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@-1 (line 14)
                                                ;   {runtime_call}
  0x000000000f1289cd: jmpq   0x000000000f1281c1
  0x000000000f1289d2: mov    %rdx,%rdx
  0x000000000f1289d5: callq  0x000000000f10d700  ; OopMap{off=2138}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@0 (line 14)
                                                ;   {runtime_call}
  0x000000000f1289da: jmpq   0x000000000f1281fe
  0x000000000f1289df: mov    %rdx,0x8(%rsp)
  0x000000000f1289e4: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f1289ec: callq  0x000000000f111820  ; OopMap{rax=Oop off=2161}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::&lt;init&gt;@-1 (line 4)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@4 (line 14)
                                                ;   {runtime_call}
  0x000000000f1289f1: jmpq   0x000000000f128245
  0x000000000f1289f6: mov    %rdx,0x8(%rsp)
  0x000000000f1289fb: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f128a03: callq  0x000000000f111820  ; OopMap{rax=Oop off=2184}
                                                ;*synchronization entry
                                                ; - java.lang.Object::&lt;init&gt;@-1 (line 37)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::&lt;init&gt;@1 (line 4)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@4 (line 14)
                                                ;   {runtime_call}
  0x000000000f128a08: jmpq   0x000000000f12828c
  0x000000000f128a0d: mov    %rdi,0x8(%rsp)
  0x000000000f128a12: movq   $0xffffffffffffffff,(%rsp)
  0x000000000f128a1a: callq  0x000000000f111820  ; OopMap{rax=Oop off=2207}
                                                ;*synchronization entry
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::myadd@-1 (line 8)
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@21 (line 17)
                                                ;   {runtime_call}
  0x000000000f128a1f: jmpq   0x000000000f1282e7
  0x000000000f128a24: mov    %rdi,0x8(%rsp)
  0x000000000f128a29: movq   $0x1c,(%rsp)
  0x000000000f128a31: callq  0x000000000f111820  ; OopMap{rax=Oop off=2230}
                                                ;*goto
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@28 (line 16)
                                                ;   {runtime_call}
  0x000000000f128a36: jmpq   0x000000000f128342
  0x000000000f128a3b: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f128a45: mov    $0xa050f00,%eax
  0x000000000f128a4a: callq  0x000000000f110760  ; OopMap{[128]=Oop rdi=Oop rbx=Oop off=2255}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)
                                                ;   {runtime_call}
  0x000000000f128a4f: jmpq   0x000000000f1283b0
  0x000000000f128a54: mov    %rdx,%rdx
  0x000000000f128a57: callq  0x000000000f10d420  ; OopMap{rdi=Oop rbx=Oop [128]=Oop off=2268}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@34 (line 20)
                                                ;   {runtime_call}
  0x000000000f128a5c: jmpq   0x000000000f1283bf
  0x000000000f128a61: callq  0x000000000f10cf80  ; OopMap{[128]=Oop [112]=Oop [120]=Oop rax=Oop off=2278}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@47 (line 20)
                                                ;   {runtime_call}
  0x000000000f128a66: callq  0x000000000f10cf80  ; OopMap{[128]=Oop [112]=Oop [120]=Oop rax=Oop off=2283}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@50 (line 20)
                                                ;   {runtime_call}
  0x000000000f128a6b: callq  0x000000000f10cf80  ; OopMap{[128]=Oop [120]=Oop rax=Oop rbx=Oop off=2288}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@53 (line 20)
                                                ;   {runtime_call}
  0x000000000f128a70: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x000000000f128a7a: mov    $0xa050f00,%eax
  0x000000000f128a7f: callq  0x000000000f110760  ; OopMap{[128]=Oop rsi=Oop off=2308}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)
                                                ;   {runtime_call}
  0x000000000f128a84: jmpq   0x000000000f1286a8
  0x000000000f128a89: mov    %rdx,%rdx
  0x000000000f128a8c: callq  0x000000000f10d420  ; OopMap{[128]=Oop rsi=Oop off=2321}
                                                ;*new  ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@59 (line 21)
                                                ;   {runtime_call}
  0x000000000f128a91: jmpq   0x000000000f1286b7
  0x000000000f128a96: callq  0x000000000f10cf80  ; OopMap{[144]=Oop rax=Oop off=2331}
                                                ;*invokevirtual append
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@75 (line 21)
                                                ;   {runtime_call}
  0x000000000f128a9b: callq  0x000000000f10cf80  ; OopMap{[144]=Oop rax=Oop off=2336}
                                                ;*invokevirtual toString
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@78 (line 21)
                                                ;   {runtime_call}
  0x000000000f128aa0: callq  0x000000000f10cf80  ; OopMap{rax=Oop rsi=Oop off=2341}
                                                ;*invokevirtual println
                                                ; - com.awesomeJdk.practise.bthread.Thread2_volatile::main@81 (line 21)
                                                ;   {runtime_call}
  0x000000000f128aa5: nop
  0x000000000f128aa6: nop
  0x000000000f128aa7: mov    0x2a8(%r15),%rax
  0x000000000f128aae: movabs $0x0,%r10
  0x000000000f128ab8: mov    %r10,0x2a8(%r15)
  0x000000000f128abf: movabs $0x0,%r10
  0x000000000f128ac9: mov    %r10,0x2b0(%r15)
  0x000000000f128ad0: add    $0xa0,%rsp
  0x000000000f128ad7: pop    %rbp
  0x000000000f128ad8: jmpq   0x000000000f10cd60  ;   {runtime_call}
  0x000000000f128add: hlt    
  0x000000000f128ade: hlt    
  0x000000000f128adf: hlt    
[Stub Code]
  0x000000000f128ae0: nop                       ;   {no_reloc}
  0x000000000f128ae1: nop
  0x000000000f128ae2: nop
  0x000000000f128ae3: nop
  0x000000000f128ae4: nop
  0x000000000f128ae5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128aef: jmpq   0x000000000f128aef  ;   {runtime_call}
  0x000000000f128af4: nop
  0x000000000f128af5: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128aff: jmpq   0x000000000f128aff  ;   {runtime_call}
  0x000000000f128b04: nop
  0x000000000f128b05: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b0f: jmpq   0x000000000f128b0f  ;   {runtime_call}
  0x000000000f128b14: nop
  0x000000000f128b15: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b1f: jmpq   0x000000000f128b1f  ;   {runtime_call}
  0x000000000f128b24: nop
  0x000000000f128b25: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b2f: jmpq   0x000000000f128b2f  ;   {runtime_call}
  0x000000000f128b34: nop
  0x000000000f128b35: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b3f: jmpq   0x000000000f128b3f  ;   {runtime_call}
  0x000000000f128b44: nop
  0x000000000f128b45: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b4f: jmpq   0x000000000f128b4f  ;   {runtime_call}
  0x000000000f128b54: nop
  0x000000000f128b55: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b5f: jmpq   0x000000000f128b5f  ;   {runtime_call}
  0x000000000f128b64: nop
  0x000000000f128b65: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b6f: jmpq   0x000000000f128b6f  ;   {runtime_call}
  0x000000000f128b74: nop
  0x000000000f128b75: movabs $0x0,%rbx          ;   {static_stub}
  0x000000000f128b7f: jmpq   0x000000000f128b7f  ;   {runtime_call}
[Exception Handler]
  0x000000000f128b84: callq  0x000000000f10efa0  ;   {runtime_call}
  0x000000000f128b89: mov    %rsp,-0x28(%rsp)
  0x000000000f128b8e: sub    $0x80,%rsp
  0x000000000f128b95: mov    %rax,0x78(%rsp)
  0x000000000f128b9a: mov    %rcx,0x70(%rsp)
  0x000000000f128b9f: mov    %rdx,0x68(%rsp)
  0x000000000f128ba4: mov    %rbx,0x60(%rsp)
  0x000000000f128ba9: mov    %rbp,0x50(%rsp)
  0x000000000f128bae: mov    %rsi,0x48(%rsp)
  0x000000000f128bb3: mov    %rdi,0x40(%rsp)
  0x000000000f128bb8: mov    %r8,0x38(%rsp)
  0x000000000f128bbd: mov    %r9,0x30(%rsp)
  0x000000000f128bc2: mov    %r10,0x28(%rsp)
  0x000000000f128bc7: mov    %r11,0x20(%rsp)
  0x000000000f128bcc: mov    %r12,0x18(%rsp)
  0x000000000f128bd1: mov    %r13,0x10(%rsp)
  0x000000000f128bd6: mov    %r14,0x8(%rsp)
  0x000000000f128bdb: mov    %r15,(%rsp)
  0x000000000f128bdf: movabs $0x276af20,%rcx    ;   {external_word}
  0x000000000f128be9: movabs $0xf128b89,%rdx    ;   {internal_word}
  0x000000000f128bf3: mov    %rsp,%r8
  0x000000000f128bf6: and    $0xfffffffffffffff0,%rsp
  0x000000000f128bfa: callq  0x000000000242d370  ;   {runtime_call}
  0x000000000f128bff: hlt    
[Deopt Handler Code]
  0x000000000f128c00: movabs $0xf128c00,%r10    ;   {section_word}
  0x000000000f128c0a: push   %r10
  0x000000000f128c0c: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f128c11: hlt    
  0x000000000f128c12: hlt    
  0x000000000f128c13: hlt    
  0x000000000f128c14: hlt    
  0x000000000f128c15: hlt    
  0x000000000f128c16: hlt    
  0x000000000f128c17: hlt    
<nmethod compile_id='26' compiler='C1' level='3' entry='0x000000000f128180' size='4600' address='0x000000000f127f50' relocation_offset='288' insts_offset='560' stub_offset='2960' scopes_data_offset='3320' scopes_pcs_offset='3736' dependencies_offset='4536' nul_chk_table_offset='4544' oops_offset='3272' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='1000000' iicount='1' stamp='0.436'/>
<writer thread='12324'/>
Decoding compiled method 0x000000000f123e10:
Code:
[Entry Point]
[Constants]
  # {method} {0x0000000008354790} &apos;append&apos; &apos;(C)Ljava/lang/AbstractStringBuilder;&apos; in &apos;java/lang/AbstractStringBuilder&apos;
  # this:     rdx:rdx   = &apos;java/lang/AbstractStringBuilder&apos;
  # parm0:    r8        = char
  #           [sp+0x70]  (sp of caller)
  0x000000000f123f60: mov    0x8(%rdx),%r10d
  0x000000000f123f64: cmp    %r10,%rax
  0x000000000f123f67: jne    0x000000000f055f60  ;   {runtime_call}
  0x000000000f123f6d: data16 xchg %ax,%ax
[Verified Entry Point]
  0x000000000f123f70: mov    %eax,-0x6000(%rsp)
  0x000000000f123f77: push   %rbp
  0x000000000f123f78: sub    $0x60,%rsp         ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::append@-1 (line 622)

  0x000000000f123f7c: mov    %r8d,0x20(%rsp)
  0x000000000f123f81: mov    %rdx,%rbp
  0x000000000f123f84: mov    0x10(%rdx),%r9d    ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123f88: mov    0xc(%r9),%r8d      ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ; implicit exception: dispatches to 0x000000000f124219
  0x000000000f123f8c: mov    0xc(%rdx),%r11d    ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@2 (line 622)

  0x000000000f123f90: mov    %r11d,%ecx
  0x000000000f123f93: sub    %r8d,%ecx
  0x000000000f123f96: mov    %r9,%rdi           ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123f99: inc    %ecx
  0x000000000f123f9b: mov    %r11d,%r10d
  0x000000000f123f9e: inc    %r10d              ;*iadd
                                                ; - java.lang.AbstractStringBuilder::append@6 (line 622)

  0x000000000f123fa1: test   %ecx,%ecx
  0x000000000f123fa3: jg     0x000000000f123fd9  ;*return
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@15 (line 122)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123fa5: mov    %r10d,0xc(%rbp)    ;*putfield count
                                                ; - java.lang.AbstractStringBuilder::append@22 (line 623)

  0x000000000f123fa9: test   %rdi,%rdi
  0x000000000f123fac: je     0x000000000f1241a3
  0x000000000f123fb2: mov    0xc(%rdi),%r8d
  0x000000000f123fb6: cmp    %r8d,%r11d
  0x000000000f123fb9: jae    0x000000000f1241b9
  0x000000000f123fbf: mov    0x20(%rsp),%r8d
  0x000000000f123fc4: mov    %r8w,0x10(%rdi,%r11,2)  ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::append@-1 (line 622)

  0x000000000f123fca: mov    %rbp,%rax
  0x000000000f123fcd: add    $0x60,%rsp
  0x000000000f123fd1: pop    %rbp
  0x000000000f123fd2: test   %eax,-0xef03fd8(%rip)        # 0x0000000000220000
                                                ;   {poll_return}
  0x000000000f123fd8: retq   
  0x000000000f123fd9: mov    %r8d,%ebx
  0x000000000f123fdc: shl    %ebx               ;*imul
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@6 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123fde: mov    %ebx,%edx
  0x000000000f123fe0: sub    %r11d,%edx
  0x000000000f123fe3: inc    %edx
  0x000000000f123fe5: test   %edx,%edx
  0x000000000f123fe7: jge    0x000000000f1240ef  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@13 (line 130)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123fed: test   %r10d,%r10d
  0x000000000f123ff0: jge    0x000000000f124001  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123ff2: test   %r10d,%r10d
  0x000000000f123ff5: jl     0x000000000f12420c  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@23 (line 133)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f123ffb: mov    $0x7fffffff,%r10d  ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@37 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124001: movslq %r10d,%r11
  0x000000000f124004: shl    %r11
  0x000000000f124007: add    $0x17,%r11
  0x000000000f12400b: mov    %r11,%rax
  0x000000000f12400e: and    $0xfffffffffffffff8,%rax
  0x000000000f124012: cmp    $0x80000,%r10d
  0x000000000f124019: ja     0x000000000f124148
  0x000000000f12401f: mov    0x60(%r15),%rbx
  0x000000000f124023: mov    %rbx,%rcx
  0x000000000f124026: add    %rax,%rcx
  0x000000000f124029: cmp    0x70(%r15),%rcx
  0x000000000f12402d: jae    0x000000000f124148
  0x000000000f124033: mov    %rcx,0x60(%r15)
  0x000000000f124037: prefetchnta 0xc0(%rcx)
  0x000000000f12403e: movq   $0x1,(%rbx)
  0x000000000f124045: prefetchnta 0x100(%rcx)
  0x000000000f12404c: movl   $0x1e010208,0x8(%rbx)  ;   {metadata({type array char})}
  0x000000000f124053: mov    %r10d,0xc(%rbx)
  0x000000000f124057: prefetchnta 0x140(%rcx)
  0x000000000f12405e: prefetchnta 0x180(%rcx)   ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124065: cmp    %r10d,%r8d
  0x000000000f124068: mov    %r10d,%esi
  0x000000000f12406b: cmovl  %r8d,%esi          ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3334)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f12406f: mov    %rbx,%r13
  0x000000000f124072: add    $0x10,%r13         ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124076: mov    %r9,%rdx           ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124079: shr    $0x3,%r11
  0x000000000f12407d: mov    %r11,%rcx
  0x000000000f124080: add    $0xfffffffffffffffe,%rcx
  0x000000000f124084: cmp    %esi,%r8d
  0x000000000f124087: jb     0x000000000f1241d1
  0x000000000f12408d: cmp    %esi,%r10d
  0x000000000f124090: jb     0x000000000f1241d1
  0x000000000f124096: test   %esi,%esi
  0x000000000f124098: jle    0x000000000f1241fa
  0x000000000f12409e: lea    0x10(%r9),%r9
  0x000000000f1240a2: cmp    %r10d,%esi
  0x000000000f1240a5: jl     0x000000000f124102
  0x000000000f1240a7: add    $0xfffffffffffffff0,%rax
  0x000000000f1240ab: shr    $0x3,%rax
  0x000000000f1240af: mov    %r9,%rcx
  0x000000000f1240b2: mov    %r13,%rdx
  0x000000000f1240b5: mov    %rax,%r8
  0x000000000f1240b8: movabs $0xf062ac0,%r10
  0x000000000f1240c2: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f1240c5: mov    0xc(%rbp),%r11d    ;*getfield count
                                                ; - java.lang.AbstractStringBuilder::append@16 (line 623)

  0x000000000f1240c9: mov    %rbx,%r8
  0x000000000f1240cc: mov    %r8d,0x10(%rbp)    ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@46 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f1240d0: mov    %r11d,%r10d
  0x000000000f1240d3: inc    %r10d              ;*iadd
                                                ; - java.lang.AbstractStringBuilder::append@21 (line 623)

  0x000000000f1240d6: mov    %rbp,%r8
  0x000000000f1240d9: shr    $0x9,%r8
  0x000000000f1240dd: mov    $0x2dd5000,%r9d
  0x000000000f1240e3: mov    %r12b,(%r9,%r8,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@46 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f1240e7: mov    %rbx,%rdi
  0x000000000f1240ea: jmpq   0x000000000f123fa5
  0x000000000f1240ef: add    $0x2,%ebx          ;*iadd
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@8 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f1240f2: test   %ebx,%ebx
  0x000000000f1240f4: jl     0x000000000f123ff2  ;*ifge
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@19 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f1240fa: mov    %ebx,%r10d
  0x000000000f1240fd: jmpq   0x000000000f124001
  0x000000000f124102: movslq %esi,%r8
  0x000000000f124105: mov    %r8,%r10
  0x000000000f124108: shl    %r10
  0x000000000f12410b: add    $0x10,%r10
  0x000000000f12410f: mov    %r10,%rcx
  0x000000000f124112: and    $0xfffffffffffffff9,%rcx
  0x000000000f124116: mov    %rbx,%rdi
  0x000000000f124119: add    %rcx,%rdi
  0x000000000f12411c: shr    $0x3,%r10
  0x000000000f124120: sub    %r10,%r11
  0x000000000f124123: mov    %r11,%rcx
  0x000000000f124126: xor    %rax,%rax
  0x000000000f124129: shl    $0x3,%rcx
  0x000000000f12412d: rep rex.W stos %al,%es:(%rdi)
  0x000000000f124130: mov    %r9,%rcx
  0x000000000f124133: mov    %r13,%rdx
  0x000000000f124136: movabs $0xf0627c0,%r10
  0x000000000f124140: callq  *%r10              ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124143: jmpq   0x000000000f1240c5
  0x000000000f124148: mov    %r8d,0x4c(%rsp)
  0x000000000f12414d: mov    %r9d,0x48(%rsp)
  0x000000000f124152: mov    %rax,0x30(%rsp)
  0x000000000f124157: mov    %r11,0x28(%rsp)
  0x000000000f12415c: mov    %r10d,0x24(%rsp)
  0x000000000f124161: movabs $0x1e010208,%rdx   ;   {metadata({type array char})}
  0x000000000f12416b: mov    0x24(%rsp),%r8d
  0x000000000f124170: mov    %rdi,0x40(%rsp)
  0x000000000f124175: xchg   %ax,%ax
  0x000000000f124177: callq  0x000000000f1156e0  ; OopMap{rbp=Oop [64]=Oop [72]=NarrowOop off=540}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ;   {runtime_call}
  0x000000000f12417c: mov    %rax,%r8
  0x000000000f12417f: mov    0x24(%rsp),%r10d
  0x000000000f124184: mov    0x28(%rsp),%r11
  0x000000000f124189: mov    0x30(%rsp),%rax
  0x000000000f12418e: mov    %r8,%rcx
  0x000000000f124191: mov    0x48(%rsp),%r9d
  0x000000000f124196: mov    0x4c(%rsp),%r8d
  0x000000000f12419b: mov    %rcx,%rbx
  0x000000000f12419e: jmpq   0x000000000f124065
  0x000000000f1241a3: mov    $0xfffffff6,%edx
  0x000000000f1241a8: mov    0x20(%rsp),%ebp
  0x000000000f1241ac: mov    %r11d,0x20(%rsp)
  0x000000000f1241b1: xchg   %ax,%ax
  0x000000000f1241b3: callq  0x000000000f0557a0  ; OopMap{off=600}
                                                ;*castore
                                                ; - java.lang.AbstractStringBuilder::append@26 (line 623)
                                                ;   {runtime_call}
  0x000000000f1241b8: int3   
  0x000000000f1241b9: mov    $0xffffffe4,%edx
  0x000000000f1241be: mov    %rdi,0x28(%rsp)
  0x000000000f1241c3: mov    %r11d,0x24(%rsp)
  0x000000000f1241c8: data16 xchg %ax,%ax
  0x000000000f1241cb: callq  0x000000000f0557a0  ; OopMap{rbp=Oop [40]=Oop off=624}
                                                ;*castore
                                                ; - java.lang.AbstractStringBuilder::append@26 (line 623)
                                                ;   {runtime_call}
  0x000000000f1241d0: int3   
  0x000000000f1241d1: mov    %r13,%rdi
  0x000000000f1241d4: xor    %rax,%rax
  0x000000000f1241d7: shl    $0x3,%rcx
  0x000000000f1241db: rep rex.W stos %al,%es:(%rdi)
  0x000000000f1241de: xor    %r8d,%r8d
  0x000000000f1241e1: mov    %rbx,%r9
  0x000000000f1241e4: xor    %edi,%edi
  0x000000000f1241e6: mov    %rbx,0x38(%rsp)
  0x000000000f1241eb: callq  0x000000000f1158e0  ; OopMap{rbp=Oop [56]=Oop off=656}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ;   {runtime_call}
  0x000000000f1241f0: mov    0x38(%rsp),%rbx
  0x000000000f1241f5: jmpq   0x000000000f1240c5
  0x000000000f1241fa: mov    %r13,%rdi
  0x000000000f1241fd: xor    %rax,%rax
  0x000000000f124200: shl    $0x3,%rcx
  0x000000000f124204: rep rex.W stos %al,%es:(%rdi)  ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124207: jmpq   0x000000000f1240c5
  0x000000000f12420c: mov    $0x8d,%edx
  0x000000000f124211: xchg   %ax,%ax
  0x000000000f124213: callq  0x000000000f0557a0  ; OopMap{rbp=Oop off=696}
                                                ;*new  ; - java.lang.AbstractStringBuilder::expandCapacity@26 (line 134)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ;   {runtime_call}
  0x000000000f124218: int3                      ;*new  ; - java.lang.AbstractStringBuilder::expandCapacity@26 (line 134)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124219: mov    $0xfffffff6,%edx
  0x000000000f12421e: nop
  0x000000000f12421f: callq  0x000000000f0557a0  ; OopMap{off=708}
                                                ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 120)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ;   {runtime_call}
  0x000000000f124224: int3                      ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3333)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f124225: mov    %rax,%rdx
  0x000000000f124228: jmp    0x000000000f12422d  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3332)
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@43 (line 137)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f12422a: mov    %rax,%rdx          ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@-1 (line 129)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)

  0x000000000f12422d: add    $0x60,%rsp
  0x000000000f124231: pop    %rbp
  0x000000000f124232: jmpq   0x000000000f115a60  ;*iload_2
                                                ; - java.lang.AbstractStringBuilder::expandCapacity@18 (line 132)
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@12 (line 121)
                                                ; - java.lang.AbstractStringBuilder::append@7 (line 622)
                                                ;   {runtime_call}
  0x000000000f124237: hlt    
  0x000000000f124238: hlt    
  0x000000000f124239: hlt    
  0x000000000f12423a: hlt    
  0x000000000f12423b: hlt    
  0x000000000f12423c: hlt    
  0x000000000f12423d: hlt    
  0x000000000f12423e: hlt    
  0x000000000f12423f: hlt    
[Exception Handler]
[Stub Code]
  0x000000000f124240: jmpq   0x000000000f10ce60  ;   {no_reloc}
[Deopt Handler Code]
  0x000000000f124245: callq  0x000000000f12424a
  0x000000000f12424a: subq   $0x5,(%rsp)
  0x000000000f12424f: jmpq   0x000000000f057600  ;   {runtime_call}
  0x000000000f124254: hlt    
  0x000000000f124255: hlt    
  0x000000000f124256: hlt    
  0x000000000f124257: hlt    
<nmethod compile_id='21' compiler='C2' level='4' entry='0x000000000f123f60' size='2136' address='0x000000000f123e10' relocation_offset='288' insts_offset='336' stub_offset='1072' scopes_data_offset='1136' scopes_pcs_offset='1424' dependencies_offset='2064' handler_table_offset='2072' nul_chk_table_offset='2120' method='java/lang/AbstractStringBuilder append (C)Ljava/lang/AbstractStringBuilder;' bytes='29' count='22362' iicount='22362' stamp='0.448'/>
<writer thread='6336'/>
<task_queued compile_id='28' method='java/util/concurrent/ConcurrentHashMap tabAt ([Ljava/util/concurrent/ConcurrentHashMap$Node;I)Ljava/util/concurrent/ConcurrentHashMap$Node;' bytes='21' count='256' iicount='256' level='3' stamp='0.448' comment='tiered' hot_count='256'/>
Decoding compiled method 0x000000000f11ef90:
Code:
[Entry Point]
  # {method} {0x000000000835ed50} &apos;getObjectVolatile&apos; &apos;(Ljava/lang/Object;J)Ljava/lang/Object;&apos; in &apos;sun/misc/Unsafe&apos;
  # this:     rdx:rdx   = &apos;sun/misc/Unsafe&apos;
  # parm0:    r8:r8     = &apos;java/lang/Object&apos;
  # parm1:    r9:r9     = long
  #           [sp+0x70]  (sp of caller)
  0x000000000f11f100: mov    0x8(%rdx),%r10d
  0x000000000f11f104: cmp    %r10,%rax
  0x000000000f11f107: je     0x000000000f11f118
  0x000000000f11f10d: jmpq   0x000000000f055f60  ;   {runtime_call}
  0x000000000f11f112: nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x000000000f11f118: mov    %eax,-0x6000(%rsp)
  0x000000000f11f11f: push   %rbp
  0x000000000f11f120: mov    %rsp,%rbp
  0x000000000f11f123: sub    $0x60,%rsp
  0x000000000f11f127: mov    %r8,0x28(%rsp)
  0x000000000f11f12c: cmp    $0x0,%r8
  0x000000000f11f130: lea    0x28(%rsp),%r8
  0x000000000f11f135: cmove  0x28(%rsp),%r8
  0x000000000f11f13b: mov    %rdx,0x20(%rsp)
  0x000000000f11f140: cmp    $0x0,%rdx
  0x000000000f11f144: lea    0x20(%rsp),%rdx
  0x000000000f11f149: cmove  0x20(%rsp),%rdx    ; OopMap{[40]=Oop [32]=Oop off=79}
  0x000000000f11f14f: movabs $0xf11f14f,%r10    ;   {section_word}
  0x000000000f11f159: mov    %r10,0x1e0(%r15)
  0x000000000f11f160: mov    %rsp,0x1d8(%r15)
  0x000000000f11f167: cmpb   $0x0,-0xc7e5087(%rip)        # 0x000000000293a0e7
                                                ;   {external_word}
  0x000000000f11f16e: je     0x000000000f11f1b6
  0x000000000f11f174: push   %rdx
  0x000000000f11f175: push   %r8
  0x000000000f11f177: push   %r9
  0x000000000f11f179: movabs $0x835ed48,%rdx    ;   {metadata({method} {0x000000000835ed50} &apos;getObjectVolatile&apos; &apos;(Ljava/lang/Object;J)Ljava/lang/Object;&apos; in &apos;sun/misc/Unsafe&apos;)}
  0x000000000f11f183: mov    %r15,%rcx
  0x000000000f11f186: sub    $0x20,%rsp
  0x000000000f11f18a: test   $0xf,%esp
  0x000000000f11f190: je     0x000000000f11f1a8
  0x000000000f11f196: sub    $0x8,%rsp
  0x000000000f11f19a: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f11f19f: add    $0x8,%rsp
  0x000000000f11f1a3: jmpq   0x000000000f11f1ad
  0x000000000f11f1a8: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f11f1ad: add    $0x20,%rsp
  0x000000000f11f1b1: pop    %r9
  0x000000000f11f1b3: pop    %r8
  0x000000000f11f1b5: pop    %rdx
  0x000000000f11f1b6: lea    0x1f8(%r15),%rcx
  0x000000000f11f1bd: movl   $0x4,0x270(%r15)
  0x000000000f11f1c8: callq  0x000000000231b640  ;   {runtime_call}
  0x000000000f11f1cd: vzeroupper 
  0x000000000f11f1d0: movl   $0x5,0x270(%r15)
  0x000000000f11f1db: mov    %r15d,%ecx
  0x000000000f11f1de: shr    $0x4,%ecx
  0x000000000f11f1e1: and    $0xffc,%ecx
  0x000000000f11f1e7: movabs $0x230000,%r10     ;   {external_word}
  0x000000000f11f1f1: mov    %ecx,(%r10,%rcx,1)
  0x000000000f11f1f5: cmpl   $0x0,-0xc7e452f(%rip)        # 0x000000000293acd0
                                                ;   {external_word}
  0x000000000f11f1ff: jne    0x000000000f11f213
  0x000000000f11f205: cmpl   $0x0,0x30(%r15)
  0x000000000f11f20d: je     0x000000000f11f234
  0x000000000f11f213: mov    %rax,-0x8(%rbp)
  0x000000000f11f217: mov    %r15,%rcx
  0x000000000f11f21a: mov    %rsp,%r12
  0x000000000f11f21d: sub    $0x20,%rsp
  0x000000000f11f221: and    $0xfffffffffffffff0,%rsp
  0x000000000f11f225: callq  0x000000000237f110  ;   {runtime_call}
  0x000000000f11f22a: mov    %r12,%rsp
  0x000000000f11f22d: xor    %r12,%r12
  0x000000000f11f230: mov    -0x8(%rbp),%rax
  0x000000000f11f234: movl   $0x8,0x270(%r15)
  0x000000000f11f23f: cmpl   $0x1,0x29c(%r15)
  0x000000000f11f24a: je     0x000000000f11f2ee
  0x000000000f11f250: cmpb   $0x0,-0xc7e5170(%rip)        # 0x000000000293a0e7
                                                ;   {external_word}
  0x000000000f11f257: je     0x000000000f11f29d
  0x000000000f11f25d: mov    %rax,-0x8(%rbp)
  0x000000000f11f261: movabs $0x835ed48,%rdx    ;   {metadata({method} {0x000000000835ed50} &apos;getObjectVolatile&apos; &apos;(Ljava/lang/Object;J)Ljava/lang/Object;&apos; in &apos;sun/misc/Unsafe&apos;)}
  0x000000000f11f26b: mov    %r15,%rcx
  0x000000000f11f26e: sub    $0x20,%rsp
  0x000000000f11f272: test   $0xf,%esp
  0x000000000f11f278: je     0x000000000f11f290
  0x000000000f11f27e: sub    $0x8,%rsp
  0x000000000f11f282: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f11f287: add    $0x8,%rsp
  0x000000000f11f28b: jmpq   0x000000000f11f295
  0x000000000f11f290: callq  0x0000000002368cf0  ;   {runtime_call}
  0x000000000f11f295: add    $0x20,%rsp
  0x000000000f11f299: mov    -0x8(%rbp),%rax
  0x000000000f11f29d: movabs $0x0,%r10
  0x000000000f11f2a7: mov    %r10,0x1d8(%r15)
  0x000000000f11f2ae: movabs $0x0,%r10
  0x000000000f11f2b8: mov    %r10,0x1e0(%r15)
  0x000000000f11f2bf: test   %rax,%rax
  0x000000000f11f2c2: je     0x000000000f11f2cb
  0x000000000f11f2c8: mov    (%rax),%rax
  0x000000000f11f2cb: mov    0x38(%r15),%rcx
  0x000000000f11f2cf: movl   $0x0,0x100(%rcx)
  0x000000000f11f2d9: leaveq 
  0x000000000f11f2da: cmpq   $0x0,0x8(%r15)
  0x000000000f11f2e2: jne    0x000000000f11f2e9
  0x000000000f11f2e8: retq   
  0x000000000f11f2e9: jmpq   Stub::forward exception  ;   {runtime_call}
  0x000000000f11f2ee: mov    %rax,-0x8(%rbp)
  0x000000000f11f2f2: mov    %rsp,%r12
  0x000000000f11f2f5: sub    $0x20,%rsp
  0x000000000f11f2f9: and    $0xfffffffffffffff0,%rsp
  0x000000000f11f2fd: callq  0x0000000002368d10  ;   {runtime_call}
  0x000000000f11f302: mov    %r12,%rsp
  0x000000000f11f305: xor    %r12,%r12
  0x000000000f11f308: mov    -0x8(%rbp),%rax
  0x000000000f11f30c: jmpq   0x000000000f11f250
  0x000000000f11f311: hlt    
  0x000000000f11f312: hlt    
  0x000000000f11f313: hlt    
  0x000000000f11f314: hlt    
  0x000000000f11f315: hlt    
  0x000000000f11f316: hlt    
  0x000000000f11f317: hlt    
<nmethod compile_id='29' compile_kind='c2n' level='0' entry='0x000000000f11f100' size='904' address='0x000000000f11ef90' relocation_offset='288' consts_offset='904' insts_offset='368' method='sun/misc/Unsafe getObjectVolatile (Ljava/lang/Object;J)Ljava/lang/Object;' bytes='0' count='256' iicount='256' stamp='0.452'/>
<writer thread='9608'/>
<task_queued compile_id='30' method='java/lang/String equals (Ljava/lang/Object;)Z' bytes='81' count='1122' backedge_count='3440' iicount='1122' level='3' stamp='0.453' comment='tiered' hot_count='1122'/>
<writer thread='10688'/>
<destroy_vm stamp='0.454'/>
<tty_done stamp='0.454'/>
</tty>
<compilation_log thread='15144'>
<start_compile_thread name='C2 CompilerThread0' thread='15144' process='10216' stamp='0.258'/>
<task compile_id='4' method='java/lang/String charAt (I)C' bytes='29' count='133603' iicount='133603' stamp='0.286'>
<phase name='parse' nodes='3' live='3' stamp='0.286'>
<type id='702' name='char'/>
<type id='707' name='int'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='715' name='charAt' return='702' arguments='707' flags='1' bytes='29' iicount='133603'/>
<klass id='819' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='817' bci='13' reason='unloaded' action='reinterpret' index='243' klass='819'/>
<parse method='817' uses='133603' stamp='0.286'>
<bc code='155' bci='1'/>
<branch target_bci='13' taken='0' not_taken='133603' cnt='133603' prob='never'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='190' bci='9'/>
<uncommon_trap bci='9' reason='null_check' action='maybe_recompile'/>
<bc code='161' bci='10'/>
<branch target_bci='22' taken='133603' not_taken='0' cnt='133603' prob='always'/>
<uncommon_trap bci='10' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='52' bci='27'/>
<uncommon_trap bci='27' reason='range_check' action='make_not_entrant' comment='range_check'/>
<parse_done nodes='99' live='94' memory='34760' stamp='0.299'/>
</parse>
<phase_done name='parse' nodes='100' live='62' stamp='0.299'/>
</phase>
<phase name='optimizer' nodes='100' live='62' stamp='0.299'>
<phase name='ccp' nodes='100' live='62' stamp='0.299'>
<phase_done name='ccp' nodes='100' live='62' stamp='0.299'/>
</phase>
<phase name='idealLoop' nodes='100' live='62' stamp='0.299'>
<phase_done name='idealLoop' nodes='100' live='62' stamp='0.299'/>
</phase>
<phase_done name='optimizer' nodes='104' live='63' stamp='0.299'/>
</phase>
<phase name='matcher' nodes='104' live='63' stamp='0.299'>
<phase_done name='matcher' nodes='53' live='53' stamp='0.299'/>
</phase>
<phase name='regalloc' nodes='68' live='68' stamp='0.299'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='78' live='73' stamp='0.300'/>
</phase>
<phase name='output' nodes='78' live='73' stamp='0.300'>
<phase_done name='output' nodes='90' live='82' stamp='0.300'/>
</phase>
<code_cache total_blobs='259' nmethods='9' adapters='162' free_code_cache='250539072'/>
<task_done success='1' nmsize='184' count='133912' stamp='0.303'/>
</task>
<task compile_id='6' method='java/lang/AbstractStringBuilder ensureCapacityInternal (I)V' bytes='16' count='23643' iicount='23643' stamp='0.309'>
<phase name='parse' nodes='3' live='3' stamp='0.309'>
<type id='709' name='void'/>
<type id='707' name='int'/>
<klass id='778' name='java/lang/AbstractStringBuilder' flags='1024'/>
<method id='817' holder='778' name='ensureCapacityInternal' return='709' arguments='707' flags='2' bytes='16' iicount='23643'/>
<parse method='817' uses='23643' stamp='0.309'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='158' bci='7'/>
<branch target_bci='15' taken='23304' not_taken='339' cnt='23643' prob='0.985662'/>
<bc code='182' bci='12'/>
<method id='819' holder='778' name='expandCapacity' return='709' arguments='707' flags='0' bytes='50' iicount='533'/>
<dependency type='unique_concrete_method' ctxk='778' x='819'/>
<call method='819' count='332' prof_factor='1' inline='1'/>
<klass id='737' name='java/lang/OutOfMemoryError' flags='1'/>
<uncommon_trap method='819' bci='26' reason='unloaded' action='reinterpret' index='141' klass='737'/>
<inline_success reason='inline (hot)'/>
<parse method='819' uses='339' stamp='0.309'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='187' bci='26'/>
<uncommon_trap bci='26' reason='unloaded' action='reinterpret' index='141'/>
<bc code='184' bci='43'/>
<klass id='806' name='[C' flags='1041'/>
<klass id='820' name='java/util/Arrays' flags='1'/>
<method id='821' holder='820' name='copyOf' return='806' arguments='806 707' flags='9' bytes='19' iicount='594'/>
<call method='821' count='-1' prof_factor='0.636023' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='821' uses='-1' stamp='0.309'>
<bc code='190' bci='9'/>
<uncommon_trap bci='9' reason='null_check' action='maybe_recompile'/>
<bc code='184' bci='11'/>
<klass id='823' name='java/lang/Math' flags='17'/>
<method id='824' holder='823' name='min' return='707' arguments='707 707' flags='9' bytes='11' compile_id='2' compiler='C1' level='3' iicount='4181'/>
<call method='824' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_min' nodes='3'/>
<bc code='184' bci='14'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<klass id='720' name='java/lang/System' flags='17'/>
<method id='825' holder='720' name='arraycopy' return='709' arguments='714 707 714 707 707' flags='265' bytes='0' compile_id='15' compile_kind='c2n' level='0' iicount='6528'/>
<call method='825' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_arraycopy' nodes='106'/>
<parse_done nodes='307' live='302' memory='74600' stamp='0.310'/>
</parse>
<parse_done nodes='322' live='316' memory='77336' stamp='0.310'/>
</parse>
<parse_done nodes='330' live='323' memory='79328' stamp='0.310'/>
</parse>
<phase_done name='parse' nodes='332' live='213' stamp='0.310'/>
</phase>
<phase name='optimizer' nodes='332' live='213' stamp='0.310'>
<phase name='escapeAnalysis' nodes='333' live='197' stamp='0.310'>
<phase name='connectionGraph' nodes='334' live='198' stamp='0.310'>
<phase_done name='connectionGraph' nodes='334' live='198' stamp='0.310'/>
</phase>
<phase_done name='escapeAnalysis' nodes='334' live='198' stamp='0.310'/>
</phase>
<phase name='ccp' nodes='334' live='198' stamp='0.310'>
<phase_done name='ccp' nodes='334' live='198' stamp='0.310'/>
</phase>
<phase name='idealLoop' nodes='334' live='197' stamp='0.310'>
<phase_done name='idealLoop' nodes='350' live='191' stamp='0.310'/>
</phase>
<phase name='idealLoop' nodes='350' live='191' stamp='0.310'>
<phase_done name='idealLoop' nodes='350' live='191' stamp='0.311'/>
</phase>
<phase_done name='optimizer' nodes='410' live='230' stamp='0.311'/>
</phase>
<phase name='matcher' nodes='410' live='230' stamp='0.311'>
<phase_done name='matcher' nodes='228' live='228' stamp='0.311'/>
</phase>
<phase name='regalloc' nodes='285' live='285' stamp='0.311'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='355' live='335' stamp='0.313'/>
</phase>
<phase name='output' nodes='357' live='337' stamp='0.313'>
<phase_done name='output' nodes='374' live='348' stamp='0.369'/>
</phase>
<dependency type='unique_concrete_method' ctxk='778' x='819'/>
<code_cache total_blobs='265' nmethods='14' adapters='163' free_code_cache='250523584'/>
<task_done success='1' nmsize='664' count='23649' inlined_bytes='80' stamp='0.378'/>
</task>
<task compile_id='25' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='145920' iicount='145920' stamp='0.380'>
<phase name='parse' nodes='3' live='3' stamp='0.380'>
<type id='707' name='int'/>
<klass id='817' name='com/awesomeJdk/practise/bthread/Thread2_volatile' flags='1'/>
<method id='818' holder='817' name='myadd' return='707' arguments='707 707' flags='1' bytes='17' compile_id='23' compiler='C1' level='2' iicount='145920'/>
<parse method='818' uses='145920' stamp='0.380'>
<parse_done nodes='45' live='44' memory='25888' stamp='0.380'/>
</parse>
<phase_done name='parse' nodes='46' live='29' stamp='0.380'/>
</phase>
<phase name='optimizer' nodes='46' live='29' stamp='0.380'>
<phase name='ccp' nodes='46' live='29' stamp='0.380'>
<phase_done name='ccp' nodes='46' live='29' stamp='0.380'/>
</phase>
<phase name='idealLoop' nodes='46' live='29' stamp='0.380'>
<phase_done name='idealLoop' nodes='46' live='29' stamp='0.380'/>
</phase>
<phase_done name='optimizer' nodes='46' live='29' stamp='0.380'/>
</phase>
<phase name='matcher' nodes='46' live='29' stamp='0.380'>
<phase_done name='matcher' nodes='32' live='32' stamp='0.380'/>
</phase>
<phase name='regalloc' nodes='34' live='34' stamp='0.380'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='35' live='35' stamp='0.381'/>
</phase>
<phase name='output' nodes='35' live='35' stamp='0.381'>
<phase_done name='output' nodes='41' live='41' stamp='0.381'/>
</phase>
<code_cache total_blobs='266' nmethods='16' adapters='163' free_code_cache='250527488'/>
<task_done success='1' nmsize='120' count='179934' stamp='0.383'/>
</task>
<task compile_id='27' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='8448' iicount='8448' stamp='0.416'>
<phase name='parse' nodes='3' live='3' stamp='0.416'>
<type id='709' name='void'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<method id='817' holder='714' name='&lt;init&gt;' return='709' flags='1' bytes='1' iicount='8449'/>
<parse method='817' uses='8449' stamp='0.416'>
<parse_done nodes='54' live='53' memory='27144' stamp='0.416'/>
</parse>
<phase_done name='parse' nodes='56' live='38' stamp='0.416'/>
</phase>
<phase name='optimizer' nodes='56' live='38' stamp='0.416'>
<phase name='ccp' nodes='56' live='38' stamp='0.416'>
<phase_done name='ccp' nodes='56' live='38' stamp='0.416'/>
</phase>
<phase name='idealLoop' nodes='56' live='38' stamp='0.416'>
<phase_done name='idealLoop' nodes='56' live='38' stamp='0.416'/>
</phase>
<phase_done name='optimizer' nodes='56' live='37' stamp='0.416'/>
</phase>
<phase name='matcher' nodes='56' live='37' stamp='0.416'>
<phase_done name='matcher' nodes='33' live='33' stamp='0.416'/>
</phase>
<phase name='regalloc' nodes='42' live='42' stamp='0.416'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='45' live='44' stamp='0.416'/>
</phase>
<phase name='output' nodes='45' live='44' stamp='0.417'>
<phase_done name='output' nodes='53' live='51' stamp='0.417'/>
</phase>
<code_cache total_blobs='269' nmethods='19' adapters='163' free_code_cache='250519040'/>
<task_done success='1' nmsize='120' count='8455' stamp='0.418'/>
</task>
</compilation_log>
<compilation_log thread='12324'>
<start_compile_thread name='C2 CompilerThread1' thread='12324' process='10216' stamp='0.256'/>
<task compile_id='3' method='java/lang/String hashCode ()I' bytes='55' count='1560' backedge_count='38314' iicount='1560' stamp='0.286'>
<phase name='parse' nodes='3' live='3' stamp='0.286'>
<type id='707' name='int'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='715' name='hashCode' return='707' flags='1' bytes='55' iicount='1560'/>
<parse method='817' uses='1560' stamp='0.286'>
<bc code='154' bci='6'/>
<branch target_bci='53' taken='505' not_taken='703' cnt='1208' prob='0.418046'/>
<bc code='190' bci='13'/>
<uncommon_trap bci='13' reason='null_check' action='maybe_recompile'/>
<bc code='158' bci='14'/>
<branch target_bci='53' taken='1' not_taken='702' cnt='703' prob='0.00142248'/>
<bc code='162' bci='30'/>
<branch target_bci='48' taken='702' not_taken='34210' cnt='34912' prob='0.0201077'/>
<uncommon_trap bci='33' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='33' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='39'/>
<uncommon_trap bci='39' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='190' bci='29'/>
<uncommon_trap bci='29' reason='null_check' action='maybe_recompile'/>
<bc code='162' bci='30'/>
<branch target_bci='48' taken='702' not_taken='34210' cnt='34211' prob='0.0201077'/>
<parse_done nodes='189' live='183' memory='49896' stamp='0.299'/>
</parse>
<phase_done name='parse' nodes='190' live='123' stamp='0.299'/>
</phase>
<phase name='optimizer' nodes='190' live='123' stamp='0.299'>
<phase name='idealLoop' nodes='191' live='103' stamp='0.299'>
<loop_tree>
<loop idx='191' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='195' live='95' stamp='0.299'/>
</phase>
<phase name='idealLoop' nodes='195' live='95' stamp='0.299'>
<loop_tree>
<loop idx='200' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='221' live='101' stamp='0.299'/>
</phase>
<phase name='idealLoop' nodes='221' live='101' stamp='0.299'>
<loop_tree>
<loop idx='295' inner_loop='1' main_loop='295' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='317' live='171' stamp='0.300'/>
</phase>
<phase name='ccp' nodes='317' live='171' stamp='0.300'>
<phase_done name='ccp' nodes='317' live='171' stamp='0.300'/>
</phase>
<phase name='idealLoop' nodes='317' live='171' stamp='0.300'>
<loop_tree>
<loop idx='259' inner_loop='1' pre_loop='200' >
</loop>
<loop idx='350' inner_loop='1' main_loop='350' >
</loop>
<loop idx='232' inner_loop='1' post_loop='200' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='380' live='194' stamp='0.300'/>
</phase>
<phase name='idealLoop' nodes='380' live='194' stamp='0.300'>
<loop_tree>
<loop idx='259' inner_loop='1' pre_loop='200' >
</loop>
<loop idx='350' inner_loop='1' main_loop='350' >
</loop>
<loop idx='232' inner_loop='1' post_loop='200' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='386' live='180' stamp='0.300'/>
</phase>
<phase name='idealLoop' nodes='386' live='180' stamp='0.300'>
<loop_tree>
<loop idx='259' inner_loop='1' pre_loop='200' >
</loop>
<loop idx='350' inner_loop='1' main_loop='350' >
</loop>
<loop idx='232' inner_loop='1' post_loop='200' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='396' live='158' stamp='0.301'/>
</phase>
<phase_done name='optimizer' nodes='399' live='158' stamp='0.301'/>
</phase>
<phase name='matcher' nodes='399' live='158' stamp='0.301'>
<phase_done name='matcher' nodes='139' live='139' stamp='0.301'/>
</phase>
<phase name='regalloc' nodes='175' live='175' stamp='0.301'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='194' live='189' stamp='0.302'/>
</phase>
<phase name='output' nodes='194' live='189' stamp='0.302'>
<phase_done name='output' nodes='210' live='198' stamp='0.303'/>
</phase>
<code_cache total_blobs='260' nmethods='10' adapters='163' free_code_cache='250542720'/>
<task_done success='1' nmsize='344' count='1577' backedge_count='38609' stamp='0.309'/>
</task>
<task compile_id='20' method='java/lang/StringBuffer append (C)Ljava/lang/StringBuffer;' bytes='13' count='19560' iicount='19560' stamp='0.309'>
<phase name='parse' nodes='3' live='3' stamp='0.309'>
<klass id='779' name='java/lang/StringBuffer' flags='17'/>
<type id='702' name='char'/>
<method id='817' holder='779' name='append' return='779' arguments='702' flags='33' bytes='13' iicount='19560'/>
<parse method='817' uses='19560' stamp='0.309'>
<bc code='183' bci='7'/>
<klass id='778' name='java/lang/AbstractStringBuilder' flags='1024'/>
<method id='819' holder='778' name='append' return='778' arguments='702' flags='1' bytes='29' iicount='22358'/>
<call method='819' count='19048' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='819' uses='19560' stamp='0.309'>
<bc code='183' bci='7'/>
<type id='709' name='void'/>
<type id='707' name='int'/>
<method id='820' holder='778' name='ensureCapacityInternal' return='709' arguments='707' flags='2' bytes='16' iicount='23643'/>
<call method='820' count='21846' prof_factor='0.874855' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='820' uses='19560' stamp='0.309'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='158' bci='7'/>
<branch target_bci='15' taken='23304' not_taken='339' cnt='23643' prob='0.985662'/>
<bc code='182' bci='12'/>
<method id='822' holder='778' name='expandCapacity' return='709' arguments='707' flags='0' bytes='50' iicount='533'/>
<dependency type='unique_concrete_method' ctxk='779' x='822'/>
<call method='822' count='332' prof_factor='0.827306' inline='1'/>
<klass id='737' name='java/lang/OutOfMemoryError' flags='1'/>
<uncommon_trap method='822' bci='26' reason='unloaded' action='reinterpret' index='141' klass='737'/>
<inline_success reason='inline (hot)'/>
<parse method='822' uses='281' stamp='0.309'>
<bc code='187' bci='26'/>
<uncommon_trap bci='26' reason='unloaded' action='reinterpret' index='141'/>
<bc code='184' bci='43'/>
<klass id='806' name='[C' flags='1041'/>
<klass id='824' name='java/util/Arrays' flags='1'/>
<method id='825' holder='824' name='copyOf' return='806' arguments='806 707' flags='9' bytes='19' iicount='594'/>
<call method='825' count='-1' prof_factor='0.527205' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='825' uses='-1' stamp='0.310'>
<bc code='190' bci='9'/>
<uncommon_trap bci='9' reason='null_check' action='maybe_recompile'/>
<bc code='184' bci='11'/>
<klass id='827' name='java/lang/Math' flags='17'/>
<method id='828' holder='827' name='min' return='707' arguments='707 707' flags='9' bytes='11' compile_id='2' compiler='C1' level='3' iicount='4181'/>
<call method='828' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_min' nodes='3'/>
<bc code='184' bci='14'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<klass id='720' name='java/lang/System' flags='17'/>
<method id='829' holder='720' name='arraycopy' return='709' arguments='714 707 714 707 707' flags='265' bytes='0' compile_id='15' compile_kind='c2n' level='0' iicount='6528'/>
<call method='829' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_arraycopy' nodes='106'/>
<parse_done nodes='340' live='336' memory='86632' stamp='0.310'/>
</parse>
<parse_done nodes='355' live='350' memory='89016' stamp='0.310'/>
</parse>
<parse_done nodes='365' live='359' memory='91400' stamp='0.310'/>
</parse>
<bc code='85' bci='26'/>
<uncommon_trap bci='26' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='26' reason='range_check' action='make_not_entrant' comment='range_check'/>
<parse_done nodes='414' live='405' memory='101952' stamp='0.310'/>
</parse>
<parse_done nodes='435' live='425' memory='105240' stamp='0.310'/>
</parse>
<phase_done name='parse' nodes='437' live='266' stamp='0.310'/>
</phase>
<phase name='optimizer' nodes='437' live='266' stamp='0.310'>
<phase name='escapeAnalysis' nodes='437' live='263' stamp='0.310'>
<phase name='connectionGraph' nodes='437' live='263' stamp='0.310'>
<phase_done name='connectionGraph' nodes='437' live='263' stamp='0.311'/>
</phase>
<phase_done name='escapeAnalysis' nodes='437' live='263' stamp='0.311'/>
</phase>
<phase name='ccp' nodes='437' live='263' stamp='0.311'>
<phase_done name='ccp' nodes='437' live='263' stamp='0.311'/>
</phase>
<phase name='idealLoop' nodes='437' live='262' stamp='0.311'>
<phase_done name='idealLoop' nodes='465' live='257' stamp='0.311'/>
</phase>
<phase name='idealLoop' nodes='465' live='257' stamp='0.311'>
<phase_done name='idealLoop' nodes='465' live='257' stamp='0.311'/>
</phase>
<phase_done name='optimizer' nodes='631' live='389' stamp='0.312'/>
</phase>
<phase name='matcher' nodes='631' live='389' stamp='0.312'>
<phase_done name='matcher' nodes='381' live='381' stamp='0.312'/>
</phase>
<phase name='regalloc' nodes='483' live='483' stamp='0.313'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='621' live='563' stamp='0.315'/>
</phase>
<phase name='output' nodes='623' live='565' stamp='0.315'>
<phase_done name='output' nodes='644' live='578' stamp='0.349'/>
</phase>
<dependency type='unique_concrete_method' ctxk='779' x='822'/>
<code_cache total_blobs='264' nmethods='13' adapters='163' free_code_cache='250525440'/>
<task_done success='1' nmsize='1368' count='19560' inlined_bytes='125' stamp='0.369'/>
</task>
<task compile_id='19' method='java/io/WinNTFileSystem isSlash (C)Z' bytes='18' count='21141' iicount='21141' stamp='0.369'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='21141' stamp='0.369'/>
</task>
<task compile_id='7' method='java/lang/String length ()I' bytes='6' count='29239' iicount='29239' stamp='0.369'>
<phase name='parse' nodes='3' live='3' stamp='0.369'>
<type id='707' name='int'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='715' name='length' return='707' flags='1' bytes='6' iicount='29239'/>
<parse method='817' uses='29239' stamp='0.369'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='44' live='42' memory='25928' stamp='0.369'/>
</parse>
<phase_done name='parse' nodes='45' live='27' stamp='0.369'/>
</phase>
<phase name='optimizer' nodes='45' live='27' stamp='0.369'>
<phase name='ccp' nodes='45' live='27' stamp='0.369'>
<phase_done name='ccp' nodes='45' live='27' stamp='0.369'/>
</phase>
<phase name='idealLoop' nodes='45' live='27' stamp='0.369'>
<phase_done name='idealLoop' nodes='45' live='27' stamp='0.369'/>
</phase>
<phase_done name='optimizer' nodes='48' live='27' stamp='0.369'/>
</phase>
<phase name='matcher' nodes='48' live='27' stamp='0.369'>
<phase_done name='matcher' nodes='24' live='24' stamp='0.369'/>
</phase>
<phase name='regalloc' nodes='30' live='30' stamp='0.369'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='30' live='29' stamp='0.369'/>
</phase>
<phase name='output' nodes='30' live='29' stamp='0.369'>
<phase_done name='output' nodes='37' live='36' stamp='0.378'/>
</phase>
<code_cache total_blobs='265' nmethods='15' adapters='163' free_code_cache='250528256'/>
<task_done success='1' nmsize='88' count='29239' stamp='0.380'/>
</task>
<task compile_id='21' method='java/lang/AbstractStringBuilder append (C)Ljava/lang/AbstractStringBuilder;' bytes='29' count='22362' iicount='22362' stamp='0.380'>
<phase name='parse' nodes='3' live='3' stamp='0.380'>
<klass id='778' name='java/lang/AbstractStringBuilder' flags='1024'/>
<type id='702' name='char'/>
<method id='817' holder='778' name='append' return='778' arguments='702' flags='1' bytes='29' iicount='22362'/>
<parse method='817' uses='22362' stamp='0.380'>
<bc code='183' bci='7'/>
<type id='709' name='void'/>
<type id='707' name='int'/>
<method id='819' holder='778' name='ensureCapacityInternal' return='709' arguments='707' flags='2' bytes='16' compile_id='6' compiler='C2' level='4' iicount='23649'/>
<call method='819' count='21850' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='819' uses='22362' stamp='0.380'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='158' bci='7'/>
<branch target_bci='15' taken='23308' not_taken='341' cnt='23649' prob='0.985581'/>
<bc code='182' bci='12'/>
<method id='820' holder='778' name='expandCapacity' return='709' arguments='707' flags='0' bytes='50' iicount='535'/>
<dependency type='unique_concrete_method' ctxk='778' x='820'/>
<call method='820' count='334' prof_factor='0.945579' inline='1'/>
<klass id='737' name='java/lang/OutOfMemoryError' flags='1'/>
<uncommon_trap method='820' bci='26' reason='unloaded' action='reinterpret' index='141' klass='737'/>
<inline_success reason='inline (hot)'/>
<parse method='820' uses='323' stamp='0.380'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='187' bci='26'/>
<uncommon_trap bci='26' reason='unloaded' action='reinterpret' index='141'/>
<bc code='184' bci='43'/>
<klass id='806' name='[C' flags='1041'/>
<klass id='822' name='java/util/Arrays' flags='1'/>
<method id='823' holder='822' name='copyOf' return='806' arguments='806 707' flags='9' bytes='19' iicount='596'/>
<call method='823' count='-1' prof_factor='0.603738' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='823' uses='-1' stamp='0.380'>
<bc code='190' bci='9'/>
<uncommon_trap bci='9' reason='null_check' action='maybe_recompile'/>
<bc code='184' bci='11'/>
<klass id='825' name='java/lang/Math' flags='17'/>
<method id='826' holder='825' name='min' return='707' arguments='707 707' flags='9' bytes='11' compile_id='2' compiler='C1' level='3' iicount='4188'/>
<call method='826' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_min' nodes='3'/>
<bc code='184' bci='14'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<klass id='720' name='java/lang/System' flags='17'/>
<method id='827' holder='720' name='arraycopy' return='709' arguments='714 707 714 707 707' flags='265' bytes='0' compile_id='15' compile_kind='c2n' level='0' iicount='6528'/>
<call method='827' count='-1' prof_factor='1' inline='1'/>
<intrinsic id='_arraycopy' nodes='106'/>
<parse_done nodes='325' live='320' memory='77768' stamp='0.381'/>
</parse>
<parse_done nodes='340' live='334' memory='80504' stamp='0.381'/>
</parse>
<parse_done nodes='348' live='341' memory='82896' stamp='0.381'/>
</parse>
<bc code='85' bci='26'/>
<uncommon_trap bci='26' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='26' reason='range_check' action='make_not_entrant' comment='range_check'/>
<parse_done nodes='396' live='386' memory='91320' stamp='0.416'/>
</parse>
<phase_done name='parse' nodes='398' live='250' stamp='0.416'/>
</phase>
<phase name='optimizer' nodes='398' live='250' stamp='0.416'>
<phase name='escapeAnalysis' nodes='399' live='233' stamp='0.416'>
<phase name='connectionGraph' nodes='400' live='234' stamp='0.416'>
<phase_done name='connectionGraph' nodes='400' live='234' stamp='0.416'/>
</phase>
<phase_done name='escapeAnalysis' nodes='400' live='234' stamp='0.416'/>
</phase>
<phase name='ccp' nodes='400' live='234' stamp='0.417'>
<phase_done name='ccp' nodes='400' live='234' stamp='0.417'/>
</phase>
<phase name='idealLoop' nodes='400' live='233' stamp='0.417'>
<phase_done name='idealLoop' nodes='428' live='228' stamp='0.417'/>
</phase>
<phase name='idealLoop' nodes='428' live='228' stamp='0.417'>
<phase_done name='idealLoop' nodes='428' live='228' stamp='0.417'/>
</phase>
<phase_done name='optimizer' nodes='489' live='269' stamp='0.417'/>
</phase>
<phase name='matcher' nodes='489' live='269' stamp='0.417'>
<phase_done name='matcher' nodes='266' live='266' stamp='0.418'/>
</phase>
<phase name='regalloc' nodes='329' live='329' stamp='0.418'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='421' live='388' stamp='0.420'/>
</phase>
<phase name='output' nodes='421' live='388' stamp='0.420'>
<phase_done name='output' nodes='437' live='400' stamp='0.437'/>
</phase>
<dependency type='unique_concrete_method' ctxk='778' x='820'/>
<code_cache total_blobs='271' nmethods='21' adapters='163' free_code_cache='250512192'/>
<task_done success='1' nmsize='760' count='22362' inlined_bytes='96' stamp='0.448'/>
</task>
</compilation_log>
<compilation_log thread='8892'>
<start_compile_thread name='C1 CompilerThread2' thread='8892' process='10216' stamp='0.256'/>
<task compile_id='1' method='java/lang/StringBuilder &lt;init&gt; ()V' bytes='7' count='384' iicount='384' level='3' stamp='0.258'>
<phase name='buildIR' stamp='0.258'>
<type id='709' name='void'/>
<klass id='780' name='java/lang/StringBuilder' flags='17'/>
<method id='817' holder='780' name='&lt;init&gt;' return='709' flags='1' bytes='7' iicount='384'/>
<parse method='817'  stamp='0.258'>
<bc code='183' bci='3'/>
<type id='707' name='int'/>
<klass id='778' name='java/lang/AbstractStringBuilder' flags='1024'/>
<method id='819' holder='778' name='&lt;init&gt;' return='709' arguments='707' flags='0' bytes='12' iicount='745'/>
<call method='819' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='819'>
<bc code='183' bci='1'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<method id='821' holder='714' name='&lt;init&gt;' return='709' flags='1' bytes='1' iicount='8260'/>
<call method='821' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='821'>
<parse_done stamp='0.258'/>
</parse>
<parse_done stamp='0.258'/>
</parse>
<parse_done stamp='0.258'/>
</parse>
<phase name='optimize_blocks' stamp='0.258'>
<phase_done name='optimize_blocks' stamp='0.258'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.258'>
<phase_done name='rangeCheckElimination' stamp='0.258'/>
</phase>
<phase name='optimize_null_checks' stamp='0.258'>
<phase_done name='optimize_null_checks' stamp='0.258'/>
</phase>
<phase_done name='buildIR' stamp='0.258'/>
</phase>
<phase name='emit_lir' stamp='0.258'>
<phase name='lirGeneration' stamp='0.258'>
<phase_done name='lirGeneration' stamp='0.258'/>
</phase>
<phase name='linearScan' stamp='0.258'>
<phase_done name='linearScan' stamp='0.258'/>
</phase>
<phase_done name='emit_lir' stamp='0.258'/>
</phase>
<phase name='codeemit' stamp='0.258'>
<phase_done name='codeemit' stamp='0.258'/>
</phase>
<phase name='codeinstall' stamp='0.258'>
<phase_done name='codeinstall' stamp='0.264'/>
</phase>
<code_cache total_blobs='236' nmethods='1' adapters='158' free_code_cache='250585152'/>
<task_done success='1' nmsize='688' count='384' inlined_bytes='13' stamp='0.264'/>
</task>
<task compile_id='2' method='java/lang/Math min (II)I' bytes='11' count='4100' iicount='4100' level='3' stamp='0.264'>
<phase name='buildIR' stamp='0.264'>
<type id='707' name='int'/>
<klass id='817' name='java/lang/Math' flags='17'/>
<method id='818' holder='817' name='min' return='707' arguments='707 707' flags='9' bytes='11' iicount='4100'/>
<parse method='818'  stamp='0.264'>
<parse_done stamp='0.264'/>
</parse>
<phase name='optimize_blocks' stamp='0.264'>
<phase_done name='optimize_blocks' stamp='0.264'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.264'>
<phase_done name='rangeCheckElimination' stamp='0.264'/>
</phase>
<phase name='optimize_null_checks' stamp='0.264'>
<phase_done name='optimize_null_checks' stamp='0.264'/>
</phase>
<phase_done name='buildIR' stamp='0.264'/>
</phase>
<phase name='emit_lir' stamp='0.264'>
<phase name='lirGeneration' stamp='0.264'>
<phase_done name='lirGeneration' stamp='0.264'/>
</phase>
<phase name='linearScan' stamp='0.264'>
<phase_done name='linearScan' stamp='0.264'/>
</phase>
<phase_done name='emit_lir' stamp='0.264'/>
</phase>
<phase name='codeemit' stamp='0.264'>
<phase_done name='codeemit' stamp='0.264'/>
</phase>
<phase name='codeinstall' stamp='0.264'>
<phase_done name='codeinstall' stamp='0.267'/>
</phase>
<code_cache total_blobs='239' nmethods='2' adapters='159' free_code_cache='250583424'/>
<task_done success='1' nmsize='400' count='4100' stamp='0.267'/>
</task>
<task compile_id='5' method='sun/instrument/TransformerManager getSnapshotTransformerList ()[Lsun/instrument/TransformerManager$TransformerInfo;' bytes='5' count='128' iicount='128' level='1' stamp='0.268'>
<phase name='buildIR' stamp='0.268'>
<klass id='819' name='[Lsun/instrument/TransformerManager$TransformerInfo;' flags='1042'/>
<klass id='817' name='sun/instrument/TransformerManager' flags='1'/>
<method id='820' holder='817' name='getSnapshotTransformerList' return='819' flags='2' bytes='5' iicount='128'/>
<parse method='820'  stamp='0.268'>
<parse_done stamp='0.268'/>
</parse>
<phase name='optimize_blocks' stamp='0.268'>
<phase_done name='optimize_blocks' stamp='0.268'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.268'>
<phase_done name='rangeCheckElimination' stamp='0.268'/>
</phase>
<phase name='optimize_null_checks' stamp='0.268'>
<phase_done name='optimize_null_checks' stamp='0.268'/>
</phase>
<phase_done name='buildIR' stamp='0.268'/>
</phase>
<phase name='emit_lir' stamp='0.268'>
<phase name='lirGeneration' stamp='0.268'>
<phase_done name='lirGeneration' stamp='0.268'/>
</phase>
<phase name='linearScan' stamp='0.268'>
<phase_done name='linearScan' stamp='0.268'/>
</phase>
<phase_done name='emit_lir' stamp='0.268'/>
</phase>
<phase name='codeemit' stamp='0.268'>
<phase_done name='codeemit' stamp='0.268'/>
</phase>
<phase name='codeinstall' stamp='0.268'>
<phase_done name='codeinstall' stamp='0.271'/>
</phase>
<code_cache total_blobs='246' nmethods='3' adapters='160' free_code_cache='250548864'/>
<task_done success='1' nmsize='272' count='129' stamp='0.271'/>
</task>
<task compile_id='8' method='java/lang/String startsWith (Ljava/lang/String;)Z' bytes='7' count='512' iicount='512' level='3' stamp='0.272'>
<phase name='buildIR' stamp='0.272'>
<type id='701' name='boolean'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='715' name='startsWith' return='701' arguments='715' flags='1' bytes='7' iicount='512'/>
<parse method='817'  stamp='0.272'>
<bc code='182' bci='3'/>
<type id='707' name='int'/>
<method id='819' holder='715' name='startsWith' return='701' arguments='715 707' flags='1' bytes='72' iicount='873'/>
<call method='819' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='0.272'/>
</parse>
<phase name='optimize_blocks' stamp='0.272'>
<phase_done name='optimize_blocks' stamp='0.272'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.272'>
<phase_done name='rangeCheckElimination' stamp='0.272'/>
</phase>
<phase name='optimize_null_checks' stamp='0.272'>
<phase_done name='optimize_null_checks' stamp='0.272'/>
</phase>
<phase_done name='buildIR' stamp='0.272'/>
</phase>
<phase name='emit_lir' stamp='0.272'>
<phase name='lirGeneration' stamp='0.272'>
<phase_done name='lirGeneration' stamp='0.272'/>
</phase>
<phase name='linearScan' stamp='0.272'>
<phase_done name='linearScan' stamp='0.272'/>
</phase>
<phase_done name='emit_lir' stamp='0.272'/>
</phase>
<phase name='codeemit' stamp='0.272'>
<phase_done name='codeemit' stamp='0.272'/>
</phase>
<phase name='codeinstall' stamp='0.272'>
<phase_done name='codeinstall' stamp='0.276'/>
</phase>
<code_cache total_blobs='252' nmethods='4' adapters='162' free_code_cache='250545984'/>
<task_done success='1' nmsize='520' count='534' stamp='0.276'/>
</task>
<task compile_id='9' method='java/lang/String startsWith (Ljava/lang/String;I)Z' bytes='72' count='896' backedge_count='1236' iicount='896' level='3' stamp='0.276'>
<phase name='buildIR' stamp='0.276'>
<type id='701' name='boolean'/>
<klass id='715' name='java/lang/String' flags='17'/>
<type id='707' name='int'/>
<method id='817' holder='715' name='startsWith' return='701' arguments='715 707' flags='1' bytes='72' iicount='907'/>
<parse method='817'  stamp='0.276'>
<parse_done stamp='0.276'/>
</parse>
<phase name='optimize_blocks' stamp='0.276'>
<phase_done name='optimize_blocks' stamp='0.276'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.276'>
<phase_done name='rangeCheckElimination' stamp='0.276'/>
</phase>
<phase name='optimize_null_checks' stamp='0.276'>
<phase_done name='optimize_null_checks' stamp='0.276'/>
</phase>
<phase_done name='buildIR' stamp='0.276'/>
</phase>
<phase name='emit_lir' stamp='0.276'>
<phase name='lirGeneration' stamp='0.276'>
<phase_done name='lirGeneration' stamp='0.276'/>
</phase>
<phase name='linearScan' stamp='0.276'>
<phase_done name='linearScan' stamp='0.276'/>
</phase>
<phase_done name='emit_lir' stamp='0.276'/>
</phase>
<phase name='codeemit' stamp='0.276'>
<phase_done name='codeemit' stamp='0.276'/>
</phase>
<phase name='codeinstall' stamp='0.276'>
<phase_done name='codeinstall' stamp='0.286'/>
</phase>
<code_cache total_blobs='254' nmethods='6' adapters='162' free_code_cache='250553984'/>
<task_done success='1' nmsize='816' count='975' backedge_count='1330' stamp='0.286'/>
</task>
<task compile_id='10' method='java/util/zip/ZipFile ensureOpen ()V' bytes='37' count='391' iicount='391' level='3' stamp='0.286'>
<phase name='buildIR' stamp='0.286'>
<type id='709' name='void'/>
<klass id='817' name='java/util/zip/ZipFile' flags='1'/>
<method id='818' holder='817' name='ensureOpen' return='709' flags='2' bytes='37' iicount='391'/>
<parse method='818'  stamp='0.286'>
<bc code='183' bci='13'/>
<klass id='715' name='java/lang/String' flags='17'/>
<klass id='820' name='java/lang/IllegalStateException' unloaded='1'/>
<method id='822' holder='820' name='&lt;init&gt;' return='709' arguments='715' unloaded='1'/>
<call method='822' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='32'/>
<call method='822' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='0.286'/>
</parse>
<phase name='optimize_blocks' stamp='0.286'>
<phase_done name='optimize_blocks' stamp='0.286'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.286'>
<phase_done name='rangeCheckElimination' stamp='0.286'/>
</phase>
<phase name='optimize_null_checks' stamp='0.286'>
<phase_done name='optimize_null_checks' stamp='0.286'/>
</phase>
<phase_done name='buildIR' stamp='0.286'/>
</phase>
<phase name='emit_lir' stamp='0.286'>
<phase name='lirGeneration' stamp='0.286'>
<phase_done name='lirGeneration' stamp='0.286'/>
</phase>
<phase name='linearScan' stamp='0.286'>
<phase_done name='linearScan' stamp='0.286'/>
</phase>
<phase_done name='emit_lir' stamp='0.286'/>
</phase>
<phase name='codeemit' stamp='0.286'>
<phase_done name='codeemit' stamp='0.286'/>
</phase>
<phase name='codeinstall' stamp='0.286'>
<phase_done name='codeinstall' stamp='0.292'/>
</phase>
<code_cache total_blobs='255' nmethods='7' adapters='162' free_code_cache='250552384'/>
<task_done success='1' nmsize='728' count='391' stamp='0.292'/>
</task>
<task compile_id='16' method='java/lang/String indexOf (II)I' bytes='70' count='1058' backedge_count='64514' iicount='1058' level='2' stamp='0.292'>
<phase name='buildIR' stamp='0.292'>
<type id='707' name='int'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='715' name='indexOf' return='707' arguments='707 707' flags='1' bytes='70' iicount='1058'/>
<parse method='817'  stamp='0.292'>
<bc code='183' bci='66'/>
<method id='819' holder='715' name='indexOfSupplementary' return='707' arguments='707 707' flags='2' bytes='71' iicount='1'/>
<call method='819' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='0.292'/>
</parse>
<phase name='optimize_blocks' stamp='0.293'>
<phase_done name='optimize_blocks' stamp='0.293'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.293'>
<phase_done name='rangeCheckElimination' stamp='0.293'/>
</phase>
<phase name='optimize_null_checks' stamp='0.293'>
<phase_done name='optimize_null_checks' stamp='0.293'/>
</phase>
<phase_done name='buildIR' stamp='0.293'/>
</phase>
<phase name='emit_lir' stamp='0.293'>
<phase name='lirGeneration' stamp='0.293'>
<phase_done name='lirGeneration' stamp='0.293'/>
</phase>
<phase name='linearScan' stamp='0.293'>
<phase_done name='linearScan' stamp='0.293'/>
</phase>
<phase_done name='emit_lir' stamp='0.293'/>
</phase>
<phase name='codeemit' stamp='0.293'>
<phase_done name='codeemit' stamp='0.293'/>
</phase>
<phase name='codeinstall' stamp='0.293'>
<phase_done name='codeinstall' stamp='0.299'/>
</phase>
<code_cache total_blobs='256' nmethods='8' adapters='162' free_code_cache='250550784'/>
<task_done success='1' nmsize='616' count='1060' backedge_count='64701' stamp='0.299'/>
</task>
<task compile_id='18' method='java/util/HashMap putVal (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;' bytes='300' count='512' backedge_count='69' iicount='512' level='3' stamp='0.299'>
<phase name='buildIR' stamp='0.299'>
<klass id='714' name='java/lang/Object' flags='1'/>
<type id='707' name='int'/>
<type id='701' name='boolean'/>
<klass id='817' name='java/util/HashMap' flags='1'/>
<method id='818' holder='817' name='putVal' return='714' arguments='707 714 714 701 701' flags='16' bytes='300' iicount='512'/>
<parse method='818'  stamp='0.299'>
<bc code='182' bci='20'/>
<klass id='821' name='[Ljava/util/HashMap$Node;' flags='1040'/>
<method id='822' holder='817' name='resize' return='821' flags='16' bytes='359' iicount='32'/>
<call method='822' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='56'/>
<klass id='820' name='java/util/HashMap$Node' flags='8'/>
<method id='824' holder='817' name='newNode' return='820' arguments='707 714 714 820' flags='0' bytes='13' iicount='361'/>
<call method='824' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='91'/>
<method id='825' holder='714' name='equals' return='701' arguments='714' flags='1' bytes='11' iicount='1'/>
<call method='825' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='123'/>
<klass id='826' name='java/util/HashMap$TreeNode' flags='24'/>
<method id='827' holder='826' name='putTreeVal' return='826' arguments='817 821 707 714 714' flags='16' bytes='314' iicount='1'/>
<call method='827' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='152'/>
<call method='824' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='169'/>
<type id='709' name='void'/>
<method id='828' holder='817' name='treeifyBin' return='709' arguments='821 707' flags='16' bytes='110' iicount='1'/>
<call method='828' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='203'/>
<call method='825' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='253'/>
<method id='830' holder='817' name='afterNodeAccess' return='709' arguments='820' flags='0' bytes='1' iicount='17'/>
<call method='830' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='288'/>
<call method='822' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='295'/>
<method id='831' holder='817' name='afterNodeInsertion' return='709' arguments='701' flags='0' bytes='1' iicount='361'/>
<call method='831' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='0.309'/>
</parse>
<phase name='optimize_blocks' stamp='0.309'>
<phase_done name='optimize_blocks' stamp='0.309'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.309'>
<phase_done name='rangeCheckElimination' stamp='0.309'/>
</phase>
<phase name='optimize_null_checks' stamp='0.309'>
<phase_done name='optimize_null_checks' stamp='0.309'/>
</phase>
<phase_done name='buildIR' stamp='0.309'/>
</phase>
<phase name='emit_lir' stamp='0.309'>
<phase name='lirGeneration' stamp='0.309'>
<phase_done name='lirGeneration' stamp='0.310'/>
</phase>
<phase name='linearScan' stamp='0.310'>
<phase_done name='linearScan' stamp='0.310'/>
</phase>
<phase_done name='emit_lir' stamp='0.310'/>
</phase>
<phase name='codeemit' stamp='0.310'>
<phase_done name='codeemit' stamp='0.310'/>
</phase>
<phase name='codeinstall' stamp='0.310'>
<phase_done name='codeinstall' stamp='0.349'/>
</phase>
<code_cache total_blobs='261' nmethods='11' adapters='163' free_code_cache='250534656'/>
<task_done success='1' nmsize='4728' count='519' backedge_count='69' stamp='0.349'/>
</task>
<task compile_id='14' method='java/nio/charset/CharsetEncoder implReset ()V' bytes='1' count='391' iicount='391' level='3' stamp='0.349'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='391' stamp='0.349'/>
</task>
<task compile_id='13' method='java/nio/charset/CharsetEncoder reset ()Ljava/nio/charset/CharsetEncoder;' bytes='11' count='391' iicount='391' level='3' stamp='0.349'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='391' stamp='0.349'/>
</task>
<task compile_id='12' method='java/util/zip/ZipCoder encoder ()Ljava/nio/charset/CharsetEncoder;' bytes='35' count='391' iicount='391' level='3' stamp='0.349'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='391' stamp='0.349'/>
</task>
<task compile_id='23' method='com/awesomeJdk/practise/bthread/Thread2_volatile myadd (II)I' bytes='17' count='144384' iicount='144384' level='2' stamp='0.349'>
<phase name='buildIR' stamp='0.349'>
<type id='707' name='int'/>
<klass id='817' name='com/awesomeJdk/practise/bthread/Thread2_volatile' flags='1'/>
<method id='818' holder='817' name='myadd' return='707' arguments='707 707' flags='1' bytes='17' iicount='144384'/>
<parse method='818'  stamp='0.349'>
<parse_done stamp='0.349'/>
</parse>
<phase name='optimize_blocks' stamp='0.349'>
<phase_done name='optimize_blocks' stamp='0.349'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.349'>
<phase_done name='rangeCheckElimination' stamp='0.349'/>
</phase>
<phase name='optimize_null_checks' stamp='0.349'>
<phase_done name='optimize_null_checks' stamp='0.349'/>
</phase>
<phase_done name='buildIR' stamp='0.349'/>
</phase>
<phase name='emit_lir' stamp='0.349'>
<phase name='lirGeneration' stamp='0.349'>
<phase_done name='lirGeneration' stamp='0.349'/>
</phase>
<phase name='linearScan' stamp='0.349'>
<phase_done name='linearScan' stamp='0.349'/>
</phase>
<phase_done name='emit_lir' stamp='0.349'/>
</phase>
<phase name='codeemit' stamp='0.349'>
<phase_done name='codeemit' stamp='0.349'/>
</phase>
<phase name='codeinstall' stamp='0.349'>
<phase_done name='codeinstall' stamp='0.353'/>
</phase>
<code_cache total_blobs='263' nmethods='12' adapters='163' free_code_cache='250526528'/>
<task_done success='1' nmsize='368' count='144384' stamp='0.353'/>
</task>
<task compile_id='24' compile_kind='osr' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='145919' iicount='1' osr_bci='12' level='3' stamp='0.380'>
<phase name='buildIR' stamp='0.380'>
<type id='709' name='void'/>
<klass id='818' name='[Ljava/lang/String;' flags='1041'/>
<klass id='817' name='com/awesomeJdk/practise/bthread/Thread2_volatile' flags='1'/>
<method id='819' holder='817' name='main' return='709' arguments='818' flags='9' bytes='85' iicount='1'/>
<parse method='819'  stamp='0.380'>
<bc code='183' bci='4'/>
<method id='821' holder='817' name='&lt;init&gt;' return='709' flags='1' bytes='10' iicount='1'/>
<call method='821' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='821'>
<bc code='183' bci='1'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<method id='823' holder='714' name='&lt;init&gt;' return='709' flags='1' bytes='1' iicount='8446'/>
<call method='823' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='823'>
<parse_done stamp='0.380'/>
</parse>
<parse_done stamp='0.380'/>
</parse>
<bc code='182' bci='21'/>
<type id='707' name='int'/>
<method id='825' holder='817' name='myadd' return='707' arguments='707 707' flags='1' bytes='17' compile_id='23' compiler='C1' level='2' iicount='145920'/>
<call method='825' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='817' x='825'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='817'/>
<parse method='825'>
<parse_done stamp='0.380'/>
</parse>
<bc code='183' bci='38'/>
<klass id='829' name='java/lang/StringBuilder' unloaded='1'/>
<method id='830' holder='829' name='&lt;init&gt;' return='709' unloaded='1'/>
<call method='830' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='43'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='832' holder='829' name='append' return='829' arguments='715' unloaded='1'/>
<call method='832' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='47'/>
<method id='833' holder='829' name='append' return='829' arguments='707' unloaded='1'/>
<call method='833' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='50'/>
<method id='834' holder='829' name='toString' return='715' unloaded='1'/>
<call method='834' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='53'/>
<klass id='827' name='java/io/PrintStream' unloaded='1'/>
<method id='835' holder='827' name='println' return='709' arguments='715' unloaded='1'/>
<call method='835' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='63'/>
<call method='830' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='68'/>
<call method='832' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='75'/>
<type id='708' name='long'/>
<method id='837' holder='829' name='append' return='829' arguments='708' unloaded='1'/>
<call method='837' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='78'/>
<call method='834' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='81'/>
<call method='835' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='0.380'/>
</parse>
<phase name='optimize_blocks' stamp='0.380'>
<phase_done name='optimize_blocks' stamp='0.380'/>
</phase>
<phase name='optimize_null_checks' stamp='0.380'>
<phase_done name='optimize_null_checks' stamp='0.380'/>
</phase>
<phase_done name='buildIR' stamp='0.380'/>
</phase>
<phase name='emit_lir' stamp='0.380'>
<phase name='lirGeneration' stamp='0.380'>
<phase_done name='lirGeneration' stamp='0.380'/>
</phase>
<phase name='linearScan' stamp='0.380'>
<phase_done name='linearScan' stamp='0.381'/>
</phase>
<phase_done name='emit_lir' stamp='0.381'/>
</phase>
<phase name='codeemit' stamp='0.381'>
<phase_done name='codeemit' stamp='0.381'/>
</phase>
<phase name='codeinstall' stamp='0.381'>
<dependency type='leaf_type' ctxk='817'/>
<dependency type='unique_concrete_method' ctxk='817' x='825'/>
<phase_done name='codeinstall' stamp='0.405'/>
</phase>
<code_cache total_blobs='266' nmethods='17' adapters='163' free_code_cache='250527552'/>
<task_done success='1' nmsize='3096' count='1' backedge_count='544369' inlined_bytes='28' stamp='0.405'/>
</task>
<task compile_id='17' method='java/util/HashMap put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' bytes='13' count='519' iicount='519' level='3' stamp='0.405'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='519' stamp='0.405'/>
</task>
<task compile_id='22' method='java/lang/AbstractStringBuilder append (Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;' bytes='50' count='1286' iicount='1286' level='3' stamp='0.405'>
<phase name='buildIR' stamp='0.405'>
<klass id='778' name='java/lang/AbstractStringBuilder' flags='1024'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='817' holder='778' name='append' return='778' arguments='715' flags='1' bytes='50' iicount='1286'/>
<parse method='817'  stamp='0.405'>
<bc code='183' bci='5'/>
<method id='819' holder='778' name='appendNull' return='778' flags='2' bytes='56' iicount='1'/>
<call method='819' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='10'/>
<type id='707' name='int'/>
<method id='821' holder='715' name='length' return='707' flags='1' bytes='6' compile_id='7' compiler='C2' level='4' iicount='29239'/>
<call method='821' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='821'>
<parse_done stamp='0.405'/>
</parse>
<bc code='183' bci='21'/>
<type id='709' name='void'/>
<method id='823' holder='778' name='ensureCapacityInternal' return='709' arguments='707' flags='2' bytes='16' compile_id='6' compiler='C2' level='4' iicount='23649'/>
<call method='823' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='823'>
<bc code='182' bci='12'/>
<method id='825' holder='778' name='expandCapacity' return='709' arguments='707' flags='0' bytes='50' iicount='535'/>
<call method='825' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='778' x='825'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='0.405'/>
</parse>
<bc code='182' bci='35'/>
<klass id='806' name='[C' flags='1041'/>
<method id='827' holder='715' name='getChars' return='709' arguments='707 707 806 707' flags='1' bytes='62' iicount='1356'/>
<call method='827' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='0.405'/>
</parse>
<phase name='optimize_blocks' stamp='0.405'>
<phase_done name='optimize_blocks' stamp='0.405'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.405'>
<phase_done name='rangeCheckElimination' stamp='0.405'/>
</phase>
<phase name='optimize_null_checks' stamp='0.405'>
<phase_done name='optimize_null_checks' stamp='0.405'/>
</phase>
<phase_done name='buildIR' stamp='0.405'/>
</phase>
<phase name='emit_lir' stamp='0.405'>
<phase name='lirGeneration' stamp='0.405'>
<phase_done name='lirGeneration' stamp='0.405'/>
</phase>
<phase name='linearScan' stamp='0.405'>
<phase_done name='linearScan' stamp='0.406'/>
</phase>
<phase_done name='emit_lir' stamp='0.406'/>
</phase>
<phase name='codeemit' stamp='0.406'>
<phase_done name='codeemit' stamp='0.406'/>
</phase>
<phase name='codeinstall' stamp='0.406'>
<dependency type='unique_concrete_method' ctxk='778' x='825'/>
<phase_done name='codeinstall' stamp='0.416'/>
</phase>
<code_cache total_blobs='267' nmethods='18' adapters='163' free_code_cache='250525056'/>
<task_done success='1' nmsize='1288' count='1286' inlined_bytes='22' stamp='0.416'/>
</task>
<task compile_id='26' method='com/awesomeJdk/practise/bthread/Thread2_volatile main ([Ljava/lang/String;)V' bytes='85' count='1' backedge_count='1000000' iicount='1' level='3' stamp='0.416'>
<phase name='buildIR' stamp='0.416'>
<type id='709' name='void'/>
<klass id='818' name='[Ljava/lang/String;' flags='1041'/>
<klass id='817' name='com/awesomeJdk/practise/bthread/Thread2_volatile' flags='1'/>
<method id='819' holder='817' name='main' return='709' arguments='818' flags='9' bytes='85' iicount='1'/>
<parse method='819'  stamp='0.416'>
<bc code='183' bci='4'/>
<method id='821' holder='817' name='&lt;init&gt;' return='709' flags='1' bytes='10' iicount='1'/>
<call method='821' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='821'>
<bc code='183' bci='1'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<method id='823' holder='714' name='&lt;init&gt;' return='709' flags='1' bytes='1' iicount='8450'/>
<call method='823' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='823'>
<parse_done stamp='0.416'/>
</parse>
<parse_done stamp='0.416'/>
</parse>
<bc code='182' bci='21'/>
<type id='707' name='int'/>
<method id='825' holder='817' name='myadd' return='707' arguments='707 707' flags='1' bytes='17' compile_id='25' compiler='C2' level='4' iicount='635166'/>
<call method='825' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='817'/>
<parse method='825'>
<parse_done stamp='0.416'/>
</parse>
<bc code='183' bci='38'/>
<klass id='829' name='java/lang/StringBuilder' unloaded='1'/>
<method id='830' holder='829' name='&lt;init&gt;' return='709' unloaded='1'/>
<call method='830' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='43'/>
<klass id='715' name='java/lang/String' flags='17'/>
<method id='832' holder='829' name='append' return='829' arguments='715' unloaded='1'/>
<call method='832' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='47'/>
<method id='833' holder='829' name='append' return='829' arguments='707' unloaded='1'/>
<call method='833' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='50'/>
<method id='834' holder='829' name='toString' return='715' unloaded='1'/>
<call method='834' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='53'/>
<klass id='827' name='java/io/PrintStream' flags='1'/>
<method id='835' holder='827' name='println' return='709' arguments='715' unloaded='1'/>
<call method='835' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='63'/>
<call method='830' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='68'/>
<call method='832' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='75'/>
<type id='708' name='long'/>
<method id='837' holder='829' name='append' return='829' arguments='708' unloaded='1'/>
<call method='837' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='78'/>
<call method='834' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='81'/>
<call method='835' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='0.416'/>
</parse>
<phase name='optimize_blocks' stamp='0.416'>
<phase_done name='optimize_blocks' stamp='0.416'/>
</phase>
<phase name='rangeCheckElimination' stamp='0.416'>
<phase_done name='rangeCheckElimination' stamp='0.416'/>
</phase>
<phase name='optimize_null_checks' stamp='0.416'>
<phase_done name='optimize_null_checks' stamp='0.416'/>
</phase>
<phase_done name='buildIR' stamp='0.416'/>
</phase>
<phase name='emit_lir' stamp='0.416'>
<phase name='lirGeneration' stamp='0.416'>
<phase_done name='lirGeneration' stamp='0.416'/>
</phase>
<phase name='linearScan' stamp='0.416'>
<phase_done name='linearScan' stamp='0.417'/>
</phase>
<phase_done name='emit_lir' stamp='0.417'/>
</phase>
<phase name='codeemit' stamp='0.417'>
<phase_done name='codeemit' stamp='0.417'/>
</phase>
<phase name='codeinstall' stamp='0.417'>
<dependency type='leaf_type' ctxk='817'/>
<phase_done name='codeinstall' stamp='0.436'/>
</phase>
<code_cache total_blobs='270' nmethods='20' adapters='163' free_code_cache='250514368'/>
<task_done success='1' nmsize='2712' count='1' backedge_count='1000000' inlined_bytes='28' stamp='0.436'/>
</task>
<fragment>
<![CDATA[
<task compile_id='11' method='java/util/zip/ZipCoder getBytes (Ljava/lang/String;)[B' bytes='192' count='391' iicount='391' level='3' stamp='0.436'>
<phase name='buildIR' stamp='0.437'>
<klass id='809' name='[B' flags='1041'/>
<klass id='715' name='java/lang/String' flags='17'/>
<klass id='817' name='java/util/zip/ZipCoder' flags='16'/>
<method id='818' holder='817' name='getBytes' return='809' arguments='715' flags='0' bytes='192' iicount='391'/>
<parse method='818'  stamp='0.437'>
<bc code='183' bci='1'/>
<klass id='820' name='java/nio/charset/CharsetEncoder' flags='1025'/>
<method id='821' holder='817' name='encoder' return='820' flags='2' bytes='35' iicount='391'/>
<call method='821' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='821'>
<bc code='182' bci='12'/>
<klass id='823' name='java/nio/charset/Charset' flags='1025'/>
<method id='824' holder='823' name='newEncoder' return='820' flags='1025' bytes='0' iicount='1'/>
<call method='824' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='18'/>
<klass id='825' name='java/nio/charset/CodingErrorAction' flags='1'/>
<method id='828' holder='820' name='onMalformedInput' return='820' arguments='825' flags='17' bytes='26' iicount='68'/>
<call method='828' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='828'>
<bc code='182' bci='21'/>
<type id='709' name='void'/>
<method id='830' holder='820' name='implOnMalformedInput' return='709' arguments='825' flags='4' bytes='1' iicount='68'/>
<call method='830' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='820' x='830'/>
<inline_success reason='receiver is statically known'/>
<parse method='830'>
<parse_done stamp='0.452'/>
</parse>
<parse_done stamp='0.452'/>
</parse>
<bc code='182' bci='24'/>
<method id='832' holder='820' name='onUnmappableCharacter' return='820' arguments='825' flags='17' bytes='26' iicount='68'/>
<call method='832' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='832'>
<bc code='182' bci='21'/>
<method id='834' holder='820' name='implOnUnmappableCharacter' return='709' arguments='825' flags='4' bytes='1' iicount='68'/>
<call method='834' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='820' x='834'/>
<inline_success reason='receiver is statically known'/>
<parse method='834'>
<parse_done stamp='0.452'/>
</parse>
<parse_done stamp='0.452'/>
</parse>
<parse_done stamp='0.452'/>
</parse>
<bc code='182' bci='4'/>
<method id='836' holder='820' name='reset' return='820' flags='17' bytes='11' iicount='391'/>
<call method='836' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='836'>
<bc code='182' bci='1'/>
<method id='838' holder='820' name='implReset' return='709' flags='4' bytes='1' iicount='391'/>
<call method='838' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='820' x='838'/>
<inline_success reason='receiver is statically known'/>
<parse method='838'>
<parse_done stamp='0.453'/>
</parse>
<parse_done stamp='0.453'/>
</parse>
<bc code='182' bci='9'/>
<klass id='806' name='[C' flags='1041'/>
<method id='840' holder='715' name='toCharArray' return='806' flags='1' bytes='25' iicount='754'/>
<call method='840' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='840'>
<bc code='184' bci='20'/>
<klass id='714' name='java/lang/Object' flags='1'/>
<type id='707' name='int'/>
<klass id='720' name='java/lang/System' flags='17'/>
<method id='842' holder='720' name='arraycopy' return='709' arguments='714 707 714 707 707' flags='265' bytes='0' compile_id='15' compile_kind='c2n' level='0' iicount='6528'/>
<call method='842' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<parse_done stamp='0.453'/>
</parse>
<bc code='182' bci='17'/>
<type id='703' name='float'/>
<method id='844' holder='820' name='maxBytesPerChar' return='703' flags='17' bytes='5' iicount='464'/>
<call method='844' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='844'>
<parse_done stamp='0.453'/>
</parse>
<bc code='185' bci='62'/>
<klass id='846' name='sun/nio/cs/ArrayEncoder' flags='1537'/>
<method id='847' holder='846' name='encode' return='707' arguments='806 707 707 809' flags='1025' bytes='0' iicount='1'/>
<call method='847' instr='invokeinterface'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='81'/>
<klass id='848' name='java/lang/IllegalArgumentException' flags='1'/>
<method id='850' holder='848' name='&lt;init&gt;' return='709' arguments='715' flags='1' bytes='6' iicount='1'/>
<call method='850' instr='invokespecial'/>
<inline_fail reason='don&apos;t inline Throwable constructors'/>
<bc code='184' bci='89'/>
<klass id='852' name='java/util/Arrays' flags='1'/>
<method id='853' holder='852' name='copyOf' return='809' arguments='809 707' flags='9' bytes='19' iicount='627'/>
<call method='853' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='853'>
<bc code='184' bci='11'/>
<klass id='855' name='java/lang/Math' flags='17'/>
<method id='856' holder='855' name='min' return='707' arguments='707 707' flags='9' bytes='11' compile_id='2' compiler='C1' level='3' iicount='4200'/>
<call method='856' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='856'>
<parse_done stamp='0.453'/>
</parse>
<bc code='184' bci='14'/>
<call method='842' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<parse_done stamp='0.453'/>
</parse>
<bc code='184' bci='95'/>
<klass id='858' name='java/nio/ByteBuffer' flags='1025'/>
<method id='859' holder='858' name='wrap' return='858' arguments='809' flags='9' bytes='8' iicount='2'/>
<call method='859' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='859'>
<bc code='184' bci='4'/>
<method id='861' holder='858' name='wrap' return='858' arguments='809 707 707' flags='9' bytes='20' iicount='2'/>
<call method='861' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='861'>
<bc code='183' bci='7'/>
<klass id='863' name='java/nio/HeapByteBuffer' flags='0'/>
<method id='864' holder='863' name='&lt;init&gt;' return='709' arguments='809 707 707' flags='0' bytes='14' iicount='2'/>
<call method='864' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<bc code='183' bci='10'/>
<method id='866' holder='858' name='&lt;init&gt;' return='709' arguments='707 707 707 707 809 707' flags='0' bytes='45' iicount='63'/>
<call method='866' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='0.454'/>
</parse>
<bc code='183' bci='16'/>
<klass id='868' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<method id='869' holder='868' name='&lt;init&gt;' return='709' unloaded='1'/>
<call method='869' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='0.454'/>
</parse>
<parse_done stamp='0.454'/>
</parse>
<bc code='184' bci='101'/>
<klass id='870' name='java/nio/CharBuffer' flags='1025'/>
<method id='871' holder='870' name='wrap' return='870' arguments='806' flags='9' bytes='8' iicount='1'/>
<call method='871' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='184' bci='4'/>
<method id='873' holder='870' name='wrap' return='870' arguments='806 707 707' flags='9' bytes='20' iicount='10'/>
<call method='873' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='873'>
<bc code='183' bci='7'/>
<klass id='875' name='java/nio/HeapCharBuffer' flags='0'/>
<method id='876' holder='875' name=']]>
</fragment>
</compilation_log>
<hotspot_log_done stamp='0.459'/>
</hotspot_log>
